
stm32_hd44780_fourier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d10  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08006ef0  08006ef0  00016ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072cc  080072cc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080072d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  200001fc  080074d0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  080074d0  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc6a  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fd8  00000000  00000000  0003fed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000c19e  00000000  00000000  00043eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001110  00000000  00000000  00050050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001183  00000000  00000000  00051160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000218b5  00000000  00000000  000522e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000203df  00000000  00000000  00073b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de195  00000000  00000000  00093f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000042d0  00000000  00000000  0017210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001763dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006ed8 	.word	0x08006ed8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08006ed8 	.word	0x08006ed8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ef6:	2400      	movs	r4, #0
{
 8000ef8:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	2220      	movs	r2, #32
 8000efc:	4621      	mov	r1, r4
 8000efe:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000f00:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000f04:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	f003 feec 	bl	8004ce2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f0a:	481f      	ldr	r0, [pc, #124]	; (8000f88 <MX_ADC1_Init+0x94>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000f0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f10:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000f14:	e9c0 1300 	strd	r1, r3, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	6183      	str	r3, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f1c:	f44f 6cac 	mov.w	ip, #1376	; 0x560
  hadc1.Init.NbrOfConversion = 1;
 8000f20:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f26:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f2c:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f30:	e9c0 c20b 	strd	ip, r2, [r0, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8000f34:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f3a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3e:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f40:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f44:	f000 fe30 	bl	8001ba8 <HAL_ADC_Init>
 8000f48:	b108      	cbz	r0, 8000f4e <MX_ADC1_Init+0x5a>
  {
    Error_Handler();
 8000f4a:	f000 fb71 	bl	8001630 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <MX_ADC1_Init+0x94>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f50:	9401      	str	r4, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f52:	a901      	add	r1, sp, #4
 8000f54:	f001 f9e4 	bl	8002320 <HAL_ADCEx_MultiModeConfigChannel>
 8000f58:	b108      	cbz	r0, 8000f5e <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8000f5a:	f000 fb69 	bl	8001630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <MX_ADC1_Init+0x98>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f62:	2306      	movs	r3, #6
 8000f64:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	227f      	movs	r2, #127	; 0x7f
 8000f6c:	e9cd 3206 	strd	r3, r2, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	a904      	add	r1, sp, #16
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f72:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8000f74:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	f000 ff56 	bl	8001e28 <HAL_ADC_ConfigChannel>
 8000f7c:	b108      	cbz	r0, 8000f82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f7e:	f000 fb57 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f82:	b00c      	add	sp, #48	; 0x30
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	bf00      	nop
 8000f88:	20000218 	.word	0x20000218
 8000f8c:	1d500080 	.word	0x1d500080

08000f90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	b098      	sub	sp, #96	; 0x60
 8000f94:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	2214      	movs	r2, #20
 8000f98:	2100      	movs	r1, #0
 8000f9a:	a802      	add	r0, sp, #8
 8000f9c:	f003 fea1 	bl	8004ce2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa0:	2244      	movs	r2, #68	; 0x44
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	a807      	add	r0, sp, #28
 8000fa6:	f003 fe9c 	bl	8004ce2 <memset>
  if(adcHandle->Instance==ADC1)
 8000faa:	682b      	ldr	r3, [r5, #0]
 8000fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fb0:	d142      	bne.n	8001038 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb6:	9307      	str	r3, [sp, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb8:	a807      	add	r0, sp, #28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fbe:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f002 f848 	bl	8003054 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	b108      	cbz	r0, 8000fca <HAL_ADC_MspInit+0x3a>
    {
      Error_Handler();
 8000fc6:	f000 fb33 	bl	8001630 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_ADC_MspInit+0xac>)
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	481c      	ldr	r0, [pc, #112]	; (8001040 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fd0:	4c1c      	ldr	r4, [pc, #112]	; (8001044 <HAL_ADC_MspInit+0xb4>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8000fde:	9200      	str	r2, [sp, #0]
 8000fe0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe4:	f042 0204 	orr.w	r2, r2, #4
 8000fe8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f001 fb95 	bl	8002730 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001006:	4910      	ldr	r1, [pc, #64]	; (8001048 <HAL_ADC_MspInit+0xb8>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001008:	6226      	str	r6, [r4, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800100a:	2305      	movs	r3, #5
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800100c:	2080      	movs	r0, #128	; 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800100e:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001016:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101a:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 800101e:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001020:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001022:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001026:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800102a:	f001 fa83 	bl	8002534 <HAL_DMA_Init>
 800102e:	b108      	cbz	r0, 8001034 <HAL_ADC_MspInit+0xa4>
    {
      Error_Handler();
 8001030:	f000 fafe 	bl	8001630 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001034:	656c      	str	r4, [r5, #84]	; 0x54
 8001036:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001038:	b018      	add	sp, #96	; 0x60
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	48000800 	.word	0x48000800
 8001044:	20000284 	.word	0x20000284
 8001048:	40020008 	.word	0x40020008

0800104c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_DMA_Init+0x40>)
{
 800104e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001052:	f042 0204 	orr.w	r2, r2, #4
 8001056:	649a      	str	r2, [r3, #72]	; 0x48
 8001058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800105a:	f002 0204 	and.w	r2, r2, #4
 800105e:	9200      	str	r2, [sp, #0]
 8001060:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001064:	f042 0201 	orr.w	r2, r2, #1
 8001068:	649a      	str	r2, [r3, #72]	; 0x48
 800106a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2101      	movs	r1, #1
 8001076:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001078:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800107a:	f001 f9c9 	bl	8002410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800107e:	200b      	movs	r0, #11

}
 8001080:	b003      	add	sp, #12
 8001082:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001086:	f001 b9f5 	b.w	8002474 <HAL_NVIC_EnableIRQ>
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	2214      	movs	r2, #20
{
 8001094:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	eb0d 0002 	add.w	r0, sp, r2
 800109a:	2100      	movs	r1, #0
 800109c:	f003 fe21 	bl	8004ce2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_GPIO_Init+0xd8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80010a2:	4f32      	ldr	r7, [pc, #200]	; (800116c <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|TEST_PIN_Pin, GPIO_PIN_RESET);
 80010a6:	4d32      	ldr	r5, [pc, #200]	; (8001170 <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a8:	f042 0204 	orr.w	r2, r2, #4
 80010ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80010ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010b0:	f002 0204 	and.w	r2, r2, #4
 80010b4:	9201      	str	r2, [sp, #4]
 80010b6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ba:	f042 0220 	orr.w	r2, r2, #32
 80010be:	64da      	str	r2, [r3, #76]	; 0x4c
 80010c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c2:	f002 0220 	and.w	r2, r2, #32
 80010c6:	9202      	str	r2, [sp, #8]
 80010c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010cc:	f042 0201 	orr.w	r2, r2, #1
 80010d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80010d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d4:	f002 0201 	and.w	r2, r2, #1
 80010d8:	9203      	str	r2, [sp, #12]
 80010da:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010de:	f042 0202 	orr.w	r2, r2, #2
 80010e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2122      	movs	r1, #34	; 0x22
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80010f6:	f001 fbe7 	bl	80028c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80010fa:	4638      	mov	r0, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001102:	f001 fbe1 	bl	80028c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|TEST_PIN_Pin, GPIO_PIN_RESET);
 8001106:	4628      	mov	r0, r5
 8001108:	2200      	movs	r2, #0
 800110a:	21c0      	movs	r1, #192	; 0xc0
 800110c:	f001 fbdc 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001116:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111a:	a905      	add	r1, sp, #20
 800111c:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111e:	e9cd 2305 	strd	r2, r3, [sp, #20]

  /*Configure GPIO pins : PA1 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001126:	f001 fb03 	bl	8002730 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2322      	movs	r3, #34	; 0x22
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	a905      	add	r1, sp, #20
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f001 faf9 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800113e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	a905      	add	r1, sp, #20
 8001144:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f001 faef 	bl	8002730 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|TEST_PIN_Pin;
 8001152:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	a905      	add	r1, sp, #20
 8001156:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f001 fae6 	bl	8002730 <HAL_GPIO_Init>

}
 8001164:	b00b      	add	sp, #44	; 0x2c
 8001166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800

08001174 <hd44780_data_out>:

static GPIO_TypeDef *HD44780_DATA_PORTS[4] = {HD44780_DB4_PORT, HD44780_DB5_PORT, HD44780_DB6_PORT, HD44780_DB7_PORT};
static uint16_t HD44780_DATA_PINS[4] = {HD44780_DB4_PIN, HD44780_DB5_PIN, HD44780_DB6_PIN, HD44780_DB7_PIN};

static void hd44780_data_out(void)
{
 8001174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_data_out;

	GPIO_data_out.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	9302      	str	r3, [sp, #8]
	GPIO_data_out.Pin = GPIO_NOPULL;
	GPIO_data_out.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	9304      	str	r3, [sp, #16]

	for (uint8_t i = 0; i < 4; i++) {
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 800117e:	a901      	add	r1, sp, #4
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 8001180:	f44f 6300 	mov.w	r3, #2048	; 0x800
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <hd44780_data_out+0x48>)
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 8001186:	9301      	str	r3, [sp, #4]
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 8001188:	f001 fad2 	bl	8002730 <HAL_GPIO_Init>
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 8001190:	a901      	add	r1, sp, #4
 8001192:	480a      	ldr	r0, [pc, #40]	; (80011bc <hd44780_data_out+0x48>)
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 8001194:	9301      	str	r3, [sp, #4]
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 8001196:	f001 facb 	bl	8002730 <HAL_GPIO_Init>
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 800119e:	a901      	add	r1, sp, #4
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <hd44780_data_out+0x48>)
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 80011a2:	9301      	str	r3, [sp, #4]
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 80011a4:	f001 fac4 	bl	8002730 <HAL_GPIO_Init>
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 80011a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <hd44780_data_out+0x48>)
		GPIO_data_out.Pin = HD44780_DATA_PINS[i];
 80011ae:	9301      	str	r3, [sp, #4]
		HAL_GPIO_Init(HD44780_DATA_PORTS[i], &GPIO_data_out);
 80011b0:	a901      	add	r1, sp, #4
 80011b2:	f001 fabd 	bl	8002730 <HAL_GPIO_Init>
	}
}
 80011b6:	b007      	add	sp, #28
 80011b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80011bc:	48000400 	.word	0x48000400

080011c0 <hd44780_write4bits>:
	return (hd44780_readByte() & HD44780_BUSY_FLAG);
}
#endif

static void hd44780_write4bits(uint8_t bits)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < 4; i++)
		HAL_GPIO_WritePin(HD44780_DATA_PORTS[i], HD44780_DATA_PINS[i], bits & (1 << i));
 80011c4:	f004 0201 	and.w	r2, r4, #1
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <hd44780_write4bits+0x40>)
 80011ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ce:	f001 fb7b 	bl	80028c8 <HAL_GPIO_WritePin>
 80011d2:	f004 0202 	and.w	r2, r4, #2
 80011d6:	480a      	ldr	r0, [pc, #40]	; (8001200 <hd44780_write4bits+0x40>)
 80011d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011dc:	f001 fb74 	bl	80028c8 <HAL_GPIO_WritePin>
 80011e0:	f004 0204 	and.w	r2, r4, #4
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <hd44780_write4bits+0x40>)
 80011e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ea:	f001 fb6d 	bl	80028c8 <HAL_GPIO_WritePin>
 80011ee:	f004 0208 	and.w	r2, r4, #8
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <hd44780_write4bits+0x40>)
}
 80011f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(HD44780_DATA_PORTS[i], HD44780_DATA_PINS[i], bits & (1 << i));
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	f001 bb64 	b.w	80028c8 <HAL_GPIO_WritePin>
 8001200:	48000400 	.word	0x48000400

08001204 <hd44780_writeByte>:

static void hd44780_writeByte(uint8_t byte)
{
 8001204:	b538      	push	{r3, r4, r5, lr}
	HD44780_SET_WRITE;
	hd44780_data_out();

	HD44780_START_PROCESS;
 8001206:	4c16      	ldr	r4, [pc, #88]	; (8001260 <hd44780_writeByte+0x5c>)
{
 8001208:	4605      	mov	r5, r0
	HD44780_SET_WRITE;
 800120a:	2200      	movs	r2, #0
 800120c:	2102      	movs	r1, #2
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f001 fb59 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_data_out();
 8001216:	f7ff ffad 	bl	8001174 <hd44780_data_out>
	HD44780_START_PROCESS;
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	4620      	mov	r0, r4
 8001222:	f001 fb51 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_write4bits(byte >> 4);
 8001226:	0928      	lsrs	r0, r5, #4
 8001228:	f7ff ffca 	bl	80011c0 <hd44780_write4bits>
	HD44780_STOP_PROCESS;
 800122c:	4620      	mov	r0, r4
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001234:	f001 fb48 	bl	80028c8 <HAL_GPIO_WritePin>

	HD44780_START_PROCESS;
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123e:	4620      	mov	r0, r4
 8001240:	f001 fb42 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_write4bits(byte);
 8001244:	4628      	mov	r0, r5
 8001246:	f7ff ffbb 	bl	80011c0 <hd44780_write4bits>
	HD44780_STOP_PROCESS;
 800124a:	4620      	mov	r0, r4
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001252:	f001 fb39 	bl	80028c8 <HAL_GPIO_WritePin>
	while (hd44780_is_busy())
		;
#else
	HAL_Delay(1);
#endif
}
 8001256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 bc78 	b.w	8001b50 <HAL_Delay>
 8001260:	48000400 	.word	0x48000400

08001264 <hd44780_writeCommand>:
	HD44780_SET_DATA;
	hd44780_writeByte(data);
}

static void hd44780_writeCommand(uint8_t command)
{
 8001264:	b510      	push	{r4, lr}
	HD44780_SET_COMMAND;
 8001266:	2200      	movs	r2, #0
{
 8001268:	4604      	mov	r4, r0
	HD44780_SET_COMMAND;
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <hd44780_writeCommand+0x18>)
 800126e:	f001 fb2b 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_writeByte(command);
 8001272:	4620      	mov	r0, r4
}
 8001274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hd44780_writeByte(command);
 8001278:	f7ff bfc4 	b.w	8001204 <hd44780_writeByte>
 800127c:	48000800 	.word	0x48000800

08001280 <HD44780_ClearBuffer>:
	HD44780_ClearBuffer();

}

void HD44780_ClearBuffer(void)
{
 8001280:	b510      	push	{r4, lr}
	lcd.data.x = lcd.data.y = 0;
 8001282:	4c09      	ldr	r4, [pc, #36]	; (80012a8 <HD44780_ClearBuffer+0x28>)
 8001284:	4620      	mov	r0, r4
 8001286:	2300      	movs	r3, #0

	for (uint8_t y = 0; y < HD44780_HEIGHT; y++)
		for (uint8_t x = 0; x < HD44780_WIDTH; x++)
			lcd.data.screen_buffer[y][x] = ' ';
 8001288:	2210      	movs	r2, #16
 800128a:	2120      	movs	r1, #32
	lcd.data.x = lcd.data.y = 0;
 800128c:	f800 3b02 	strb.w	r3, [r0], #2
 8001290:	7063      	strb	r3, [r4, #1]
			lcd.data.screen_buffer[y][x] = ' ';
 8001292:	f003 fd26 	bl	8004ce2 <memset>
 8001296:	f104 0012 	add.w	r0, r4, #18
 800129a:	2210      	movs	r2, #16
}
 800129c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			lcd.data.screen_buffer[y][x] = ' ';
 80012a0:	2120      	movs	r1, #32
 80012a2:	f003 bd1e 	b.w	8004ce2 <memset>
 80012a6:	bf00      	nop
 80012a8:	20000000 	.word	0x20000000

080012ac <HD44780_SetCursor>:
	/*
	lcd.data.x = x % HD44780_WIDTH;
	lcd.data.y = y % HD44780_HEIGHT;
	*/

	lcd.data.x = x;
 80012ac:	4b01      	ldr	r3, [pc, #4]	; (80012b4 <HD44780_SetCursor+0x8>)
 80012ae:	7018      	strb	r0, [r3, #0]
	lcd.data.y = y;
 80012b0:	7059      	strb	r1, [r3, #1]
}
 80012b2:	4770      	bx	lr
 80012b4:	20000000 	.word	0x20000000

080012b8 <HD44780_WriteChar>:

void HD44780_WriteChar(char c)
{
 80012b8:	b510      	push	{r4, lr}
	lcd.data.screen_buffer[lcd.data.y][lcd.data.x++] = c;
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <HD44780_WriteChar+0x24>)
 80012bc:	784a      	ldrb	r2, [r1, #1]
 80012be:	780b      	ldrb	r3, [r1, #0]
 80012c0:	eb01 1402 	add.w	r4, r1, r2, lsl #4
 80012c4:	441c      	add	r4, r3
 80012c6:	3301      	adds	r3, #1

	lcd.data.x %= HD44780_WIDTH;
 80012c8:	f003 030f 	and.w	r3, r3, #15
	lcd.data.screen_buffer[lcd.data.y][lcd.data.x++] = c;
 80012cc:	70a0      	strb	r0, [r4, #2]
	lcd.data.x %= HD44780_WIDTH;
 80012ce:	700b      	strb	r3, [r1, #0]
	if (lcd.data.x == 0)
 80012d0:	b91b      	cbnz	r3, 80012da <HD44780_WriteChar+0x22>
		lcd.data.y = (lcd.data.y + 1) % HD44780_HEIGHT;
 80012d2:	3201      	adds	r2, #1
 80012d4:	f002 0201 	and.w	r2, r2, #1
 80012d8:	704a      	strb	r2, [r1, #1]
}
 80012da:	bd10      	pop	{r4, pc}
 80012dc:	20000000 	.word	0x20000000

080012e0 <HD44780_WriteString>:

void HD44780_WriteString(char *s)
{
 80012e0:	b510      	push	{r4, lr}
 80012e2:	1e44      	subs	r4, r0, #1
	while (*s)
 80012e4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80012e8:	b900      	cbnz	r0, 80012ec <HD44780_WriteString+0xc>
		HD44780_WriteChar(*s++);
}
 80012ea:	bd10      	pop	{r4, pc}
		HD44780_WriteChar(*s++);
 80012ec:	f7ff ffe4 	bl	80012b8 <HD44780_WriteChar>
 80012f0:	e7f8      	b.n	80012e4 <HD44780_WriteString+0x4>
	...

080012f4 <HD44780_Update>:

void HD44780_Update(void)
{
 80012f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012f8:	4d20      	ldr	r5, [pc, #128]	; (800137c <HD44780_Update+0x88>)
 80012fa:	4e21      	ldr	r6, [pc, #132]	; (8001380 <HD44780_Update+0x8c>)
	HD44780_SET_DATA;
 80012fc:	4f21      	ldr	r7, [pc, #132]	; (8001384 <HD44780_Update+0x90>)
	static uint8_t last_screen_buffer[HD44780_HEIGHT][HD44780_WIDTH];

	for (uint8_t y = 0; y < HD44780_HEIGHT; y++) {
		for (uint8_t x = 0; x < HD44780_WIDTH; x++) {
 80012fe:	2400      	movs	r4, #0
			if (last_screen_buffer[y][x] != lcd.data.screen_buffer[y][x]) {
 8001300:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001304:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001308:	429a      	cmp	r2, r3
 800130a:	d010      	beq.n	800132e <HD44780_Update+0x3a>
				hd44780_writeCommand(HD44780_SET_DDRAM_ADDRESS + (y * 0x40) + x);
 800130c:	f084 0080 	eor.w	r0, r4, #128	; 0x80
 8001310:	f7ff ffa8 	bl	8001264 <hd44780_writeCommand>
				hd44780_writeData(lcd.data.screen_buffer[y][x]);
 8001314:	f895 8000 	ldrb.w	r8, [r5]
	HD44780_SET_DATA;
 8001318:	2201      	movs	r2, #1
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	4638      	mov	r0, r7
 800131e:	f001 fad3 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_writeByte(data);
 8001322:	4640      	mov	r0, r8
 8001324:	f7ff ff6e 	bl	8001204 <hd44780_writeByte>
				last_screen_buffer[y][x] = lcd.data.screen_buffer[y][x];
 8001328:	782b      	ldrb	r3, [r5, #0]
 800132a:	f806 3c01 	strb.w	r3, [r6, #-1]
		for (uint8_t x = 0; x < HD44780_WIDTH; x++) {
 800132e:	3401      	adds	r4, #1
 8001330:	b2e4      	uxtb	r4, r4
 8001332:	2c10      	cmp	r4, #16
 8001334:	d1e4      	bne.n	8001300 <HD44780_Update+0xc>
 8001336:	4c14      	ldr	r4, [pc, #80]	; (8001388 <HD44780_Update+0x94>)
 8001338:	4e14      	ldr	r6, [pc, #80]	; (800138c <HD44780_Update+0x98>)
	HD44780_SET_DATA;
 800133a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8001384 <HD44780_Update+0x90>
 800133e:	f104 0710 	add.w	r7, r4, #16
		for (uint8_t x = 0; x < HD44780_WIDTH; x++) {
 8001342:	25c0      	movs	r5, #192	; 0xc0
			if (last_screen_buffer[y][x] != lcd.data.screen_buffer[y][x]) {
 8001344:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8001348:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800134c:	429a      	cmp	r2, r3
 800134e:	d00e      	beq.n	800136e <HD44780_Update+0x7a>
				hd44780_writeCommand(HD44780_SET_DDRAM_ADDRESS + (y * 0x40) + x);
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff ff87 	bl	8001264 <hd44780_writeCommand>
				hd44780_writeData(lcd.data.screen_buffer[y][x]);
 8001356:	f896 9000 	ldrb.w	r9, [r6]
	HD44780_SET_DATA;
 800135a:	2201      	movs	r2, #1
 800135c:	2140      	movs	r1, #64	; 0x40
 800135e:	4640      	mov	r0, r8
 8001360:	f001 fab2 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_writeByte(data);
 8001364:	4648      	mov	r0, r9
 8001366:	f7ff ff4d 	bl	8001204 <hd44780_writeByte>
				last_screen_buffer[y][x] = lcd.data.screen_buffer[y][x];
 800136a:	7833      	ldrb	r3, [r6, #0]
 800136c:	7023      	strb	r3, [r4, #0]
		for (uint8_t x = 0; x < HD44780_WIDTH; x++) {
 800136e:	3501      	adds	r5, #1
 8001370:	42bc      	cmp	r4, r7
 8001372:	b2ed      	uxtb	r5, r5
 8001374:	d1e6      	bne.n	8001344 <HD44780_Update+0x50>
			}
		}
	}
}
 8001376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800137a:	bf00      	nop
 800137c:	20000001 	.word	0x20000001
 8001380:	200002e4 	.word	0x200002e4
 8001384:	48000800 	.word	0x48000800
 8001388:	200002f3 	.word	0x200002f3
 800138c:	20000011 	.word	0x20000011

08001390 <HD44780_SetContrast>:

#if HD44780_USE_CONTRAST == 1
void HD44780_SetContrast(uint8_t percent)
{
	uint16_t pwm_new_value = (percent * TIMER_AUTORELOAD) / 100;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HD44780_SetContrast+0x18>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001396:	fb02 0000 	mla	r0, r2, r0, r0
 800139a:	2264      	movs	r2, #100	; 0x64
 800139c:	fbb0 f0f2 	udiv	r0, r0, r2
 80013a0:	b280      	uxth	r0, r0

	__HAL_TIM_SET_COMPARE(&contrast_timer, contrast_timer_channel, pwm_new_value);
 80013a2:	6358      	str	r0, [r3, #52]	; 0x34
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200003a8 	.word	0x200003a8

080013ac <HD44780_Init>:
{
 80013ac:	b530      	push	{r4, r5, lr}
	HAL_TIM_PWM_Start(&contrast_timer, contrast_timer_channel);
 80013ae:	2100      	movs	r1, #0
{
 80013b0:	b087      	sub	sp, #28
	HAL_TIM_PWM_Start(&contrast_timer, contrast_timer_channel);
 80013b2:	4839      	ldr	r0, [pc, #228]	; (8001498 <HD44780_Init+0xec>)
 80013b4:	f002 fbe0 	bl	8003b78 <HAL_TIM_PWM_Start>
	HD44780_SetContrast(40);
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f7ff ffe9 	bl	8001390 <HD44780_SetContrast>
	HAL_TIM_Base_Start(&delay_us_timer);
 80013be:	4837      	ldr	r0, [pc, #220]	; (800149c <HD44780_Init+0xf0>)
 80013c0:	f002 f8c4 	bl	800354c <HAL_TIM_Base_Start>
	GPIO_command_pins.Pin = HD44780_E_PIN;
 80013c4:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	GPIO_command_pins.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
	GPIO_command_pins.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2200      	movs	r2, #0
	HAL_GPIO_Init(HD44780_E_PORT, &GPIO_command_pins);
 80013cc:	4834      	ldr	r0, [pc, #208]	; (80014a0 <HD44780_Init+0xf4>)
	GPIO_command_pins.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(HD44780_E_PORT, &GPIO_command_pins);
 80013d0:	a901      	add	r1, sp, #4
	GPIO_command_pins.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	9204      	str	r2, [sp, #16]
	GPIO_command_pins.Pin = HD44780_RS_PIN;
 80013d4:	2440      	movs	r4, #64	; 0x40
	GPIO_command_pins.Pin = HD44780_E_PIN;
 80013d6:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(HD44780_E_PORT, &GPIO_command_pins);
 80013d8:	f001 f9aa 	bl	8002730 <HAL_GPIO_Init>
	HAL_GPIO_Init(HD44780_RS_PORT, &GPIO_command_pins);
 80013dc:	4831      	ldr	r0, [pc, #196]	; (80014a4 <HD44780_Init+0xf8>)
	GPIO_command_pins.Pin = HD44780_RS_PIN;
 80013de:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(HD44780_RS_PORT, &GPIO_command_pins);
 80013e0:	a901      	add	r1, sp, #4
 80013e2:	f001 f9a5 	bl	8002730 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(HD44780_E_PORT, HD44780_E_PIN, GPIO_PIN_RESET);
 80013e6:	482e      	ldr	r0, [pc, #184]	; (80014a0 <HD44780_Init+0xf4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	4629      	mov	r1, r5
 80013ec:	f001 fa6c 	bl	80028c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_RS_PORT, HD44780_RS_PIN, GPIO_PIN_RESET);
 80013f0:	4621      	mov	r1, r4
 80013f2:	482c      	ldr	r0, [pc, #176]	; (80014a4 <HD44780_Init+0xf8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f001 fa67 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_data_out();
 80013fa:	f7ff febb 	bl	8001174 <hd44780_data_out>
	HAL_Delay(100);
 80013fe:	2064      	movs	r0, #100	; 0x64
 8001400:	f000 fba6 	bl	8001b50 <HAL_Delay>
 8001404:	2403      	movs	r4, #3
		HD44780_START_PROCESS;
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140c:	4824      	ldr	r0, [pc, #144]	; (80014a0 <HD44780_Init+0xf4>)
 800140e:	f001 fa5b 	bl	80028c8 <HAL_GPIO_WritePin>
		hd44780_write4bits(0x03);
 8001412:	2003      	movs	r0, #3
 8001414:	f7ff fed4 	bl	80011c0 <hd44780_write4bits>
		HD44780_STOP_PROCESS;
 8001418:	4821      	ldr	r0, [pc, #132]	; (80014a0 <HD44780_Init+0xf4>)
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	f001 fa52 	bl	80028c8 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; i++) {
 8001424:	3c01      	subs	r4, #1
		HAL_Delay(5);
 8001426:	2005      	movs	r0, #5
 8001428:	f000 fb92 	bl	8001b50 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 800142c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001430:	d1e9      	bne.n	8001406 <HD44780_Init+0x5a>
	HD44780_START_PROCESS;
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001438:	4819      	ldr	r0, [pc, #100]	; (80014a0 <HD44780_Init+0xf4>)
 800143a:	f001 fa45 	bl	80028c8 <HAL_GPIO_WritePin>
	hd44780_write4bits(0x02);
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff febe 	bl	80011c0 <hd44780_write4bits>
	HD44780_STOP_PROCESS;
 8001444:	4816      	ldr	r0, [pc, #88]	; (80014a0 <HD44780_Init+0xf4>)
 8001446:	4622      	mov	r2, r4
 8001448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144c:	f001 fa3c 	bl	80028c8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&delay_us_timer, 0);
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HD44780_Init+0xf0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	625c      	str	r4, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&delay_us_timer) < us)
 8001456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001458:	2a95      	cmp	r2, #149	; 0x95
 800145a:	d9fc      	bls.n	8001456 <HD44780_Init+0xaa>
	hd44780_writeCommand(lcd.config.function);
 800145c:	4c12      	ldr	r4, [pc, #72]	; (80014a8 <HD44780_Init+0xfc>)
 800145e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8001462:	f7ff feff 	bl	8001264 <hd44780_writeCommand>
	hd44780_writeCommand(0x08);
 8001466:	2008      	movs	r0, #8
 8001468:	f7ff fefc 	bl	8001264 <hd44780_writeCommand>
	hd44780_writeCommand(0x01);
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fef9 	bl	8001264 <hd44780_writeCommand>
	hd44780_writeCommand(lcd.config.entry_mode);
 8001472:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 8001476:	f7ff fef5 	bl	8001264 <hd44780_writeCommand>
	hd44780_writeCommand(lcd.config.display_control);
 800147a:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 800147e:	f7ff fef1 	bl	8001264 <hd44780_writeCommand>
	hd44780_writeCommand(HD44780_CLEAR);
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff feee 	bl	8001264 <hd44780_writeCommand>
	hd44780_writeCommand(HD44780_HOME);
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff feeb 	bl	8001264 <hd44780_writeCommand>
	HD44780_ClearBuffer();
 800148e:	f7ff fef7 	bl	8001280 <HD44780_ClearBuffer>
}
 8001492:	b007      	add	sp, #28
 8001494:	bd30      	pop	{r4, r5, pc}
 8001496:	bf00      	nop
 8001498:	200003a8 	.word	0x200003a8
 800149c:	2000035c 	.word	0x2000035c
 80014a0:	48000400 	.word	0x48000400
 80014a4:	48000800 	.word	0x48000800
 80014a8:	20000000 	.word	0x20000000

080014ac <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef * hadc)
{
	if (hadc == &hadc1) {
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_ADC_ConvHalfCpltCallback+0x10>)
 80014ae:	4283      	cmp	r3, r0
		adc_callback = CONVERSION_HALF;
 80014b0:	bf02      	ittt	eq
 80014b2:	4b03      	ldreq	r3, [pc, #12]	; (80014c0 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 80014b4:	2201      	moveq	r2, #1
 80014b6:	701a      	strbeq	r2, [r3, #0]
	}
}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000218 	.word	0x20000218
 80014c0:	20000304 	.word	0x20000304

080014c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
	if (hadc == &hadc1) {
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_ADC_ConvCpltCallback+0x10>)
 80014c6:	4283      	cmp	r3, r0
		adc_callback = CONVERSION_FINISHED;
 80014c8:	bf02      	ittt	eq
 80014ca:	4b03      	ldreq	r3, [pc, #12]	; (80014d8 <HAL_ADC_ConvCpltCallback+0x14>)
 80014cc:	2202      	moveq	r2, #2
 80014ce:	701a      	strbeq	r2, [r3, #0]
	}
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000218 	.word	0x20000218
 80014d8:	20000304 	.word	0x20000304

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b510      	push	{r4, lr}
 80014de:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e0:	2238      	movs	r2, #56	; 0x38
 80014e2:	2100      	movs	r1, #0
 80014e4:	a806      	add	r0, sp, #24
 80014e6:	f003 fbfc 	bl	8004ce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ea:	2214      	movs	r2, #20
 80014ec:	2100      	movs	r1, #0
 80014ee:	a801      	add	r0, sp, #4
 80014f0:	f003 fbf7 	bl	8004ce2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f001 f9ed 	bl	80028d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 21;
 8001500:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001502:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 21;
 8001506:	2215      	movs	r2, #21
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 21;
 800150a:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800150e:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001512:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001516:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800151c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800151e:	f001 fa3b 	bl	8002998 <HAL_RCC_OscConfig>
 8001522:	b108      	cbz	r0, 8001528 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001526:	e7fe      	b.n	8001526 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001528:	2303      	movs	r3, #3
 800152a:	220f      	movs	r2, #15
 800152c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001530:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001534:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001538:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800153a:	4621      	mov	r1, r4
 800153c:	a801      	add	r0, sp, #4
 800153e:	f001 fc71 	bl	8002e24 <HAL_RCC_ClockConfig>
 8001542:	b108      	cbz	r0, 8001548 <SystemClock_Config+0x6c>
 8001544:	b672      	cpsid	i
  while (1)
 8001546:	e7fe      	b.n	8001546 <SystemClock_Config+0x6a>
}
 8001548:	b014      	add	sp, #80	; 0x50
 800154a:	bd10      	pop	{r4, pc}

0800154c <main>:
{
 800154c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 800154e:	f000 fadd 	bl	8001b0c <HAL_Init>
  SystemClock_Config();
 8001552:	f7ff ffc3 	bl	80014dc <SystemClock_Config>
  MX_GPIO_Init();
 8001556:	f7ff fd9b 	bl	8001090 <MX_GPIO_Init>
  MX_DMA_Init();
 800155a:	f7ff fd77 	bl	800104c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800155e:	f000 fa13 	bl	8001988 <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8001562:	f000 f9c1 	bl	80018e8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001566:	f000 f92b 	bl	80017c0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800156a:	f000 f8f3 	bl	8001754 <MX_TIM2_Init>
  MX_ADC1_Init();
 800156e:	f7ff fcc1 	bl	8000ef4 <MX_ADC1_Init>
  HD44780_Init();
 8001572:	f7ff ff1b 	bl	80013ac <HD44780_Init>
  HAL_TIM_Base_Start(&htim2);
 8001576:	4824      	ldr	r0, [pc, #144]	; (8001608 <main+0xbc>)
		  voltage[0] = (3.3f * adc_values[0]) / 4096.0;
 8001578:	4f24      	ldr	r7, [pc, #144]	; (800160c <main+0xc0>)
		  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_SET);
 800157a:	4e25      	ldr	r6, [pc, #148]	; (8001610 <main+0xc4>)
  HAL_TIM_Base_Start(&htim2);
 800157c:	f001 ffe6 	bl	800354c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_values, 2);
 8001580:	4922      	ldr	r1, [pc, #136]	; (800160c <main+0xc0>)
 8001582:	4824      	ldr	r0, [pc, #144]	; (8001614 <main+0xc8>)
 8001584:	2202      	movs	r2, #2
 8001586:	f000 fe4f 	bl	8002228 <HAL_ADC_Start_DMA>
	  if (adc_callback == CONVERSION_HALF) {
 800158a:	4d23      	ldr	r5, [pc, #140]	; (8001618 <main+0xcc>)
 800158c:	782b      	ldrb	r3, [r5, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	d124      	bne.n	80015de <main+0x92>
		  voltage[0] = (3.3f * adc_values[0]) / 4096.0;
 8001594:	883b      	ldrh	r3, [r7, #0]
		  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_SET);
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4630      	mov	r0, r6
		  voltage[0] = (3.3f * adc_values[0]) / 4096.0;
 800159a:	b29c      	uxth	r4, r3
		  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_SET);
 800159c:	f001 f994 	bl	80028c8 <HAL_GPIO_WritePin>
	  HD44780_SetCursor(0, 0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	4608      	mov	r0, r1
 80015a4:	f7ff fe82 	bl	80012ac <HD44780_SetCursor>
		  voltage[0] = (3.3f * adc_values[0]) / 4096.0;
 80015a8:	ee07 4a90 	vmov	s15, r4
 80015ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800161c <main+0xd0>
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ee67 7a87 	vmul.f32	s15, s15, s14
	  sprintf(tekst, "%.f V", voltage[0]);
 80015b8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001620 <main+0xd4>
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c0:	ee17 0a90 	vmov	r0, s15
 80015c4:	f7fe ffe8 	bl	8000598 <__aeabi_f2d>
 80015c8:	460b      	mov	r3, r1
 80015ca:	4602      	mov	r2, r0
 80015cc:	4915      	ldr	r1, [pc, #84]	; (8001624 <main+0xd8>)
 80015ce:	a801      	add	r0, sp, #4
 80015d0:	f003 fb24 	bl	8004c1c <siprintf>
	  HD44780_WriteString("ABNCD");
 80015d4:	4814      	ldr	r0, [pc, #80]	; (8001628 <main+0xdc>)
 80015d6:	f7ff fe83 	bl	80012e0 <HD44780_WriteString>
		  adc_callback = CONVERSION_OFF;
 80015da:	2300      	movs	r3, #0
 80015dc:	702b      	strb	r3, [r5, #0]
	  if (adc_callback == CONVERSION_FINISHED) {
 80015de:	782b      	ldrb	r3, [r5, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d1d3      	bne.n	800158c <main+0x40>
		  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	4630      	mov	r0, r6
		  voltage[1] = (3.3f * adc_values[1]) / 4096.0;
 80015ea:	887b      	ldrh	r3, [r7, #2]
		  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 80015ec:	f001 f96c 	bl	80028c8 <HAL_GPIO_WritePin>
	  HD44780_SetCursor(0, 1);
 80015f0:	2101      	movs	r1, #1
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fe5a 	bl	80012ac <HD44780_SetCursor>
	  HD44780_WriteString("DELF");
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <main+0xe0>)
 80015fa:	f7ff fe71 	bl	80012e0 <HD44780_WriteString>
	  HD44780_Update();
 80015fe:	f7ff fe79 	bl	80012f4 <HD44780_Update>
		  adc_callback = CONVERSION_OFF;
 8001602:	2300      	movs	r3, #0
 8001604:	702b      	strb	r3, [r5, #0]
 8001606:	e7c0      	b.n	800158a <main+0x3e>
 8001608:	20000310 	.word	0x20000310
 800160c:	20000306 	.word	0x20000306
 8001610:	48000800 	.word	0x48000800
 8001614:	20000218 	.word	0x20000218
 8001618:	20000304 	.word	0x20000304
 800161c:	40533333 	.word	0x40533333
 8001620:	39800000 	.word	0x39800000
 8001624:	08006ef0 	.word	0x08006ef0
 8001628:	08006ef6 	.word	0x08006ef6
 800162c:	08006efc 	.word	0x08006efc

08001630 <Error_Handler>:
 8001630:	b672      	cpsid	i
  while (1)
 8001632:	e7fe      	b.n	8001632 <Error_Handler+0x2>

08001634 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_MspInit+0x38>)
{
 8001636:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001638:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	661a      	str	r2, [r3, #96]	; 0x60
 8001640:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001642:	f002 0201 	and.w	r2, r2, #1
 8001646:	9200      	str	r2, [sp, #0]
 8001648:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800164c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001650:	659a      	str	r2, [r3, #88]	; 0x58
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001658:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800165a:	2006      	movs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800165e:	f000 fec5 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	b003      	add	sp, #12
 8001664:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8001668:	f001 b98e 	b.w	8002988 <HAL_PWREx_DisableUCPDDeadBattery>
 800166c:	40021000 	.word	0x40021000

08001670 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler>

08001672 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler>

08001674 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler>

08001676 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler>

08001678 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler>

0800167a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:
 800167e:	4770      	bx	lr

08001680 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 ba54 	b.w	8001b2c <HAL_IncTick>

08001684 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001684:	4801      	ldr	r0, [pc, #4]	; (800168c <DMA1_Channel1_IRQHandler+0x8>)
 8001686:	f001 b808 	b.w	800269a <HAL_DMA_IRQHandler>
 800168a:	bf00      	nop
 800168c:	20000284 	.word	0x20000284

08001690 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001690:	2001      	movs	r0, #1
 8001692:	4770      	bx	lr

08001694 <_kill>:

int _kill(int pid, int sig)
{
 8001694:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001696:	f003 fb77 	bl	8004d88 <__errno>
 800169a:	2316      	movs	r3, #22
 800169c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800169e:	f04f 30ff 	mov.w	r0, #4294967295
 80016a2:	bd08      	pop	{r3, pc}

080016a4 <_exit>:

void _exit (int status)
{
 80016a4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80016a6:	f003 fb6f 	bl	8004d88 <__errno>
 80016aa:	2316      	movs	r3, #22
 80016ac:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80016ae:	e7fe      	b.n	80016ae <_exit+0xa>

080016b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	460d      	mov	r5, r1
 80016b4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	460e      	mov	r6, r1
 80016b8:	1b73      	subs	r3, r6, r5
 80016ba:	429c      	cmp	r4, r3
 80016bc:	dc01      	bgt.n	80016c2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80016be:	4620      	mov	r0, r4
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80016c2:	f3af 8000 	nop.w
 80016c6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	e7f5      	b.n	80016b8 <_read+0x8>

080016cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016cc:	b570      	push	{r4, r5, r6, lr}
 80016ce:	460d      	mov	r5, r1
 80016d0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	460e      	mov	r6, r1
 80016d4:	1b73      	subs	r3, r6, r5
 80016d6:	429c      	cmp	r4, r3
 80016d8:	dc01      	bgt.n	80016de <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80016da:	4620      	mov	r0, r4
 80016dc:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80016de:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	e7f5      	b.n	80016d4 <_write+0x8>

080016e8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	4770      	bx	lr

080016ee <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80016f4:	2000      	movs	r0, #0
 80016f6:	4770      	bx	lr

080016f8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80016f8:	2001      	movs	r0, #1
 80016fa:	4770      	bx	lr

080016fc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80016fc:	2000      	movs	r0, #0
 80016fe:	4770      	bx	lr

08001700 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <_sbrk+0x30>)
 8001702:	6811      	ldr	r1, [r2, #0]
{
 8001704:	b510      	push	{r4, lr}
 8001706:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001708:	b909      	cbnz	r1, 800170e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800170a:	490a      	ldr	r1, [pc, #40]	; (8001734 <_sbrk+0x34>)
 800170c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	6810      	ldr	r0, [r2, #0]
 8001710:	4909      	ldr	r1, [pc, #36]	; (8001738 <_sbrk+0x38>)
 8001712:	4c0a      	ldr	r4, [pc, #40]	; (800173c <_sbrk+0x3c>)
 8001714:	4403      	add	r3, r0
 8001716:	1b09      	subs	r1, r1, r4
 8001718:	428b      	cmp	r3, r1
 800171a:	d906      	bls.n	800172a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800171c:	f003 fb34 	bl	8004d88 <__errno>
 8001720:	230c      	movs	r3, #12
 8001722:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001724:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001728:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800172a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800172c:	e7fc      	b.n	8001728 <_sbrk+0x28>
 800172e:	bf00      	nop
 8001730:	2000030c 	.word	0x2000030c
 8001734:	200005d8 	.word	0x200005d8
 8001738:	20008000 	.word	0x20008000
 800173c:	00000400 	.word	0x00000400

08001740 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001740:	4a03      	ldr	r2, [pc, #12]	; (8001750 <SystemInit+0x10>)
 8001742:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001754:	b500      	push	{lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	2210      	movs	r2, #16
{
 8001758:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	2100      	movs	r1, #0
 800175c:	eb0d 0002 	add.w	r0, sp, r2
 8001760:	f003 fabf 	bl	8004ce2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001764:	4815      	ldr	r0, [pc, #84]	; (80017bc <MX_TIM2_Init+0x68>)
  htim2.Init.Prescaler = 84-1;
 8001766:	2253      	movs	r2, #83	; 0x53
 8001768:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 84-1;
 800176e:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4;
 8001772:	2204      	movs	r2, #4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	9303      	str	r3, [sp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	6083      	str	r3, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001782:	f001 ff75 	bl	8003670 <HAL_TIM_Base_Init>
 8001786:	b108      	cbz	r0, 800178c <MX_TIM2_Init+0x38>
  {
    Error_Handler();
 8001788:	f7ff ff52 	bl	8001630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <MX_TIM2_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001792:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001794:	a904      	add	r1, sp, #16
 8001796:	f002 f899 	bl	80038cc <HAL_TIM_ConfigClockSource>
 800179a:	b108      	cbz	r0, 80017a0 <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 800179c:	f7ff ff48 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017a0:	2320      	movs	r3, #32
 80017a2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_TIM2_Init+0x68>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a8:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017aa:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ac:	f002 f9e6 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 80017b0:	b108      	cbz	r0, 80017b6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80017b2:	f7ff ff3d 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017b6:	b009      	add	sp, #36	; 0x24
 80017b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80017bc:	20000310 	.word	0x20000310

080017c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017c0:	b500      	push	{lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	2210      	movs	r2, #16
{
 80017c4:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	2100      	movs	r1, #0
 80017c8:	eb0d 0002 	add.w	r0, sp, r2
 80017cc:	f003 fa89 	bl	8004ce2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d0:	4815      	ldr	r0, [pc, #84]	; (8001828 <MX_TIM3_Init+0x68>)
  htim3.Init.Prescaler = 84-1;
 80017d2:	4916      	ldr	r1, [pc, #88]	; (800182c <MX_TIM3_Init+0x6c>)
 80017d4:	2253      	movs	r2, #83	; 0x53
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d6:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 84-1;
 80017d8:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 80017dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e8:	9303      	str	r3, [sp, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ee:	f001 ff3f 	bl	8003670 <HAL_TIM_Base_Init>
 80017f2:	b108      	cbz	r0, 80017f8 <MX_TIM3_Init+0x38>
  {
    Error_Handler();
 80017f4:	f7ff ff1c 	bl	8001630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017fc:	480a      	ldr	r0, [pc, #40]	; (8001828 <MX_TIM3_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fe:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001800:	a904      	add	r1, sp, #16
 8001802:	f002 f863 	bl	80038cc <HAL_TIM_ConfigClockSource>
 8001806:	b108      	cbz	r0, 800180c <MX_TIM3_Init+0x4c>
  {
    Error_Handler();
 8001808:	f7ff ff12 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_TIM3_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001812:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001816:	f002 f9b1 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 800181a:	b108      	cbz	r0, 8001820 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800181c:	f7ff ff08 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001820:	b009      	add	sp, #36	; 0x24
 8001822:	f85d fb04 	ldr.w	pc, [sp], #4
 8001826:	bf00      	nop
 8001828:	2000035c 	.word	0x2000035c
 800182c:	40000400 	.word	0x40000400

08001830 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001830:	6803      	ldr	r3, [r0, #0]
 8001832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001836:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM2)
 8001838:	d10c      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800183e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	659a      	str	r2, [r3, #88]	; 0x58
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001850:	b004      	add	sp, #16
 8001852:	4770      	bx	lr
  else if(tim_baseHandle->Instance==TIM3)
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_TIM_Base_MspInit+0x5c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10a      	bne.n	8001870 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_TIM_Base_MspInit+0x60>)
 800185c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800185e:	f042 0202 	orr.w	r2, r2, #2
 8001862:	659a      	str	r2, [r3, #88]	; 0x58
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	9b02      	ldr	r3, [sp, #8]
 800186e:	e7ef      	b.n	8001850 <HAL_TIM_Base_MspInit+0x20>
  else if(tim_baseHandle->Instance==TIM4)
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_TIM_Base_MspInit+0x64>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d1ec      	bne.n	8001850 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_TIM_Base_MspInit+0x60>)
 8001878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800187a:	f042 0204 	orr.w	r2, r2, #4
 800187e:	659a      	str	r2, [r3, #88]	; 0x58
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	9303      	str	r3, [sp, #12]
 8001888:	9b03      	ldr	r3, [sp, #12]
}
 800188a:	e7e1      	b.n	8001850 <HAL_TIM_Base_MspInit+0x20>
 800188c:	40000400 	.word	0x40000400
 8001890:	40021000 	.word	0x40021000
 8001894:	40000800 	.word	0x40000800

08001898 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001898:	b510      	push	{r4, lr}
 800189a:	4604      	mov	r4, r0
 800189c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	2214      	movs	r2, #20
 80018a0:	2100      	movs	r1, #0
 80018a2:	a801      	add	r0, sp, #4
 80018a4:	f003 fa1d 	bl	8004ce2 <memset>
  if(timHandle->Instance==TIM4)
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_TIM_MspPostInit+0x4c>)
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d116      	bne.n	80018de <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018cc:	2302      	movs	r3, #2
 80018ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80018d6:	230a      	movs	r3, #10
 80018d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f000 ff29 	bl	8002730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018de:	b006      	add	sp, #24
 80018e0:	bd10      	pop	{r4, pc}
 80018e2:	bf00      	nop
 80018e4:	40000800 	.word	0x40000800

080018e8 <MX_TIM4_Init>:
{
 80018e8:	b510      	push	{r4, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ec:	2210      	movs	r2, #16
 80018ee:	2100      	movs	r1, #0
 80018f0:	a803      	add	r0, sp, #12
 80018f2:	f003 f9f6 	bl	8004ce2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f8:	221c      	movs	r2, #28
 80018fa:	4621      	mov	r1, r4
 80018fc:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	e9cd 4400 	strd	r4, r4, [sp]
 8001904:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001906:	f003 f9ec 	bl	8004ce2 <memset>
  htim4.Instance = TIM4;
 800190a:	481d      	ldr	r0, [pc, #116]	; (8001980 <MX_TIM4_Init+0x98>)
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_TIM4_Init+0x9c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 0;
 8001910:	e9c0 3400 	strd	r3, r4, [r0]
  htim4.Init.Period = 100;
 8001914:	2364      	movs	r3, #100	; 0x64
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800191c:	f001 fea8 	bl	8003670 <HAL_TIM_Base_Init>
 8001920:	b108      	cbz	r0, 8001926 <MX_TIM4_Init+0x3e>
    Error_Handler();
 8001922:	f7ff fe85 	bl	8001630 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800192a:	4815      	ldr	r0, [pc, #84]	; (8001980 <MX_TIM4_Init+0x98>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800192e:	a903      	add	r1, sp, #12
 8001930:	f001 ffcc 	bl	80038cc <HAL_TIM_ConfigClockSource>
 8001934:	b108      	cbz	r0, 800193a <MX_TIM4_Init+0x52>
    Error_Handler();
 8001936:	f7ff fe7b 	bl	8001630 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800193a:	4811      	ldr	r0, [pc, #68]	; (8001980 <MX_TIM4_Init+0x98>)
 800193c:	f001 fec8 	bl	80036d0 <HAL_TIM_PWM_Init>
 8001940:	b108      	cbz	r0, 8001946 <MX_TIM4_Init+0x5e>
    Error_Handler();
 8001942:	f7ff fe75 	bl	8001630 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001946:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_TIM4_Init+0x98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194a:	9300      	str	r3, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800194c:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001950:	f002 f914 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	b108      	cbz	r0, 800195a <MX_TIM4_Init+0x72>
    Error_Handler();
 8001956:	f7ff fe6b 	bl	8001630 <Error_Handler>
  sConfigOC.Pulse = 1;
 800195a:	2260      	movs	r2, #96	; 0x60
 800195c:	2301      	movs	r3, #1
 800195e:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <MX_TIM4_Init+0x98>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001964:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	a907      	add	r1, sp, #28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001968:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	f001 ff26 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 8001970:	b108      	cbz	r0, 8001976 <MX_TIM4_Init+0x8e>
    Error_Handler();
 8001972:	f7ff fe5d 	bl	8001630 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8001976:	4802      	ldr	r0, [pc, #8]	; (8001980 <MX_TIM4_Init+0x98>)
 8001978:	f7ff ff8e 	bl	8001898 <HAL_TIM_MspPostInit>
}
 800197c:	b00e      	add	sp, #56	; 0x38
 800197e:	bd10      	pop	{r4, pc}
 8001980:	200003a8 	.word	0x200003a8
 8001984:	40000800 	.word	0x40000800

08001988 <MX_LPUART1_UART_Init>:
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001988:	4816      	ldr	r0, [pc, #88]	; (80019e4 <MX_LPUART1_UART_Init+0x5c>)
  hlpuart1.Init.BaudRate = 115200;
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <MX_LPUART1_UART_Init+0x60>)
{
 800198c:	b508      	push	{r3, lr}
  hlpuart1.Init.BaudRate = 115200;
 800198e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001992:	e9c0 2300 	strd	r2, r3, [r0]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001998:	220c      	movs	r2, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800199a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80019a6:	6103      	str	r3, [r0, #16]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019aa:	f002 fb60 	bl	800406e <HAL_UART_Init>
 80019ae:	b108      	cbz	r0, 80019b4 <MX_LPUART1_UART_Init+0x2c>
  {
    Error_Handler();
 80019b0:	f7ff fe3e 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <MX_LPUART1_UART_Init+0x5c>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	f002 fbc7 	bl	800414a <HAL_UARTEx_SetTxFifoThreshold>
 80019bc:	b108      	cbz	r0, 80019c2 <MX_LPUART1_UART_Init+0x3a>
  {
    Error_Handler();
 80019be:	f7ff fe37 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c2:	4808      	ldr	r0, [pc, #32]	; (80019e4 <MX_LPUART1_UART_Init+0x5c>)
 80019c4:	2100      	movs	r1, #0
 80019c6:	f002 fbe0 	bl	800418a <HAL_UARTEx_SetRxFifoThreshold>
 80019ca:	b108      	cbz	r0, 80019d0 <MX_LPUART1_UART_Init+0x48>
  {
    Error_Handler();
 80019cc:	f7ff fe30 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_LPUART1_UART_Init+0x5c>)
 80019d2:	f002 fb9f 	bl	8004114 <HAL_UARTEx_DisableFifoMode>
 80019d6:	b118      	cbz	r0, 80019e0 <MX_LPUART1_UART_Init+0x58>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80019dc:	f7ff be28 	b.w	8001630 <Error_Handler>
}
 80019e0:	bd08      	pop	{r3, pc}
 80019e2:	bf00      	nop
 80019e4:	200003f4 	.word	0x200003f4
 80019e8:	40008000 	.word	0x40008000

080019ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ec:	b510      	push	{r4, lr}
 80019ee:	b098      	sub	sp, #96	; 0x60
 80019f0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	2214      	movs	r2, #20
 80019f4:	2100      	movs	r1, #0
 80019f6:	a802      	add	r0, sp, #8
 80019f8:	f003 f973 	bl	8004ce2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019fc:	2244      	movs	r2, #68	; 0x44
 80019fe:	2100      	movs	r1, #0
 8001a00:	a807      	add	r0, sp, #28
 8001a02:	f003 f96e 	bl	8004ce2 <memset>
  if(uartHandle->Instance==LPUART1)
 8001a06:	6822      	ldr	r2, [r4, #0]
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <HAL_UART_MspInit+0x78>)
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d127      	bne.n	8001a5e <HAL_UART_MspInit+0x72>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a0e:	2320      	movs	r3, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a10:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a12:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f001 fb1e 	bl	8003054 <HAL_RCCEx_PeriphCLKConfig>
 8001a18:	b108      	cbz	r0, 8001a1e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001a1a:	f7ff fe09 	bl	8001630 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_UART_MspInit+0x7c>)
 8001a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a2a:	f002 0201 	and.w	r2, r2, #1
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	9301      	str	r3, [sp, #4]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	230c      	movs	r3, #12
 8001a48:	e9cd 3202 	strd	r3, r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	e9cd 2204 	strd	r2, r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a58:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f000 fe69 	bl	8002730 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001a5e:	b018      	add	sp, #96	; 0x60
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	bf00      	nop
 8001a64:	40008000 	.word	0x40008000
 8001a68:	40021000 	.word	0x40021000

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a72:	490e      	ldr	r1, [pc, #56]	; (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a88:	4c0b      	ldr	r4, [pc, #44]	; (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a96:	f7ff fe53 	bl	8001740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f003 f97b 	bl	8004d94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff fd55 	bl	800154c <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   r0, =_estack
 8001aa4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001ab0:	080072d4 	.word	0x080072d4
  ldr r2, =_sbss
 8001ab4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001ab8:	200005d4 	.word	0x200005d4

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_InitTick+0x40>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
{
 8001ac6:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8001ac8:	b90a      	cbnz	r2, 8001ace <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001acc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <HAL_InitTick+0x44>)
 8001ad8:	6810      	ldr	r0, [r2, #0]
 8001ada:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ade:	f000 fcd7 	bl	8002490 <HAL_SYSTICK_Config>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae8:	2d0f      	cmp	r5, #15
 8001aea:	d8ee      	bhi.n	8001aca <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	4602      	mov	r2, r0
 8001aee:	4629      	mov	r1, r5
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f000 fc8c 	bl	8002410 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_InitTick+0x48>)
 8001afa:	4620      	mov	r0, r4
 8001afc:	601d      	str	r5, [r3, #0]
  return status;
 8001afe:	e7e5      	b.n	8001acc <HAL_InitTick+0xc>
 8001b00:	2000002c 	.word	0x2000002c
 8001b04:	20000028 	.word	0x20000028
 8001b08:	20000030 	.word	0x20000030

08001b0c <HAL_Init>:
{
 8001b0c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0e:	2003      	movs	r0, #3
 8001b10:	f000 fc6c 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff ffd3 	bl	8001ac0 <HAL_InitTick>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	b918      	cbnz	r0, 8001b26 <HAL_Init+0x1a>
    HAL_MspInit();
 8001b1e:	f7ff fd89 	bl	8001634 <HAL_MspInit>
}
 8001b22:	4620      	mov	r0, r4
 8001b24:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001b26:	2401      	movs	r4, #1
 8001b28:	e7fb      	b.n	8001b22 <HAL_Init+0x16>
	...

08001b2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b2c:	4a03      	ldr	r2, [pc, #12]	; (8001b3c <HAL_IncTick+0x10>)
 8001b2e:	4904      	ldr	r1, [pc, #16]	; (8001b40 <HAL_IncTick+0x14>)
 8001b30:	6813      	ldr	r3, [r2, #0]
 8001b32:	6809      	ldr	r1, [r1, #0]
 8001b34:	440b      	add	r3, r1
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000484 	.word	0x20000484
 8001b40:	2000002c 	.word	0x2000002c

08001b44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b44:	4b01      	ldr	r3, [pc, #4]	; (8001b4c <HAL_GetTick+0x8>)
 8001b46:	6818      	ldr	r0, [r3, #0]
}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000484 	.word	0x20000484

08001b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b54:	f7ff fff6 	bl	8001b44 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b58:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	bf1c      	itt	ne
 8001b5c:	4b05      	ldrne	r3, [pc, #20]	; (8001b74 <HAL_Delay+0x24>)
 8001b5e:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001b62:	bf18      	it	ne
 8001b64:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b66:	f7ff ffed 	bl	8001b44 <HAL_GetTick>
 8001b6a:	1b43      	subs	r3, r0, r5
 8001b6c:	42a3      	cmp	r3, r4
 8001b6e:	d3fa      	bcc.n	8001b66 <HAL_Delay+0x16>
  {
  }
}
 8001b70:	bd38      	pop	{r3, r4, r5, pc}
 8001b72:	bf00      	nop
 8001b74:	2000002c 	.word	0x2000002c

08001b78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b78:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b7a:	0dcc      	lsrs	r4, r1, #23
 8001b7c:	f004 0404 	and.w	r4, r4, #4
 8001b80:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8001b82:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001b86:	5903      	ldr	r3, [r0, r4]
 8001b88:	2507      	movs	r5, #7
 8001b8a:	408d      	lsls	r5, r1
 8001b8c:	ea23 0305 	bic.w	r3, r3, r5
 8001b90:	408a      	lsls	r2, r1
 8001b92:	4313      	orrs	r3, r2
 8001b94:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b96:	bd30      	pop	{r4, r5, pc}

08001b98 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b98:	6880      	ldr	r0, [r0, #8]
}
 8001b9a:	f000 0001 	and.w	r0, r0, #1
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ba0:	6880      	ldr	r0, [r0, #8]
}
 8001ba2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bae:	4604      	mov	r4, r0
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	f000 80e2 	beq.w	8001d7a <HAL_ADC_Init+0x1d2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001bb8:	b925      	cbnz	r5, 8001bc4 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bba:	f7ff f9e9 	bl	8000f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbe:	6625      	str	r5, [r4, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bc0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bc4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bca:	bf41      	itttt	mi
 8001bcc:	689a      	ldrmi	r2, [r3, #8]
 8001bce:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8001bd2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8001bd6:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	00d1      	lsls	r1, r2, #3
 8001bdc:	f140 80a5 	bpl.w	8001d2a <HAL_ADC_Init+0x182>
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	00d2      	lsls	r2, r2, #3
 8001be4:	f100 80b8 	bmi.w	8001d58 <HAL_ADC_Init+0x1b0>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bea:	f042 0210 	orr.w	r2, r2, #16
 8001bee:	65e2      	str	r2, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	6622      	str	r2, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001bf8:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ffd0 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c00:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c02:	f002 0210 	and.w	r2, r2, #16
 8001c06:	4310      	orrs	r0, r2
 8001c08:	f040 80b3 	bne.w	8001d72 <HAL_ADC_Init+0x1ca>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c0e:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8001c12:	f042 0202 	orr.w	r2, r2, #2
 8001c16:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ffbd 	bl	8001b98 <LL_ADC_IsEnabled>
 8001c1e:	b980      	cbnz	r0, 8001c42 <HAL_ADC_Init+0x9a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c24:	f7ff ffb8 	bl	8001b98 <LL_ADC_IsEnabled>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4855      	ldr	r0, [pc, #340]	; (8001d80 <HAL_ADC_Init+0x1d8>)
 8001c2c:	f7ff ffb4 	bl	8001b98 <LL_ADC_IsEnabled>
 8001c30:	4310      	orrs	r0, r2
 8001c32:	d106      	bne.n	8001c42 <HAL_ADC_Init+0x9a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c34:	4853      	ldr	r0, [pc, #332]	; (8001d84 <HAL_ADC_Init+0x1dc>)
 8001c36:	6865      	ldr	r5, [r4, #4]
 8001c38:	6882      	ldr	r2, [r0, #8]
 8001c3a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001c3e:	432a      	orrs	r2, r5
 8001c40:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001c42:	68e5      	ldr	r5, [r4, #12]
 8001c44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c46:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8001c4a:	432a      	orrs	r2, r5
 8001c4c:	68a5      	ldr	r5, [r4, #8]
 8001c4e:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c50:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c52:	2801      	cmp	r0, #1
                hadc->Init.DataAlign                                                   |
 8001c54:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c58:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c5c:	bf02      	ittt	eq
 8001c5e:	6aa0      	ldreq	r0, [r4, #40]	; 0x28
 8001c60:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8001c64:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c6a:	b120      	cbz	r0, 8001c76 <HAL_ADC_Init+0xce>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001c6c:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6e:	f400 7078 	and.w	r0, r0, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c72:	4328      	orrs	r0, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c74:	4302      	orrs	r2, r0
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c76:	68dd      	ldr	r5, [r3, #12]
 8001c78:	4843      	ldr	r0, [pc, #268]	; (8001d88 <HAL_ADC_Init+0x1e0>)
 8001c7a:	4028      	ands	r0, r5
 8001c7c:	4310      	orrs	r0, r2
 8001c7e:	60d8      	str	r0, [r3, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c84:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001c88:	4302      	orrs	r2, r0
 8001c8a:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff87 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	f002 0208 	and.w	r2, r2, #8
 8001c98:	4310      	orrs	r0, r2
 8001c9a:	d12e      	bne.n	8001cfa <HAL_ADC_Init+0x152>
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c9c:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c9e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ca2:	7f25      	ldrb	r5, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ca4:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ca6:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001caa:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cae:	f020 0002 	bic.w	r0, r0, #2
 8001cb2:	4302      	orrs	r2, r0

      if (hadc->Init.GainCompensation != 0UL)
 8001cb4:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cb6:	60da      	str	r2, [r3, #12]
      if (hadc->Init.GainCompensation != 0UL)
 8001cb8:	4834      	ldr	r0, [pc, #208]	; (8001d8c <HAL_ADC_Init+0x1e4>)
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cba:	691a      	ldr	r2, [r3, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8001cbc:	2d00      	cmp	r5, #0
 8001cbe:	d04d      	beq.n	8001d5c <HAL_ADC_Init+0x1b4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cc4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001cc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cca:	4002      	ands	r2, r0
 8001ccc:	432a      	orrs	r2, r5
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001cce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8001cd6:	2a01      	cmp	r2, #1
 8001cd8:	d147      	bne.n	8001d6a <HAL_ADC_Init+0x1c2>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cda:	e9d4 2511 	ldrd	r2, r5, [r4, #68]	; 0x44
 8001cde:	6918      	ldr	r0, [r3, #16]
 8001ce0:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001ce4:	f020 0004 	bic.w	r0, r0, #4
 8001ce8:	432a      	orrs	r2, r5
 8001cea:	4302      	orrs	r2, r0
 8001cec:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001cee:	4302      	orrs	r2, r0
 8001cf0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001cf2:	4302      	orrs	r2, r0
 8001cf4:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cfa:	6962      	ldr	r2, [r4, #20]
 8001cfc:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cfe:	bf05      	ittet	eq
 8001d00:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8001d02:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d04:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d06:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001d0a:	bf06      	itte	eq
 8001d0c:	f020 000f 	biceq.w	r0, r0, #15
 8001d10:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d12:	f022 020f 	bicne.w	r2, r2, #15
 8001d16:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d18:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001d24:	4608      	mov	r0, r1
 8001d26:	b003      	add	sp, #12
 8001d28:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001d2a:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d2c:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_ADC_Init+0x1e8>)
 8001d2e:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8001d32:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001d36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <HAL_ADC_Init+0x1ec>)
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d44:	3201      	adds	r2, #1
 8001d46:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 8001d48:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 8001d4a:	9a01      	ldr	r2, [sp, #4]
 8001d4c:	2a00      	cmp	r2, #0
 8001d4e:	f43f af47 	beq.w	8001be0 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 8001d52:	9a01      	ldr	r2, [sp, #4]
 8001d54:	3a01      	subs	r2, #1
 8001d56:	e7f7      	b.n	8001d48 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d58:	2100      	movs	r1, #0
 8001d5a:	e74e      	b.n	8001bfa <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d60:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d66:	4002      	ands	r2, r0
 8001d68:	e7b1      	b.n	8001cce <HAL_ADC_Init+0x126>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	f022 0201 	bic.w	r2, r2, #1
 8001d70:	e7c2      	b.n	8001cf8 <HAL_ADC_Init+0x150>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	e7d2      	b.n	8001d24 <HAL_ADC_Init+0x17c>
 8001d7e:	bf00      	nop
 8001d80:	50000100 	.word	0x50000100
 8001d84:	50000300 	.word	0x50000300
 8001d88:	fff04007 	.word	0xfff04007
 8001d8c:	ffffc000 	.word	0xffffc000
 8001d90:	00030d40 	.word	0x00030d40
 8001d94:	20000028 	.word	0x20000028

08001d98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d98:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d9a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001d9c:	f7ff fb86 	bl	80014ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da0:	bd08      	pop	{r3, pc}

08001da2 <HAL_ADC_ErrorCallback>:
 8001da2:	4770      	bx	lr

08001da4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001da6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001dac:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001db0:	d121      	bne.n	8001df6 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db6:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	6811      	ldr	r1, [r2, #0]
 8001dbc:	0708      	lsls	r0, r1, #28
 8001dbe:	d516      	bpl.n	8001dee <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dc0:	68d1      	ldr	r1, [r2, #12]
 8001dc2:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8001dc6:	d10e      	bne.n	8001de6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001dce:	d10a      	bne.n	8001de6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dd6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dda:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ddc:	bf5e      	ittt	pl
 8001dde:	6dda      	ldrpl	r2, [r3, #92]	; 0x5c
 8001de0:	f042 0201 	orrpl.w	r2, r2, #1
 8001de4:	65da      	strpl	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fb6c 	bl	80014c4 <HAL_ADC_ConvCpltCallback>
}
 8001dec:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001dee:	68d2      	ldr	r2, [r2, #12]
 8001df0:	f012 0f02 	tst.w	r2, #2
 8001df4:	e7eb      	b.n	8001dce <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001df6:	06d2      	lsls	r2, r2, #27
 8001df8:	d503      	bpl.n	8001e02 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ffd1 	bl	8001da2 <HAL_ADC_ErrorCallback>
 8001e00:	e7f4      	b.n	8001dec <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	4718      	bx	r3

08001e0c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001e0e:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e10:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e16:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e18:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e20:	f7ff ffbf 	bl	8001da2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e24:	bd08      	pop	{r3, pc}
	...

08001e28 <HAL_ADC_ConfigChannel>:
{
 8001e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001e2e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001e32:	2b01      	cmp	r3, #1
{
 8001e34:	4605      	mov	r5, r0
 8001e36:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8001e38:	f000 81a2 	beq.w	8002180 <HAL_ADC_ConfigChannel+0x358>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3c:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff feab 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	f040 8192 	bne.w	8002174 <HAL_ADC_ConfigChannel+0x34c>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e50:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(*preg,
 8001e52:	6833      	ldr	r3, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e54:	0991      	lsrs	r1, r2, #6
 8001e56:	f001 010c 	and.w	r1, r1, #12
 8001e5a:	f104 0730 	add.w	r7, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	5878      	ldr	r0, [r7, r1]
 8001e64:	f04f 0c1f 	mov.w	ip, #31
 8001e68:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	fa0c f202 	lsl.w	r2, ip, r2
 8001e72:	ea20 0202 	bic.w	r2, r0, r2
 8001e76:	4313      	orrs	r3, r2
 8001e78:	507b      	str	r3, [r7, r1]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff fe90 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e80:	68a2      	ldr	r2, [r4, #8]
 8001e82:	f002 0208 	and.w	r2, r2, #8
 8001e86:	4302      	orrs	r2, r0
 8001e88:	d13b      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0xda>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e8a:	68b3      	ldr	r3, [r6, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e8c:	6831      	ldr	r1, [r6, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e92:	d179      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x160>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f7ff fe6f 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e9a:	6963      	ldr	r3, [r4, #20]
 8001e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ea0:	6163      	str	r3, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ea2:	6937      	ldr	r7, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ea4:	6971      	ldr	r1, [r6, #20]
 8001ea6:	68e0      	ldr	r0, [r4, #12]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ea8:	6832      	ldr	r2, [r6, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eaa:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eac:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8001eb0:	d072      	beq.n	8001f98 <HAL_ADC_ConfigChannel+0x170>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001eb2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001eb6:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8001eb8:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
 8001ebc:	4081      	lsls	r1, r0
 8001ebe:	48b1      	ldr	r0, [pc, #708]	; (8002184 <HAL_ADC_ConfigChannel+0x35c>)
 8001ec0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001ec4:	ea0c 0000 	and.w	r0, ip, r0
 8001ec8:	4310      	orrs	r0, r2
 8001eca:	ea41 0200 	orr.w	r2, r1, r0
 8001ece:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ed2:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed6:	6931      	ldr	r1, [r6, #16]
  MODIFY_REG(*preg,
 8001ed8:	69b0      	ldr	r0, [r6, #24]
 8001eda:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001ede:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001ee2:	4302      	orrs	r2, r0
 8001ee4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001ee8:	7f31      	ldrb	r1, [r6, #28]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eea:	6930      	ldr	r0, [r6, #16]
 8001eec:	1e4f      	subs	r7, r1, #1
  MODIFY_REG(*preg,
 8001eee:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8001ef2:	4279      	negs	r1, r7
 8001ef4:	4179      	adcs	r1, r7
 8001ef6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001efa:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001efe:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7ff fe48 	bl	8001b98 <LL_ADC_IsEnabled>
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	f040 80a0 	bne.w	800204e <HAL_ADC_ConfigChannel+0x226>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001f0e:	68f1      	ldr	r1, [r6, #12]
 8001f10:	4a9d      	ldr	r2, [pc, #628]	; (8002188 <HAL_ADC_ConfigChannel+0x360>)
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f12:	6833      	ldr	r3, [r6, #0]
 8001f14:	4291      	cmp	r1, r2
    SET_BIT(ADCx->DIFSEL,
 8001f16:	f3c3 0012 	ubfx	r0, r3, #0, #19
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001f1a:	f040 8092 	bne.w	8002042 <HAL_ADC_ConfigChannel+0x21a>
    SET_BIT(ADCx->DIFSEL,
 8001f1e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8001f22:	4302      	orrs	r2, r0
 8001f24:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	f000 809a 	beq.w	8002062 <HAL_ADC_ConfigChannel+0x23a>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	fa93 f2a3 	rbit	r2, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f32:	b13a      	cbz	r2, 8001f44 <HAL_ADC_ConfigChannel+0x11c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001f34:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f38:	3201      	adds	r2, #1
 8001f3a:	f002 021f 	and.w	r2, r2, #31
 8001f3e:	2a09      	cmp	r2, #9
 8001f40:	f200 80ae 	bhi.w	80020a0 <HAL_ADC_ConfigChannel+0x278>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8001f48:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f4c:	3201      	adds	r2, #1
 8001f4e:	0692      	lsls	r2, r2, #26
 8001f50:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 8001f58:	fab7 f787 	clz	r7, r7
 8001f5c:	3701      	adds	r7, #1
 8001f5e:	f007 071f 	and.w	r7, r7, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	40b9      	lsls	r1, r7
 8001f66:	4311      	orrs	r1, r2
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	f040 8094 	bne.w	8002096 <HAL_ADC_ConfigChannel+0x26e>
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f7a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7c:	68b2      	ldr	r2, [r6, #8]
 8001f7e:	4319      	orrs	r1, r3
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7ff fdf9 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>
 8001f86:	e062      	b.n	800204e <HAL_ADC_ConfigChannel+0x226>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff fdf4 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f90:	6963      	ldr	r3, [r4, #20]
 8001f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f96:	e783      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x78>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f98:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001f9a:	6e21      	ldr	r1, [r4, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f9c:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fa0:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d138      	bne.n	800201a <HAL_ADC_ConfigChannel+0x1f2>
 8001fa8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fac:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001fae:	bf02      	ittt	eq
 8001fb0:	6e22      	ldreq	r2, [r4, #96]	; 0x60
 8001fb2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001fb6:	6622      	streq	r2, [r4, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fb8:	685a      	ldr	r2, [r3, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fba:	6832      	ldr	r2, [r6, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fc2:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fc6:	bb68      	cbnz	r0, 8002024 <HAL_ADC_ConfigChannel+0x1fc>
 8001fc8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fcc:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001fce:	bf02      	ittt	eq
 8001fd0:	685a      	ldreq	r2, [r3, #4]
 8001fd2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001fd6:	605a      	streq	r2, [r3, #4]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fd8:	689a      	ldr	r2, [r3, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fda:	6832      	ldr	r2, [r6, #0]
 8001fdc:	6899      	ldr	r1, [r3, #8]
 8001fde:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fe2:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fe6:	bb10      	cbnz	r0, 800202e <HAL_ADC_ConfigChannel+0x206>
 8001fe8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fec:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 8001fee:	bf02      	ittt	eq
 8001ff0:	689a      	ldreq	r2, [r3, #8]
 8001ff2:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8001ff6:	609a      	streq	r2, [r3, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ff8:	68da      	ldr	r2, [r3, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ffa:	6832      	ldr	r2, [r6, #0]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	f3c2 0012 	ubfx	r0, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002002:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002006:	b9b8      	cbnz	r0, 8002038 <HAL_ADC_ConfigChannel+0x210>
 8002008:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800200c:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800200e:	bf02      	ittt	eq
 8002010:	68da      	ldreq	r2, [r3, #12]
 8002012:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002016:	60da      	streq	r2, [r3, #12]
}
 8002018:	e773      	b.n	8001f02 <HAL_ADC_ConfigChannel+0xda>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800201e:	fab2 f282 	clz	r2, r2
 8002022:	e7c3      	b.n	8001fac <HAL_ADC_ConfigChannel+0x184>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002028:	fab2 f282 	clz	r2, r2
 800202c:	e7ce      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x1a4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	e7d9      	b.n	8001fec <HAL_ADC_ConfigChannel+0x1c4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800203c:	fab2 f282 	clz	r2, r2
 8002040:	e7e4      	b.n	800200c <HAL_ADC_ConfigChannel+0x1e4>
    CLEAR_BIT(ADCx->DIFSEL,
 8002042:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8002046:	ea23 0300 	bic.w	r3, r3, r0
 800204a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800204e:	6833      	ldr	r3, [r6, #0]
 8002050:	4a4e      	ldr	r2, [pc, #312]	; (800218c <HAL_ADC_ConfigChannel+0x364>)
 8002052:	4213      	tst	r3, r2
 8002054:	d143      	bne.n	80020de <HAL_ADC_ConfigChannel+0x2b6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002056:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002058:	2300      	movs	r3, #0
 800205a:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
}
 800205e:	b003      	add	sp, #12
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002062:	0e9a      	lsrs	r2, r3, #26
 8002064:	3201      	adds	r2, #1
 8002066:	f002 071f 	and.w	r7, r2, #31
 800206a:	2101      	movs	r1, #1
 800206c:	0692      	lsls	r2, r2, #26
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206e:	2f09      	cmp	r7, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002070:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002074:	fa01 f107 	lsl.w	r1, r1, r7
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002078:	f67f af75 	bls.w	8001f66 <HAL_ADC_ConfigChannel+0x13e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800207c:	4311      	orrs	r1, r2
 800207e:	bb08      	cbnz	r0, 80020c4 <HAL_ADC_ConfigChannel+0x29c>
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	3301      	adds	r3, #1
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800208c:	3b1e      	subs	r3, #30
 800208e:	051b      	lsls	r3, r3, #20
 8002090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002094:	e772      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x154>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	e767      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x148>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	3201      	adds	r2, #1
 80020aa:	0692      	lsls	r2, r2, #26
 80020ac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	fa93 f7a3 	rbit	r7, r3
  return __builtin_clz(value);
 80020b4:	fab7 f787 	clz	r7, r7
 80020b8:	3701      	adds	r7, #1
 80020ba:	f007 071f 	and.w	r7, r7, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	40b9      	lsls	r1, r7
 80020c2:	e7db      	b.n	800207c <HAL_ADC_ConfigChannel+0x254>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	3201      	adds	r2, #1
 80020ce:	f002 021f 	and.w	r2, r2, #31
 80020d2:	2303      	movs	r3, #3
 80020d4:	f06f 001d 	mvn.w	r0, #29
 80020d8:	fb13 0302 	smlabb	r3, r3, r2, r0
 80020dc:	e7d7      	b.n	800208e <HAL_ADC_ConfigChannel+0x266>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_ADC_ConfigChannel+0x368>)
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80020e0:	492c      	ldr	r1, [pc, #176]	; (8002194 <HAL_ADC_ConfigChannel+0x36c>)
 80020e2:	6890      	ldr	r0, [r2, #8]
 80020e4:	428b      	cmp	r3, r1
 80020e6:	f000 72e0 	and.w	r2, r0, #29360128	; 0x1c00000
 80020ea:	d002      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x2ca>
 80020ec:	492a      	ldr	r1, [pc, #168]	; (8002198 <HAL_ADC_ConfigChannel+0x370>)
 80020ee:	428b      	cmp	r3, r1
 80020f0:	d11b      	bne.n	800212a <HAL_ADC_ConfigChannel+0x302>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020f2:	0201      	lsls	r1, r0, #8
 80020f4:	d419      	bmi.n	800212a <HAL_ADC_ConfigChannel+0x302>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020f6:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80020fa:	d1ac      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x22e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020fc:	4924      	ldr	r1, [pc, #144]	; (8002190 <HAL_ADC_ConfigChannel+0x368>)
 80020fe:	688b      	ldr	r3, [r1, #8]
 8002100:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002104:	4313      	orrs	r3, r2
 8002106:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800210a:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_ADC_ConfigChannel+0x374>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_ADC_ConfigChannel+0x378>)
 8002112:	fbb2 f2f3 	udiv	r2, r2, r3
 8002116:	230c      	movs	r3, #12
 8002118:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 800211c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800211e:	9b01      	ldr	r3, [sp, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d098      	beq.n	8002056 <HAL_ADC_ConfigChannel+0x22e>
            wait_loop_index--;
 8002124:	9b01      	ldr	r3, [sp, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	e7f8      	b.n	800211c <HAL_ADC_ConfigChannel+0x2f4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800212a:	491e      	ldr	r1, [pc, #120]	; (80021a4 <HAL_ADC_ConfigChannel+0x37c>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d10e      	bne.n	800214e <HAL_ADC_ConfigChannel+0x326>
 8002130:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002134:	d18f      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x22e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_ADC_ConfigChannel+0x380>)
 8002138:	429c      	cmp	r4, r3
 800213a:	d08c      	beq.n	8002056 <HAL_ADC_ConfigChannel+0x22e>
 800213c:	4914      	ldr	r1, [pc, #80]	; (8002190 <HAL_ADC_ConfigChannel+0x368>)
 800213e:	688b      	ldr	r3, [r1, #8]
 8002140:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002144:	4313      	orrs	r3, r2
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	608b      	str	r3, [r1, #8]
}
 800214c:	e784      	b.n	8002058 <HAL_ADC_ConfigChannel+0x230>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800214e:	4917      	ldr	r1, [pc, #92]	; (80021ac <HAL_ADC_ConfigChannel+0x384>)
 8002150:	428b      	cmp	r3, r1
 8002152:	d180      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x22e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002154:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8002158:	f47f af7d 	bne.w	8002056 <HAL_ADC_ConfigChannel+0x22e>
        if (ADC_VREFINT_INSTANCE(hadc))
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_ADC_ConfigChannel+0x380>)
 800215e:	429c      	cmp	r4, r3
 8002160:	f43f af79 	beq.w	8002056 <HAL_ADC_ConfigChannel+0x22e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002164:	490a      	ldr	r1, [pc, #40]	; (8002190 <HAL_ADC_ConfigChannel+0x368>)
 8002166:	688b      	ldr	r3, [r1, #8]
 8002168:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800216c:	4313      	orrs	r3, r2
 800216e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002172:	e7ea      	b.n	800214a <HAL_ADC_ConfigChannel+0x322>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002176:	f042 0220 	orr.w	r2, r2, #32
 800217a:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800217c:	4618      	mov	r0, r3
 800217e:	e76b      	b.n	8002058 <HAL_ADC_ConfigChannel+0x230>
  __HAL_LOCK(hadc);
 8002180:	2002      	movs	r0, #2
 8002182:	e76c      	b.n	800205e <HAL_ADC_ConfigChannel+0x236>
 8002184:	03fff000 	.word	0x03fff000
 8002188:	407f0000 	.word	0x407f0000
 800218c:	80080000 	.word	0x80080000
 8002190:	50000300 	.word	0x50000300
 8002194:	c3210000 	.word	0xc3210000
 8002198:	90c00010 	.word	0x90c00010
 800219c:	20000028 	.word	0x20000028
 80021a0:	00030d40 	.word	0x00030d40
 80021a4:	c7520000 	.word	0xc7520000
 80021a8:	50000100 	.word	0x50000100
 80021ac:	cb840000 	.word	0xcb840000

080021b0 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b0:	6802      	ldr	r2, [r0, #0]
{
 80021b2:	b570      	push	{r4, r5, r6, lr}
 80021b4:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b6:	4610      	mov	r0, r2
 80021b8:	f7ff fcee 	bl	8001b98 <LL_ADC_IsEnabled>
 80021bc:	b108      	cbz	r0, 80021c2 <ADC_Enable+0x12>
  return HAL_OK;
 80021be:	2000      	movs	r0, #0
}
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021c2:	6891      	ldr	r1, [r2, #8]
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <ADC_Enable+0x70>)
 80021c6:	4219      	tst	r1, r3
 80021c8:	d009      	beq.n	80021de <ADC_Enable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 80021da:	2001      	movs	r0, #1
 80021dc:	e7f0      	b.n	80021c0 <ADC_Enable+0x10>
  MODIFY_REG(ADCx->CR,
 80021de:	6893      	ldr	r3, [r2, #8]
 80021e0:	4d10      	ldr	r5, [pc, #64]	; (8002224 <ADC_Enable+0x74>)
 80021e2:	402b      	ands	r3, r5
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80021ea:	f7ff fcab 	bl	8001b44 <HAL_GetTick>
 80021ee:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f0:	6822      	ldr	r2, [r4, #0]
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	07db      	lsls	r3, r3, #31
 80021f6:	d4e2      	bmi.n	80021be <ADC_Enable+0xe>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	4610      	mov	r0, r2
 80021fa:	f7ff fccd 	bl	8001b98 <LL_ADC_IsEnabled>
 80021fe:	b920      	cbnz	r0, 800220a <ADC_Enable+0x5a>
 8002200:	6893      	ldr	r3, [r2, #8]
 8002202:	402b      	ands	r3, r5
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800220a:	f7ff fc9b 	bl	8001b44 <HAL_GetTick>
 800220e:	1b80      	subs	r0, r0, r6
 8002210:	2802      	cmp	r0, #2
 8002212:	d9ed      	bls.n	80021f0 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	07da      	lsls	r2, r3, #31
 800221a:	d4e9      	bmi.n	80021f0 <ADC_Enable+0x40>
 800221c:	e7d5      	b.n	80021ca <ADC_Enable+0x1a>
 800221e:	bf00      	nop
 8002220:	8000003f 	.word	0x8000003f
 8002224:	7fffffc0 	.word	0x7fffffc0

08002228 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_ADC_Start_DMA+0xd4>)
{
 800222a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800222e:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002230:	6800      	ldr	r0, [r0, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f7ff fcb4 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
{
 8002238:	460e      	mov	r6, r1
 800223a:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223c:	4605      	mov	r5, r0
 800223e:	2800      	cmp	r0, #0
 8002240:	d155      	bne.n	80022ee <HAL_ADC_Start_DMA+0xc6>
    __HAL_LOCK(hadc);
 8002242:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8002246:	2a01      	cmp	r2, #1
 8002248:	d051      	beq.n	80022ee <HAL_ADC_Start_DMA+0xc6>
 800224a:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800224e:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 8002252:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002254:	fa23 f308 	lsr.w	r3, r3, r8
 8002258:	4003      	ands	r3, r0
    __HAL_LOCK(hadc);
 800225a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800225e:	d043      	beq.n	80022e8 <HAL_ADC_Start_DMA+0xc0>
      tmp_hal_status = ADC_Enable(hadc);
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff ffa5 	bl	80021b0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002266:	2800      	cmp	r0, #0
 8002268:	d13b      	bne.n	80022e2 <HAL_ADC_Start_DMA+0xba>
        ADC_STATE_CLR_SET(hadc->State,
 800226a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800226c:	6821      	ldr	r1, [r4, #0]
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_ADC_Start_DMA+0xd8>)
        ADC_STATE_CLR_SET(hadc->State,
 8002270:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8002274:	f020 0001 	bic.w	r0, r0, #1
 8002278:	f440 7080 	orr.w	r0, r0, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800227c:	4299      	cmp	r1, r3
        ADC_STATE_CLR_SET(hadc->State,
 800227e:	65e0      	str	r0, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002280:	d037      	beq.n	80022f2 <HAL_ADC_Start_DMA+0xca>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002282:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002284:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002288:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800228a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800228c:	6d60      	ldr	r0, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800228e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002292:	bf1c      	itt	ne
 8002294:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8002296:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800229a:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_ADC_Start_DMA+0xdc>)
 800229e:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_ADC_Start_DMA+0xe0>)
 80022a2:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_ADC_Start_DMA+0xe4>)
 80022a6:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022a8:	231c      	movs	r3, #28
 80022aa:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 80022ac:	2300      	movs	r3, #0
 80022ae:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022b2:	684b      	ldr	r3, [r1, #4]
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022ba:	68cb      	ldr	r3, [r1, #12]
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022c2:	4632      	mov	r2, r6
 80022c4:	463b      	mov	r3, r7
 80022c6:	3140      	adds	r1, #64	; 0x40
 80022c8:	f000 f9a6 	bl	8002618 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022cc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80022ce:	6893      	ldr	r3, [r2, #8]
 80022d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6093      	str	r3, [r2, #8]
}
 80022de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80022e2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80022e6:	e7fa      	b.n	80022de <HAL_ADC_Start_DMA+0xb6>
      __HAL_UNLOCK(hadc);
 80022e8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80022ec:	e7f7      	b.n	80022de <HAL_ADC_Start_DMA+0xb6>
    tmp_hal_status = HAL_BUSY;
 80022ee:	2002      	movs	r0, #2
 80022f0:	e7f5      	b.n	80022de <HAL_ADC_Start_DMA+0xb6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f2:	f1b8 0f00 	cmp.w	r8, #0
 80022f6:	d0c4      	beq.n	8002282 <HAL_ADC_Start_DMA+0x5a>
 80022f8:	e7c7      	b.n	800228a <HAL_ADC_Start_DMA+0x62>
 80022fa:	bf00      	nop
 80022fc:	50000300 	.word	0x50000300
 8002300:	50000100 	.word	0x50000100
 8002304:	08001da5 	.word	0x08001da5
 8002308:	08001d99 	.word	0x08001d99
 800230c:	08001e0d 	.word	0x08001e0d

08002310 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002310:	6880      	ldr	r0, [r0, #8]
}
 8002312:	f000 0001 	and.w	r0, r0, #1
 8002316:	4770      	bx	lr

08002318 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002318:	6880      	ldr	r0, [r0, #8]
}
 800231a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800231e:	4770      	bx	lr

08002320 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002320:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002322:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002326:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8002328:	2b01      	cmp	r3, #1
{
 800232a:	b09c      	sub	sp, #112	; 0x70
 800232c:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800232e:	d056      	beq.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8002330:	2301      	movs	r3, #1
 8002332:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002336:	6816      	ldr	r6, [r2, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002338:	2000      	movs	r0, #0
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800233a:	f1b6 4fa0 	cmp.w	r6, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800233e:	9018      	str	r0, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002340:	9019      	str	r0, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002342:	d10d      	bne.n	8002360 <HAL_ADCEx_MultiModeConfigChannel+0x40>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002344:	4827      	ldr	r0, [pc, #156]	; (80023e4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8002346:	f7ff ffe7 	bl	8002318 <LL_ADC_REG_IsConversionOngoing>
 800234a:	4604      	mov	r4, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234c:	4630      	mov	r0, r6
 800234e:	f7ff ffe3 	bl	8002318 <LL_ADC_REG_IsConversionOngoing>
 8002352:	4320      	orrs	r0, r4
 8002354:	d00d      	beq.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x52>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002356:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002358:	f041 0120 	orr.w	r1, r1, #32
 800235c:	65d1      	str	r1, [r2, #92]	; 0x5c
 800235e:	e02b      	b.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8002362:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002366:	f041 0120 	orr.w	r1, r1, #32
 800236a:	65d1      	str	r1, [r2, #92]	; 0x5c
    return HAL_ERROR;
 800236c:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800236e:	b01c      	add	sp, #112	; 0x70
 8002370:	bd70      	pop	{r4, r5, r6, pc}
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002372:	4c1d      	ldr	r4, [pc, #116]	; (80023e8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002374:	68a3      	ldr	r3, [r4, #8]
 8002376:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800237a:	b1fd      	cbz	r5, 80023bc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800237c:	6848      	ldr	r0, [r1, #4]
 800237e:	4303      	orrs	r3, r0
 8002380:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
 8002384:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8002388:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800238a:	4630      	mov	r0, r6
 800238c:	f7ff ffc0 	bl	8002310 <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	4814      	ldr	r0, [pc, #80]	; (80023e4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8002394:	f7ff ffbc 	bl	8002310 <LL_ADC_IsEnabled>
 8002398:	4303      	orrs	r3, r0
 800239a:	d004      	beq.n	80023a6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800239e:	2300      	movs	r3, #0
 80023a0:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
  return tmp_hal_status;
 80023a4:	e7e3      	b.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
        MODIFY_REG(tmpADC_Common->CCR,
 80023a6:	6889      	ldr	r1, [r1, #8]
 80023a8:	68a0      	ldr	r0, [r4, #8]
 80023aa:	430d      	orrs	r5, r1
 80023ac:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80023b0:	f021 010f 	bic.w	r1, r1, #15
 80023b4:	430d      	orrs	r5, r1
 80023b6:	60a5      	str	r5, [r4, #8]
    tmp_hal_status = HAL_ERROR;
 80023b8:	4618      	mov	r0, r3
 80023ba:	e7f0      	b.n	800239e <HAL_ADCEx_MultiModeConfigChannel+0x7e>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023bc:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023be:	4630      	mov	r0, r6
 80023c0:	f7ff ffa6 	bl	8002310 <LL_ADC_IsEnabled>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80023c8:	f7ff ffa2 	bl	8002310 <LL_ADC_IsEnabled>
 80023cc:	4303      	orrs	r3, r0
 80023ce:	d1e5      	bne.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023d0:	68a1      	ldr	r1, [r4, #8]
 80023d2:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80023d6:	f021 010f 	bic.w	r1, r1, #15
 80023da:	60a1      	str	r1, [r4, #8]
 80023dc:	e7ec      	b.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
  __HAL_LOCK(hadc);
 80023de:	2002      	movs	r0, #2
 80023e0:	e7c5      	b.n	800236e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80023e2:	bf00      	nop
 80023e4:	50000100 	.word	0x50000100
 80023e8:	50000300 	.word	0x50000300

080023ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80023ee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002408:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002412:	b530      	push	{r4, r5, lr}
 8002414:	68dc      	ldr	r4, [r3, #12]
 8002416:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	2b04      	cmp	r3, #4
 8002422:	bf28      	it	cs
 8002424:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242c:	bf8c      	ite	hi
 800242e:	3c03      	subhi	r4, #3
 8002430:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002432:	fa05 f303 	lsl.w	r3, r5, r3
 8002436:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243a:	40a5      	lsls	r5, r4
 800243c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002442:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	bfac      	ite	ge
 800244a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	4a08      	ldrlt	r2, [pc, #32]	; (8002470 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	bfb8      	it	lt
 8002456:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	b2db      	uxtb	r3, r3
 800245c:	bfaa      	itet	ge
 800245e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002468:	bd30      	pop	{r4, r5, pc}
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00
 8002470:	e000ed14 	.word	0xe000ed14

08002474 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002474:	2800      	cmp	r0, #0
 8002476:	db07      	blt.n	8002488 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <HAL_NVIC_EnableIRQ+0x18>)
 800247a:	0941      	lsrs	r1, r0, #5
 800247c:	2301      	movs	r3, #1
 800247e:	f000 001f 	and.w	r0, r0, #31
 8002482:	4083      	lsls	r3, r0
 8002484:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100

08002490 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	3801      	subs	r0, #1
 8002492:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002496:	d20b      	bcs.n	80024b0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002498:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249c:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	21f0      	movs	r1, #240	; 0xf0
 80024a2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024aa:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024b0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b570      	push	{r4, r5, r6, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ba:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	; 0x4c
 80024be:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024c0:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80024c2:	b114      	cbz	r4, 80024ca <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024c4:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	; 0x58
 80024c8:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024ca:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
 80024ce:	f004 061f 	and.w	r6, r4, #31
 80024d2:	2401      	movs	r4, #1
 80024d4:	40b4      	lsls	r4, r6
 80024d6:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024d8:	6804      	ldr	r4, [r0, #0]
 80024da:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024dc:	6883      	ldr	r3, [r0, #8]
 80024de:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024e0:	bf0b      	itete	eq
 80024e2:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80024e4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80024e6:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80024e8:	60e2      	strne	r2, [r4, #12]
  }
}
 80024ea:	bd70      	pop	{r4, r5, r6, pc}

080024ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80024ec:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 80024f2:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80024f4:	4c0d      	ldr	r4, [pc, #52]	; (800252c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 80024f6:	42a3      	cmp	r3, r4
 80024f8:	bf88      	it	hi
 80024fa:	460a      	movhi	r2, r1
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024fc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80024fe:	f021 0103 	bic.w	r1, r1, #3
 8002502:	440a      	add	r2, r1
 8002504:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002506:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002508:	4a09      	ldr	r2, [pc, #36]	; (8002530 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 800250a:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800250c:	3b08      	subs	r3, #8
 800250e:	2214      	movs	r2, #20
 8002510:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002514:	2201      	movs	r2, #1
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002520:	bd10      	pop	{r4, pc}
 8002522:	bf00      	nop
 8002524:	40020820 	.word	0x40020820
 8002528:	40020800 	.word	0x40020800
 800252c:	40020407 	.word	0x40020407
 8002530:	40020880 	.word	0x40020880

08002534 <HAL_DMA_Init>:
{
 8002534:	b538      	push	{r3, r4, r5, lr}
  if (hdma == NULL)
 8002536:	2800      	cmp	r0, #0
 8002538:	d05b      	beq.n	80025f2 <HAL_DMA_Init+0xbe>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800253a:	6802      	ldr	r2, [r0, #0]
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_DMA_Init+0xc4>)
 800253e:	429a      	cmp	r2, r3
 8002540:	f04f 0114 	mov.w	r1, #20
 8002544:	d849      	bhi.n	80025da <HAL_DMA_Init+0xa6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_DMA_Init+0xc8>)
 8002548:	4413      	add	r3, r2
 800254a:	fbb3 f3f1 	udiv	r3, r3, r1
 800254e:	492c      	ldr	r1, [pc, #176]	; (8002600 <HAL_DMA_Init+0xcc>)
 8002550:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8002552:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800255c:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8002562:	6811      	ldr	r1, [r2, #0]
  tmp |=  hdma->Init.Direction        |
 8002564:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002566:	432b      	orrs	r3, r5
 8002568:	6945      	ldr	r5, [r0, #20]
 800256a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	6985      	ldr	r5, [r0, #24]
 800256e:	432b      	orrs	r3, r5
 8002570:	69c5      	ldr	r5, [r0, #28]
 8002572:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002574:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002576:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800257a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800257e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8002580:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8002582:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002584:	f7ff ffb2 	bl	80024ec <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002588:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800258c:	bf04      	itt	eq
 800258e:	2300      	moveq	r3, #0
 8002590:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002592:	6842      	ldr	r2, [r0, #4]
 8002594:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002596:	b2d3      	uxtb	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800259a:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	; 0x4c
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800259e:	3a01      	subs	r2, #1
 80025a0:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025a2:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025a4:	d820      	bhi.n	80025e8 <HAL_DMA_Init+0xb4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025a8:	4917      	ldr	r1, [pc, #92]	; (8002608 <HAL_DMA_Init+0xd4>)
 80025aa:	6581      	str	r1, [r0, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025ac:	441a      	add	r2, r3

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025ae:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025b0:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025b2:	2101      	movs	r1, #1
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025bc:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025be:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025c0:	65c3      	str	r3, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025c2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025c4:	4a11      	ldr	r2, [pc, #68]	; (800260c <HAL_DMA_Init+0xd8>)
 80025c6:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c8:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80025ca:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80025ce:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80025d2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 80025d6:	4618      	mov	r0, r3
}
 80025d8:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_DMA_Init+0xdc>)
 80025dc:	4413      	add	r3, r2
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	490c      	ldr	r1, [pc, #48]	; (8002614 <HAL_DMA_Init+0xe0>)
 80025e4:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 80025e6:	e7b4      	b.n	8002552 <HAL_DMA_Init+0x1e>
    hdma->DMAmuxRequestGen = 0U;
 80025e8:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80025ea:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025ee:	65c3      	str	r3, [r0, #92]	; 0x5c
 80025f0:	e7ea      	b.n	80025c8 <HAL_DMA_Init+0x94>
    return HAL_ERROR;
 80025f2:	2001      	movs	r0, #1
 80025f4:	e7f0      	b.n	80025d8 <HAL_DMA_Init+0xa4>
 80025f6:	bf00      	nop
 80025f8:	40020407 	.word	0x40020407
 80025fc:	bffdfff8 	.word	0xbffdfff8
 8002600:	40020000 	.word	0x40020000
 8002604:	1000823f 	.word	0x1000823f
 8002608:	40020940 	.word	0x40020940
 800260c:	40020900 	.word	0x40020900
 8002610:	bffdfbf8 	.word	0xbffdfbf8
 8002614:	40020400 	.word	0x40020400

08002618 <HAL_DMA_Start_IT>:
{
 8002618:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800261a:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 800261e:	2d01      	cmp	r5, #1
{
 8002620:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002622:	d038      	beq.n	8002696 <HAL_DMA_Start_IT+0x7e>
 8002624:	2501      	movs	r5, #1
 8002626:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800262a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 800262e:	2d01      	cmp	r5, #1
 8002630:	f04f 0600 	mov.w	r6, #0
 8002634:	f04f 0502 	mov.w	r5, #2
 8002638:	d12b      	bne.n	8002692 <HAL_DMA_Start_IT+0x7a>
    hdma->State = HAL_DMA_STATE_BUSY;
 800263a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 800263e:	6805      	ldr	r5, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002640:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002642:	682e      	ldr	r6, [r5, #0]
 8002644:	f026 0601 	bic.w	r6, r6, #1
 8002648:	602e      	str	r6, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800264a:	f7ff ff35 	bl	80024b8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800264e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002650:	b1bb      	cbz	r3, 8002682 <HAL_DMA_Start_IT+0x6a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002658:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800265a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	03d2      	lsls	r2, r2, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002660:	bf42      	ittt	mi
 8002662:	681a      	ldrmi	r2, [r3, #0]
 8002664:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8002668:	601a      	strmi	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800266a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800266c:	b11b      	cbz	r3, 8002676 <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002674:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002676:	682b      	ldr	r3, [r5, #0]
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2000      	movs	r0, #0
}
 8002680:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002682:	682b      	ldr	r3, [r5, #0]
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	f043 030a 	orr.w	r3, r3, #10
 8002690:	e7e2      	b.n	8002658 <HAL_DMA_Start_IT+0x40>
    __HAL_UNLOCK(hdma);
 8002692:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002696:	2002      	movs	r0, #2
 8002698:	e7f2      	b.n	8002680 <HAL_DMA_Start_IT+0x68>

0800269a <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800269a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800269c:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800269e:	6803      	ldr	r3, [r0, #0]
{
 80026a0:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026a2:	f002 021f 	and.w	r2, r2, #31
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a6:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80026a8:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80026aa:	2404      	movs	r4, #4
 80026ac:	4094      	lsls	r4, r2
 80026ae:	4234      	tst	r4, r6
 80026b0:	d00e      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x36>
 80026b2:	f015 0f04 	tst.w	r5, #4
 80026b6:	d00b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026bc:	bf5e      	ittt	pl
 80026be:	681a      	ldrpl	r2, [r3, #0]
 80026c0:	f022 0204 	bicpl.w	r2, r2, #4
 80026c4:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80026c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026c8:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80026ca:	b373      	cbz	r3, 800272a <HAL_DMA_IRQHandler+0x90>
}
 80026cc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80026ce:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026d0:	2402      	movs	r4, #2
 80026d2:	4094      	lsls	r4, r2
 80026d4:	4234      	tst	r4, r6
 80026d6:	d012      	beq.n	80026fe <HAL_DMA_IRQHandler+0x64>
           && (0U != (source_it & DMA_IT_TC)))
 80026d8:	f015 0f02 	tst.w	r5, #2
 80026dc:	d00f      	beq.n	80026fe <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	0695      	lsls	r5, r2, #26
 80026e2:	d406      	bmi.n	80026f2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f022 020a 	bic.w	r2, r2, #10
 80026ea:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80026f2:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80026f4:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80026f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 80026fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80026fc:	e7e5      	b.n	80026ca <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80026fe:	2408      	movs	r4, #8
 8002700:	4094      	lsls	r4, r2
 8002702:	4234      	tst	r4, r6
 8002704:	d011      	beq.n	800272a <HAL_DMA_IRQHandler+0x90>
           && (0U != (source_it & DMA_IT_TE)))
 8002706:	072c      	lsls	r4, r5, #28
 8002708:	d50f      	bpl.n	800272a <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800270a:	681c      	ldr	r4, [r3, #0]
 800270c:	f024 040e 	bic.w	r4, r4, #14
 8002710:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002712:	2301      	movs	r3, #1
 8002714:	fa03 f202 	lsl.w	r2, r3, r2
 8002718:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800271a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800271c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002720:	2300      	movs	r3, #0
 8002722:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002726:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002728:	e7cf      	b.n	80026ca <HAL_DMA_IRQHandler+0x30>
}
 800272a:	bc70      	pop	{r4, r5, r6}
 800272c:	4770      	bx	lr
	...

08002730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002734:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80028c4 <HAL_GPIO_Init+0x194>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002738:	4c60      	ldr	r4, [pc, #384]	; (80028bc <HAL_GPIO_Init+0x18c>)
  uint32_t position = 0x00U;
 800273a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0U)
 800273c:	680a      	ldr	r2, [r1, #0]
 800273e:	fa32 f503 	lsrs.w	r5, r2, r3
 8002742:	d102      	bne.n	800274a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002744:	b003      	add	sp, #12
 8002746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800274a:	2501      	movs	r5, #1
 800274c:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent != 0x00u)
 8002750:	ea1e 0202 	ands.w	r2, lr, r2
 8002754:	f000 80a5 	beq.w	80028a2 <HAL_GPIO_Init+0x172>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002758:	684e      	ldr	r6, [r1, #4]
 800275a:	f006 0503 	and.w	r5, r6, #3
 800275e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002762:	f04f 0c03 	mov.w	ip, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002766:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002768:	fa0c fc08 	lsl.w	ip, ip, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800276c:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800276e:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002772:	d834      	bhi.n	80027de <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8002774:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002776:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277a:	68cf      	ldr	r7, [r1, #12]
 800277c:	fa07 f708 	lsl.w	r7, r7, r8
 8002780:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002784:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002786:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002788:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8002790:	409f      	lsls	r7, r3
 8002792:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002796:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002798:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800279a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279e:	688f      	ldr	r7, [r1, #8]
 80027a0:	fa07 f708 	lsl.w	r7, r7, r8
 80027a4:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a8:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 80027aa:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ac:	d119      	bne.n	80027e2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80027ae:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80027b2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027b6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80027ba:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80027c2:	f04f 0e0f 	mov.w	lr, #15
 80027c6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80027ca:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ce:	690f      	ldr	r7, [r1, #16]
 80027d0:	fa07 f70b 	lsl.w	r7, r7, fp
 80027d4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80027d8:	f8ca 7020 	str.w	r7, [sl, #32]
 80027dc:	e001      	b.n	80027e2 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027de:	2d03      	cmp	r5, #3
 80027e0:	d1da      	bne.n	8002798 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80027e2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e4:	fa05 f508 	lsl.w	r5, r5, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027e8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ec:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ee:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 80027f2:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f4:	d055      	beq.n	80028a2 <HAL_GPIO_Init+0x172>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80027fa:	f045 0501 	orr.w	r5, r5, #1
 80027fe:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002802:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002806:	f023 0703 	bic.w	r7, r3, #3
 800280a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800280e:	f005 0501 	and.w	r5, r5, #1
 8002812:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002816:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002818:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281c:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800281e:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002820:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002824:	f04f 0c0f 	mov.w	ip, #15
 8002828:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800282c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002830:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002834:	d037      	beq.n	80028a6 <HAL_GPIO_Init+0x176>
 8002836:	4d22      	ldr	r5, [pc, #136]	; (80028c0 <HAL_GPIO_Init+0x190>)
 8002838:	42a8      	cmp	r0, r5
 800283a:	d036      	beq.n	80028aa <HAL_GPIO_Init+0x17a>
 800283c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002840:	42a8      	cmp	r0, r5
 8002842:	d034      	beq.n	80028ae <HAL_GPIO_Init+0x17e>
 8002844:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002848:	42a8      	cmp	r0, r5
 800284a:	d032      	beq.n	80028b2 <HAL_GPIO_Init+0x182>
 800284c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002850:	42a8      	cmp	r0, r5
 8002852:	d030      	beq.n	80028b6 <HAL_GPIO_Init+0x186>
 8002854:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002858:	42a8      	cmp	r0, r5
 800285a:	bf0c      	ite	eq
 800285c:	2505      	moveq	r5, #5
 800285e:	2506      	movne	r5, #6
 8002860:	fa05 f50e 	lsl.w	r5, r5, lr
 8002864:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002868:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 800286a:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800286c:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002872:	bf0c      	ite	eq
 8002874:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002876:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8002878:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800287a:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800287c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002880:	bf0c      	ite	eq
 8002882:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002884:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8002886:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8002888:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 800288e:	bf0c      	ite	eq
 8002890:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002892:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8002894:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8002896:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002898:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 800289a:	bf54      	ite	pl
 800289c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800289e:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 80028a0:	6025      	str	r5, [r4, #0]
    position++;
 80028a2:	3301      	adds	r3, #1
 80028a4:	e74a      	b.n	800273c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028a6:	2500      	movs	r5, #0
 80028a8:	e7da      	b.n	8002860 <HAL_GPIO_Init+0x130>
 80028aa:	2501      	movs	r5, #1
 80028ac:	e7d8      	b.n	8002860 <HAL_GPIO_Init+0x130>
 80028ae:	2502      	movs	r5, #2
 80028b0:	e7d6      	b.n	8002860 <HAL_GPIO_Init+0x130>
 80028b2:	2503      	movs	r5, #3
 80028b4:	e7d4      	b.n	8002860 <HAL_GPIO_Init+0x130>
 80028b6:	2504      	movs	r5, #4
 80028b8:	e7d2      	b.n	8002860 <HAL_GPIO_Init+0x130>
 80028ba:	bf00      	nop
 80028bc:	40010400 	.word	0x40010400
 80028c0:	48000400 	.word	0x48000400
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	b10a      	cbz	r2, 80028ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ca:	6181      	str	r1, [r0, #24]
 80028cc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ce:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028d6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028d8:	bb30      	cbnz	r0, 8002928 <HAL_PWREx_ControlVoltageScaling+0x54>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028da:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80028de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80028e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ee:	d11a      	bne.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x52>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028fc:	4a20      	ldr	r2, [pc, #128]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	2132      	movs	r1, #50	; 0x32
 8002902:	434a      	muls	r2, r1
 8002904:	491f      	ldr	r1, [pc, #124]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002906:	fbb2 f2f1 	udiv	r2, r2, r1
 800290a:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800290c:	6959      	ldr	r1, [r3, #20]
 800290e:	0549      	lsls	r1, r1, #21
 8002910:	d500      	bpl.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x40>
 8002912:	b922      	cbnz	r2, 800291e <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	0558      	lsls	r0, r3, #21
 8002918:	d403      	bmi.n	8002922 <HAL_PWREx_ControlVoltageScaling+0x4e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800291a:	2000      	movs	r0, #0
}
 800291c:	4770      	bx	lr
        wait_loop_index--;
 800291e:	3a01      	subs	r2, #1
 8002920:	e7f4      	b.n	800290c <HAL_PWREx_ControlVoltageScaling+0x38>
        return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
 8002924:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002926:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002928:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800292c:	d11f      	bne.n	800296e <HAL_PWREx_ControlVoltageScaling+0x9a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800292e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8002932:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002936:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800293a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800293e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002942:	d1ea      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x46>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	2132      	movs	r1, #50	; 0x32
 8002956:	434a      	muls	r2, r1
 8002958:	490a      	ldr	r1, [pc, #40]	; (8002984 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800295a:	fbb2 f2f1 	udiv	r2, r2, r1
 800295e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002960:	6959      	ldr	r1, [r3, #20]
 8002962:	0549      	lsls	r1, r1, #21
 8002964:	d5d6      	bpl.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x40>
 8002966:	2a00      	cmp	r2, #0
 8002968:	d0d4      	beq.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 800296a:	3a01      	subs	r2, #1
 800296c:	e7f8      	b.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x8c>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800296e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002972:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e7cf      	b.n	800291a <HAL_PWREx_ControlVoltageScaling+0x46>
 800297a:	bf00      	nop
 800297c:	40007000 	.word	0x40007000
 8002980:	20000028 	.word	0x20000028
 8002984:	000f4240 	.word	0x000f4240

08002988 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002988:	4a02      	ldr	r2, [pc, #8]	; (8002994 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800298a:	6893      	ldr	r3, [r2, #8]
 800298c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002990:	6093      	str	r3, [r2, #8]
}
 8002992:	4770      	bx	lr
 8002994:	40007000 	.word	0x40007000

08002998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	4604      	mov	r4, r0
 800299e:	b340      	cbz	r0, 80029f2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a0:	6803      	ldr	r3, [r0, #0]
 80029a2:	07df      	lsls	r7, r3, #31
 80029a4:	d414      	bmi.n	80029d0 <HAL_RCC_OscConfig+0x38>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	079e      	lsls	r6, r3, #30
 80029aa:	d45b      	bmi.n	8002a64 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	071e      	lsls	r6, r3, #28
 80029b0:	f100 80a4 	bmi.w	8002afc <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	075d      	lsls	r5, r3, #29
 80029b8:	f100 80cb 	bmi.w	8002b52 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	069b      	lsls	r3, r3, #26
 80029c0:	f100 8132 	bmi.w	8002c28 <HAL_RCC_OscConfig+0x290>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029c4:	69e0      	ldr	r0, [r4, #28]
 80029c6:	2800      	cmp	r0, #0
 80029c8:	f040 8160 	bne.w	8002c8c <HAL_RCC_OscConfig+0x2f4>
      }
    }
  }
  }

  return HAL_OK;
 80029cc:	2000      	movs	r0, #0
 80029ce:	e028      	b.n	8002a22 <HAL_RCC_OscConfig+0x8a>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d0:	4da1      	ldr	r5, [pc, #644]	; (8002c58 <HAL_RCC_OscConfig+0x2c0>)
 80029d2:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029d4:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029de:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d109      	bne.n	80029fa <HAL_RCC_OscConfig+0x62>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e6:	682b      	ldr	r3, [r5, #0]
 80029e8:	039d      	lsls	r5, r3, #14
 80029ea:	d5dc      	bpl.n	80029a6 <HAL_RCC_OscConfig+0xe>
 80029ec:	6863      	ldr	r3, [r4, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1d9      	bne.n	80029a6 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
 80029f4:	e015      	b.n	8002a22 <HAL_RCC_OscConfig+0x8a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	e7f4      	b.n	80029e4 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029fa:	6863      	ldr	r3, [r4, #4]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d112      	bne.n	8002a28 <HAL_RCC_OscConfig+0x90>
 8002a02:	682b      	ldr	r3, [r5, #0]
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a0a:	f7ff f89b 	bl	8001b44 <HAL_GetTick>
 8002a0e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	0398      	lsls	r0, r3, #14
 8002a14:	d4c7      	bmi.n	80029a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a16:	f7ff f895 	bl	8001b44 <HAL_GetTick>
 8002a1a:	1b80      	subs	r0, r0, r6
 8002a1c:	2864      	cmp	r0, #100	; 0x64
 8002a1e:	d9f7      	bls.n	8002a10 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8002a20:	2003      	movs	r0, #3
}
 8002a22:	b002      	add	sp, #8
 8002a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d104      	bne.n	8002a38 <HAL_RCC_OscConfig+0xa0>
 8002a2e:	682b      	ldr	r3, [r5, #0]
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a34:	602b      	str	r3, [r5, #0]
 8002a36:	e7e4      	b.n	8002a02 <HAL_RCC_OscConfig+0x6a>
 8002a38:	682a      	ldr	r2, [r5, #0]
 8002a3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a3e:	602a      	str	r2, [r5, #0]
 8002a40:	682a      	ldr	r2, [r5, #0]
 8002a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a46:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1de      	bne.n	8002a0a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8002a4c:	f7ff f87a 	bl	8001b44 <HAL_GetTick>
 8002a50:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a52:	682b      	ldr	r3, [r5, #0]
 8002a54:	0399      	lsls	r1, r3, #14
 8002a56:	d5a6      	bpl.n	80029a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7ff f874 	bl	8001b44 <HAL_GetTick>
 8002a5c:	1b80      	subs	r0, r0, r6
 8002a5e:	2864      	cmp	r0, #100	; 0x64
 8002a60:	d9f7      	bls.n	8002a52 <HAL_RCC_OscConfig+0xba>
 8002a62:	e7dd      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a64:	4d7c      	ldr	r5, [pc, #496]	; (8002c58 <HAL_RCC_OscConfig+0x2c0>)
 8002a66:	68ab      	ldr	r3, [r5, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a68:	68ea      	ldr	r2, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d117      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x10a>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a72:	f002 0303 	and.w	r3, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x10e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7a:	682b      	ldr	r3, [r5, #0]
 8002a7c:	055a      	lsls	r2, r3, #21
 8002a7e:	d502      	bpl.n	8002a86 <HAL_RCC_OscConfig+0xee>
 8002a80:	68e3      	ldr	r3, [r4, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0b5      	beq.n	80029f2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	686b      	ldr	r3, [r5, #4]
 8002a88:	6922      	ldr	r2, [r4, #16]
 8002a8a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002a8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a92:	606b      	str	r3, [r5, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a94:	4b71      	ldr	r3, [pc, #452]	; (8002c5c <HAL_RCC_OscConfig+0x2c4>)
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f7ff f812 	bl	8001ac0 <HAL_InitTick>
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	d085      	beq.n	80029ac <HAL_RCC_OscConfig+0x14>
 8002aa0:	e7a7      	b.n	80029f2 <HAL_RCC_OscConfig+0x5a>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	e7e8      	b.n	8002a78 <HAL_RCC_OscConfig+0xe0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aa6:	68e3      	ldr	r3, [r4, #12]
 8002aa8:	b1bb      	cbz	r3, 8002ada <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_ENABLE();
 8002aaa:	682b      	ldr	r3, [r5, #0]
 8002aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ab2:	f7ff f847 	bl	8001b44 <HAL_GetTick>
 8002ab6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab8:	682b      	ldr	r3, [r5, #0]
 8002aba:	055b      	lsls	r3, r3, #21
 8002abc:	d507      	bpl.n	8002ace <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	686b      	ldr	r3, [r5, #4]
 8002ac0:	6922      	ldr	r2, [r4, #16]
 8002ac2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ac6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002aca:	606b      	str	r3, [r5, #4]
 8002acc:	e76e      	b.n	80029ac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ace:	f7ff f839 	bl	8001b44 <HAL_GetTick>
 8002ad2:	1b80      	subs	r0, r0, r6
 8002ad4:	2802      	cmp	r0, #2
 8002ad6:	d9ef      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x120>
 8002ad8:	e7a2      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8002ada:	682b      	ldr	r3, [r5, #0]
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f82f 	bl	8001b44 <HAL_GetTick>
 8002ae6:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	055f      	lsls	r7, r3, #21
 8002aec:	f57f af5e 	bpl.w	80029ac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af0:	f7ff f828 	bl	8001b44 <HAL_GetTick>
 8002af4:	1b80      	subs	r0, r0, r6
 8002af6:	2802      	cmp	r0, #2
 8002af8:	d9f6      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x150>
 8002afa:	e791      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002afc:	6963      	ldr	r3, [r4, #20]
 8002afe:	4d56      	ldr	r5, [pc, #344]	; (8002c58 <HAL_RCC_OscConfig+0x2c0>)
 8002b00:	b19b      	cbz	r3, 8002b2a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002b02:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002b0e:	f7ff f819 	bl	8001b44 <HAL_GetTick>
 8002b12:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b18:	0798      	lsls	r0, r3, #30
 8002b1a:	f53f af4b 	bmi.w	80029b4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1e:	f7ff f811 	bl	8001b44 <HAL_GetTick>
 8002b22:	1b80      	subs	r0, r0, r6
 8002b24:	2802      	cmp	r0, #2
 8002b26:	d9f5      	bls.n	8002b14 <HAL_RCC_OscConfig+0x17c>
 8002b28:	e77a      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8002b2a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002b36:	f7ff f805 	bl	8001b44 <HAL_GetTick>
 8002b3a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b3c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b40:	0799      	lsls	r1, r3, #30
 8002b42:	f57f af37 	bpl.w	80029b4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe fffd 	bl	8001b44 <HAL_GetTick>
 8002b4a:	1b80      	subs	r0, r0, r6
 8002b4c:	2802      	cmp	r0, #2
 8002b4e:	d9f5      	bls.n	8002b3c <HAL_RCC_OscConfig+0x1a4>
 8002b50:	e766      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b52:	4d41      	ldr	r5, [pc, #260]	; (8002c58 <HAL_RCC_OscConfig+0x2c0>)
 8002b54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b56:	00da      	lsls	r2, r3, #3
 8002b58:	d427      	bmi.n	8002baa <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b62:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b6c:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	4e3c      	ldr	r6, [pc, #240]	; (8002c60 <HAL_RCC_OscConfig+0x2c8>)
 8002b70:	6833      	ldr	r3, [r6, #0]
 8002b72:	05db      	lsls	r3, r3, #23
 8002b74:	d51b      	bpl.n	8002bae <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b76:	68a3      	ldr	r3, [r4, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d129      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x238>
 8002b7c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002b88:	f7fe ffdc 	bl	8001b44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002b90:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b92:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002b96:	0799      	lsls	r1, r3, #30
 8002b98:	d540      	bpl.n	8002c1c <HAL_RCC_OscConfig+0x284>
    if (pwrclkchanged == SET)
 8002b9a:	2f00      	cmp	r7, #0
 8002b9c:	f43f af0e 	beq.w	80029bc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	65ab      	str	r3, [r5, #88]	; 0x58
 8002ba8:	e708      	b.n	80029bc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2700      	movs	r7, #0
 8002bac:	e7df      	b.n	8002b6e <HAL_RCC_OscConfig+0x1d6>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bae:	6833      	ldr	r3, [r6, #0]
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002bb6:	f7fe ffc5 	bl	8001b44 <HAL_GetTick>
 8002bba:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbc:	6833      	ldr	r3, [r6, #0]
 8002bbe:	05d8      	lsls	r0, r3, #23
 8002bc0:	d4d9      	bmi.n	8002b76 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc2:	f7fe ffbf 	bl	8001b44 <HAL_GetTick>
 8002bc6:	eba0 0008 	sub.w	r0, r0, r8
 8002bca:	2802      	cmp	r0, #2
 8002bcc:	d9f6      	bls.n	8002bbc <HAL_RCC_OscConfig+0x224>
 8002bce:	e727      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x24a>
 8002bd4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8002be0:	e7cc      	b.n	8002b7c <HAL_RCC_OscConfig+0x1e4>
 8002be2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8002bee:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1c4      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1f0>
      tickstart = HAL_GetTick();
 8002bfe:	f7fe ffa1 	bl	8001b44 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c06:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c08:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002c0c:	079a      	lsls	r2, r3, #30
 8002c0e:	d5c4      	bpl.n	8002b9a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe ff98 	bl	8001b44 <HAL_GetTick>
 8002c14:	1b80      	subs	r0, r0, r6
 8002c16:	4540      	cmp	r0, r8
 8002c18:	d9f6      	bls.n	8002c08 <HAL_RCC_OscConfig+0x270>
 8002c1a:	e701      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe ff92 	bl	8001b44 <HAL_GetTick>
 8002c20:	1b80      	subs	r0, r0, r6
 8002c22:	4540      	cmp	r0, r8
 8002c24:	d9b5      	bls.n	8002b92 <HAL_RCC_OscConfig+0x1fa>
 8002c26:	e6fb      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c28:	69a3      	ldr	r3, [r4, #24]
 8002c2a:	4d0b      	ldr	r5, [pc, #44]	; (8002c58 <HAL_RCC_OscConfig+0x2c0>)
 8002c2c:	b1d3      	cbz	r3, 8002c64 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_HSI48_ENABLE();
 8002c2e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002c3a:	f7fe ff83 	bl	8001b44 <HAL_GetTick>
 8002c3e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c40:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002c44:	079f      	lsls	r7, r3, #30
 8002c46:	f53f aebd 	bmi.w	80029c4 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c4a:	f7fe ff7b 	bl	8001b44 <HAL_GetTick>
 8002c4e:	1b80      	subs	r0, r0, r6
 8002c50:	2802      	cmp	r0, #2
 8002c52:	d9f5      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2a8>
 8002c54:	e6e4      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	20000030 	.word	0x20000030
 8002c60:	40007000 	.word	0x40007000
      __HAL_RCC_HSI48_DISABLE();
 8002c64:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002c70:	f7fe ff68 	bl	8001b44 <HAL_GetTick>
 8002c74:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c76:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002c7a:	0798      	lsls	r0, r3, #30
 8002c7c:	f57f aea2 	bpl.w	80029c4 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c80:	f7fe ff60 	bl	8001b44 <HAL_GetTick>
 8002c84:	1b80      	subs	r0, r0, r6
 8002c86:	2802      	cmp	r0, #2
 8002c88:	d9f5      	bls.n	8002c76 <HAL_RCC_OscConfig+0x2de>
 8002c8a:	e6c9      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c8c:	4d48      	ldr	r5, [pc, #288]	; (8002db0 <HAL_RCC_OscConfig+0x418>)
 8002c8e:	68ab      	ldr	r3, [r5, #8]
 8002c90:	f003 030c 	and.w	r3, r3, #12
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d057      	beq.n	8002d48 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_DISABLE();
 8002c98:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c9a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca0:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ca2:	d13a      	bne.n	8002d1a <HAL_RCC_OscConfig+0x382>
        tickstart = HAL_GetTick();
 8002ca4:	f7fe ff4e 	bl	8001b44 <HAL_GetTick>
 8002ca8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002caa:	682b      	ldr	r3, [r5, #0]
 8002cac:	0199      	lsls	r1, r3, #6
 8002cae:	d42e      	bmi.n	8002d0e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb0:	68ea      	ldr	r2, [r5, #12]
 8002cb2:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_RCC_OscConfig+0x41c>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	6a22      	ldr	r2, [r4, #32]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002cbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002cc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cc2:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002cc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cc8:	3a01      	subs	r2, #1
 8002cca:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002cce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002cd0:	0852      	lsrs	r2, r2, #1
 8002cd2:	3a01      	subs	r2, #1
 8002cd4:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002cd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002cda:	0852      	lsrs	r2, r2, #1
 8002cdc:	3a01      	subs	r2, #1
 8002cde:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002ce2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cea:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cec:	68eb      	ldr	r3, [r5, #12]
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002cf4:	f7fe ff26 	bl	8001b44 <HAL_GetTick>
 8002cf8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	682b      	ldr	r3, [r5, #0]
 8002cfc:	019a      	lsls	r2, r3, #6
 8002cfe:	f53f ae65 	bmi.w	80029cc <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe ff1f 	bl	8001b44 <HAL_GetTick>
 8002d06:	1b00      	subs	r0, r0, r4
 8002d08:	2802      	cmp	r0, #2
 8002d0a:	d9f6      	bls.n	8002cfa <HAL_RCC_OscConfig+0x362>
 8002d0c:	e688      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe ff19 	bl	8001b44 <HAL_GetTick>
 8002d12:	1b80      	subs	r0, r0, r6
 8002d14:	2802      	cmp	r0, #2
 8002d16:	d9c8      	bls.n	8002caa <HAL_RCC_OscConfig+0x312>
 8002d18:	e682      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d1a:	68eb      	ldr	r3, [r5, #12]
 8002d1c:	f023 0303 	bic.w	r3, r3, #3
 8002d20:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d22:	68eb      	ldr	r3, [r5, #12]
 8002d24:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002d2e:	f7fe ff09 	bl	8001b44 <HAL_GetTick>
 8002d32:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d34:	682b      	ldr	r3, [r5, #0]
 8002d36:	019b      	lsls	r3, r3, #6
 8002d38:	f57f ae48 	bpl.w	80029cc <HAL_RCC_OscConfig+0x34>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe ff02 	bl	8001b44 <HAL_GetTick>
 8002d40:	1b00      	subs	r0, r0, r4
 8002d42:	2802      	cmp	r0, #2
 8002d44:	d9f6      	bls.n	8002d34 <HAL_RCC_OscConfig+0x39c>
 8002d46:	e66b      	b.n	8002a20 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	2801      	cmp	r0, #1
 8002d4a:	f43f ae6a 	beq.w	8002a22 <HAL_RCC_OscConfig+0x8a>
      temp_pllckcfg = RCC->PLLCFGR;
 8002d4e:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d50:	6a22      	ldr	r2, [r4, #32]
 8002d52:	f003 0103 	and.w	r1, r3, #3
 8002d56:	4291      	cmp	r1, r2
 8002d58:	f47f ae4b 	bne.w	80029f2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002d5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d62:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d64:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002d68:	f47f ae43 	bne.w	80029f2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d72:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002d76:	f47f ae3c 	bne.w	80029f2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d7a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002d7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d80:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002d84:	f47f ae35 	bne.w	80029f2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002d90:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d92:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002d96:	f47f ae2c 	bne.w	80029f2 <HAL_RCC_OscConfig+0x5a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d9c:	0852      	lsrs	r2, r2, #1
 8002d9e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002da2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002da8:	f43f ae10 	beq.w	80029cc <HAL_RCC_OscConfig+0x34>
 8002dac:	e621      	b.n	80029f2 <HAL_RCC_OscConfig+0x5a>
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	019f800c 	.word	0x019f800c

08002db8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x60>)
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	f002 020c 	and.w	r2, r2, #12
 8002dc0:	2a04      	cmp	r2, #4
 8002dc2:	d023      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	f002 020c 	and.w	r2, r2, #12
 8002dca:	2a08      	cmp	r2, #8
 8002dcc:	d020      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	f002 020c 	and.w	r2, r2, #12
 8002dd4:	2a0c      	cmp	r2, #12
 8002dd6:	d11d      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0x5c>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dd8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dda:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ddc:	68d8      	ldr	r0, [r3, #12]
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dde:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002de0:	f001 0103 	and.w	r1, r1, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002de4:	f3c3 6341 	ubfx	r3, r3, #25, #2
    switch (pllsource)
 8002de8:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dea:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dee:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df2:	f103 0301 	add.w	r3, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002df6:	bf0c      	ite	eq
 8002df8:	4908      	ldreq	r1, [pc, #32]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x64>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dfa:	4909      	ldrne	r1, [pc, #36]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x68>)
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfc:	005b      	lsls	r3, r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dfe:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e00:	fbb1 f2f2 	udiv	r2, r1, r2
 8002e04:	4350      	muls	r0, r2
    sysclockfreq = pllvco/pllr;
 8002e06:	fbb0 f0f3 	udiv	r0, r0, r3
  else
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
 8002e0a:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x68>)
 8002e0e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x64>)
 8002e12:	4770      	bx	lr
    sysclockfreq = 0U;
 8002e14:	2000      	movs	r0, #0
}
 8002e16:	4770      	bx	lr
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	016e3600 	.word	0x016e3600
 8002e20:	00f42400 	.word	0x00f42400

08002e24 <HAL_RCC_ClockConfig>:
{
 8002e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e28:	460e      	mov	r6, r1
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	b910      	cbnz	r0, 8002e34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
}
 8002e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4a6d      	ldr	r2, [pc, #436]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d345      	bcc.n	8002ecc <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e40:	6829      	ldr	r1, [r5, #0]
 8002e42:	f011 0801 	ands.w	r8, r1, #1
 8002e46:	d14c      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xbe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	682a      	ldr	r2, [r5, #0]
 8002e4a:	0791      	lsls	r1, r2, #30
 8002e4c:	f140 80a7 	bpl.w	8002f9e <HAL_RCC_ClockConfig+0x17a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	4b67      	ldr	r3, [pc, #412]	; (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8002e52:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e56:	bf1e      	ittt	ne
 8002e58:	6899      	ldrne	r1, [r3, #8]
 8002e5a:	f441 61e0 	orrne.w	r1, r1, #1792	; 0x700
 8002e5e:	6099      	strne	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e60:	0712      	lsls	r2, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e62:	bf41      	itttt	mi
 8002e64:	689a      	ldrmi	r2, [r3, #8]
 8002e66:	f422 527c 	bicmi.w	r2, r2, #16128	; 0x3f00
 8002e6a:	f442 62e0 	orrmi.w	r2, r2, #1792	; 0x700
 8002e6e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	68a9      	ldr	r1, [r5, #8]
 8002e74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4c5b      	ldr	r4, [pc, #364]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	42b3      	cmp	r3, r6
 8002e86:	f200 8093 	bhi.w	8002fb0 <HAL_RCC_ClockConfig+0x18c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8a:	682a      	ldr	r2, [r5, #0]
 8002e8c:	4c58      	ldr	r4, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8002e8e:	f012 0f04 	tst.w	r2, #4
 8002e92:	f040 80a3 	bne.w	8002fdc <HAL_RCC_ClockConfig+0x1b8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	0713      	lsls	r3, r2, #28
 8002e98:	d506      	bpl.n	8002ea8 <HAL_RCC_ClockConfig+0x84>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e9a:	68a3      	ldr	r3, [r4, #8]
 8002e9c:	692a      	ldr	r2, [r5, #16]
 8002e9e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ea2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ea6:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea8:	f7ff ff86 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002eac:	68a3      	ldr	r3, [r4, #8]
 8002eae:	4a51      	ldr	r2, [pc, #324]	; (8002ff4 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002eb4:	5cd3      	ldrb	r3, [r2, r3]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	40d8      	lsrs	r0, r3
 8002ebc:	4b4e      	ldr	r3, [pc, #312]	; (8002ff8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ebe:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002ec0:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <HAL_RCC_ClockConfig+0x1d8>)
 8002ec2:	6818      	ldr	r0, [r3, #0]
}
 8002ec4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8002ec8:	f7fe bdfa 	b.w	8001ac0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ecc:	6813      	ldr	r3, [r2, #0]
 8002ece:	f023 030f 	bic.w	r3, r3, #15
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d1a6      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xa>
 8002ee0:	e7ae      	b.n	8002e40 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee2:	686f      	ldr	r7, [r5, #4]
 8002ee4:	4c42      	ldr	r4, [pc, #264]	; (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee6:	2f03      	cmp	r7, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee8:	6823      	ldr	r3, [r4, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eea:	d149      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x15c>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eec:	019b      	lsls	r3, r3, #6
 8002eee:	d59e      	bpl.n	8002e2e <HAL_RCC_ClockConfig+0xa>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef0:	68e3      	ldr	r3, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef2:	68e2      	ldr	r2, [r4, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef4:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8002ef8:	2b03      	cmp	r3, #3
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002efa:	68e3      	ldr	r3, [r4, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002efc:	bf0c      	ite	eq
 8002efe:	4840      	ldreq	r0, [pc, #256]	; (8003000 <HAL_RCC_ClockConfig+0x1dc>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f00:	4840      	ldrne	r0, [pc, #256]	; (8003004 <HAL_RCC_ClockConfig+0x1e0>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f02:	f3c2 1203 	ubfx	r2, r2, #4, #4
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f06:	f3c3 2306 	ubfx	r3, r3, #8, #7
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f0a:	3201      	adds	r2, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f0c:	fbb0 f2f2 	udiv	r2, r0, r2
 8002f10:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f12:	68e2      	ldr	r2, [r4, #12]
 8002f14:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8002f18:	3201      	adds	r2, #1
 8002f1a:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8002f1c:	fbb3 f3f2 	udiv	r3, r3, r2
      if(pllfreq > 80000000U)
 8002f20:	4a39      	ldr	r2, [pc, #228]	; (8003008 <HAL_RCC_ClockConfig+0x1e4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d81a      	bhi.n	8002f5c <HAL_RCC_ClockConfig+0x138>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f26:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	68a3      	ldr	r3, [r4, #8]
 8002f2c:	f023 0303 	bic.w	r3, r3, #3
 8002f30:	433b      	orrs	r3, r7
 8002f32:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002f34:	f7fe fe06 	bl	8001b44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002f3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	68a3      	ldr	r3, [r4, #8]
 8002f40:	686a      	ldr	r2, [r5, #4]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002f4a:	f43f af7d 	beq.w	8002e48 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4e:	f7fe fdf9 	bl	8001b44 <HAL_GetTick>
 8002f52:	1bc0      	subs	r0, r0, r7
 8002f54:	4548      	cmp	r0, r9
 8002f56:	d9f2      	bls.n	8002f3e <HAL_RCC_ClockConfig+0x11a>
        return HAL_TIMEOUT;
 8002f58:	2003      	movs	r0, #3
 8002f5a:	e769      	b.n	8002e30 <HAL_RCC_ClockConfig+0xc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f5c:	68a3      	ldr	r3, [r4, #8]
 8002f5e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8002f62:	d004      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x14a>
 8002f64:	0788      	lsls	r0, r1, #30
 8002f66:	d5de      	bpl.n	8002f26 <HAL_RCC_ClockConfig+0x102>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f68:	68ab      	ldr	r3, [r5, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1db      	bne.n	8002f26 <HAL_RCC_ClockConfig+0x102>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f6e:	68a3      	ldr	r3, [r4, #8]
 8002f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f78:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f7a:	f04f 0880 	mov.w	r8, #128	; 0x80
 8002f7e:	e7d4      	b.n	8002f2a <HAL_RCC_ClockConfig+0x106>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f80:	2f02      	cmp	r7, #2
 8002f82:	d109      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x174>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f88:	f43f af51 	beq.w	8002e2e <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f8c:	f7ff ff14 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCC_ClockConfig+0x1e4>)
 8002f92:	4298      	cmp	r0, r3
 8002f94:	d9c7      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x102>
 8002f96:	e7ea      	b.n	8002f6e <HAL_RCC_ClockConfig+0x14a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f98:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002f9c:	e7f4      	b.n	8002f88 <HAL_RCC_ClockConfig+0x164>
    if(hpre == RCC_SYSCLK_DIV2)
 8002f9e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fa2:	bf01      	itttt	eq
 8002fa4:	4a12      	ldreq	r2, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8002fa6:	6893      	ldreq	r3, [r2, #8]
 8002fa8:	f023 03f0 	biceq.w	r3, r3, #240	; 0xf0
 8002fac:	6093      	streq	r3, [r2, #8]
 8002fae:	e765      	b.n	8002e7c <HAL_RCC_ClockConfig+0x58>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	f023 030f 	bic.w	r3, r3, #15
 8002fb6:	4333      	orrs	r3, r6
 8002fb8:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002fba:	f7fe fdc3 	bl	8001b44 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fc2:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	42b3      	cmp	r3, r6
 8002fcc:	f43f af5d 	beq.w	8002e8a <HAL_RCC_ClockConfig+0x66>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fe fdb8 	bl	8001b44 <HAL_GetTick>
 8002fd4:	1bc0      	subs	r0, r0, r7
 8002fd6:	4540      	cmp	r0, r8
 8002fd8:	d9f4      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x1a0>
 8002fda:	e7bd      	b.n	8002f58 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	68a3      	ldr	r3, [r4, #8]
 8002fde:	68e9      	ldr	r1, [r5, #12]
 8002fe0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	60a3      	str	r3, [r4, #8]
 8002fe8:	e755      	b.n	8002e96 <HAL_RCC_ClockConfig+0x72>
 8002fea:	bf00      	nop
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08006f01 	.word	0x08006f01
 8002ff8:	20000028 	.word	0x20000028
 8002ffc:	20000030 	.word	0x20000030
 8003000:	016e3600 	.word	0x016e3600
 8003004:	00f42400 	.word	0x00f42400
 8003008:	04c4b400 	.word	0x04c4b400

0800300c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x18>)
 800300e:	4a06      	ldr	r2, [pc, #24]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	4a04      	ldr	r2, [pc, #16]	; (800302c <HAL_RCC_GetPCLK1Freq+0x20>)
 800301a:	6810      	ldr	r0, [r2, #0]
 800301c:	f003 031f 	and.w	r3, r3, #31
}
 8003020:	40d8      	lsrs	r0, r3
 8003022:	4770      	bx	lr
 8003024:	40021000 	.word	0x40021000
 8003028:	08006f11 	.word	0x08006f11
 800302c:	20000028 	.word	0x20000028

08003030 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003032:	4a06      	ldr	r2, [pc, #24]	; (800304c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800303e:	6810      	ldr	r0, [r2, #0]
 8003040:	f003 031f 	and.w	r3, r3, #31
}
 8003044:	40d8      	lsrs	r0, r3
 8003046:	4770      	bx	lr
 8003048:	40021000 	.word	0x40021000
 800304c:	08006f11 	.word	0x08006f11
 8003050:	20000028 	.word	0x20000028

08003054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003058:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305a:	6800      	ldr	r0, [r0, #0]
 800305c:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8003060:	d039      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4d99      	ldr	r5, [pc, #612]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003064:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003066:	00d8      	lsls	r0, r3, #3
 8003068:	d427      	bmi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	65ab      	str	r3, [r5, #88]	; 0x58
 8003072:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800307c:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800307e:	4f93      	ldr	r7, [pc, #588]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003086:	603b      	str	r3, [r7, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003088:	f7fe fd5c 	bl	8001b44 <HAL_GetTick>
 800308c:	4680      	mov	r8, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	05d9      	lsls	r1, r3, #23
 8003092:	d514      	bpl.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003094:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003098:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800309a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800309e:	d002      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f040 80eb 	bne.w	800327c <HAL_RCCEx_PeriphCLKConfig+0x228>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80030aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b6:	2000      	movs	r0, #0
 80030b8:	e008      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2600      	movs	r6, #0
 80030bc:	e7df      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030be:	f7fe fd41 	bl	8001b44 <HAL_GetTick>
 80030c2:	eba0 0008 	sub.w	r0, r0, r8
 80030c6:	2802      	cmp	r0, #2
 80030c8:	d9e1      	bls.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ca:	2003      	movs	r0, #3
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030cc:	b11e      	cbz	r6, 80030d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80030d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d4:	65ab      	str	r3, [r5, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	07de      	lsls	r6, r3, #31
 80030da:	d508      	bpl.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030dc:	497a      	ldr	r1, [pc, #488]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80030de:	6865      	ldr	r5, [r4, #4]
 80030e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80030e4:	f022 0203 	bic.w	r2, r2, #3
 80030e8:	432a      	orrs	r2, r5
 80030ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ee:	079d      	lsls	r5, r3, #30
 80030f0:	d508      	bpl.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f2:	4975      	ldr	r1, [pc, #468]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80030f4:	68a5      	ldr	r5, [r4, #8]
 80030f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80030fa:	f022 020c 	bic.w	r2, r2, #12
 80030fe:	432a      	orrs	r2, r5
 8003100:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003104:	0759      	lsls	r1, r3, #29
 8003106:	d508      	bpl.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003108:	496f      	ldr	r1, [pc, #444]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800310a:	68e5      	ldr	r5, [r4, #12]
 800310c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003110:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003114:	432a      	orrs	r2, r5
 8003116:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800311a:	071a      	lsls	r2, r3, #28
 800311c:	d508      	bpl.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800311e:	496a      	ldr	r1, [pc, #424]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003120:	6925      	ldr	r5, [r4, #16]
 8003122:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003126:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800312a:	432a      	orrs	r2, r5
 800312c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003130:	069f      	lsls	r7, r3, #26
 8003132:	d508      	bpl.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003134:	4964      	ldr	r1, [pc, #400]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003136:	6965      	ldr	r5, [r4, #20]
 8003138:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800313c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003140:	432a      	orrs	r2, r5
 8003142:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003146:	065e      	lsls	r6, r3, #25
 8003148:	d508      	bpl.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800314a:	495f      	ldr	r1, [pc, #380]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800314c:	69a5      	ldr	r5, [r4, #24]
 800314e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003152:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003156:	432a      	orrs	r2, r5
 8003158:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800315c:	061d      	lsls	r5, r3, #24
 800315e:	d508      	bpl.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003160:	4959      	ldr	r1, [pc, #356]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003162:	69e5      	ldr	r5, [r4, #28]
 8003164:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003168:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800316c:	432a      	orrs	r2, r5
 800316e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003172:	05d9      	lsls	r1, r3, #23
 8003174:	d508      	bpl.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003176:	4954      	ldr	r1, [pc, #336]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003178:	6a25      	ldr	r5, [r4, #32]
 800317a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800317e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003182:	432a      	orrs	r2, r5
 8003184:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003188:	059a      	lsls	r2, r3, #22
 800318a:	d508      	bpl.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800318c:	494e      	ldr	r1, [pc, #312]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800318e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003190:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003194:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003198:	432a      	orrs	r2, r5
 800319a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800319e:	055f      	lsls	r7, r3, #21
 80031a0:	d50f      	bpl.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031a2:	4949      	ldr	r1, [pc, #292]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80031a4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80031a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80031aa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80031ae:	432a      	orrs	r2, r5
 80031b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80031b4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b8:	bf02      	ittt	eq
 80031ba:	68ca      	ldreq	r2, [r1, #12]
 80031bc:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 80031c0:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031c2:	051e      	lsls	r6, r3, #20
 80031c4:	d50f      	bpl.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031c6:	4940      	ldr	r1, [pc, #256]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80031c8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80031ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80031ce:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80031d2:	432a      	orrs	r2, r5
 80031d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031d8:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031dc:	bf02      	ittt	eq
 80031de:	68ca      	ldreq	r2, [r1, #12]
 80031e0:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 80031e4:	60ca      	streq	r2, [r1, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031e6:	04dd      	lsls	r5, r3, #19
 80031e8:	d50f      	bpl.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031ea:	4937      	ldr	r1, [pc, #220]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80031ec:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80031ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80031f2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031f6:	432a      	orrs	r2, r5
 80031f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031fc:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003200:	bf02      	ittt	eq
 8003202:	68ca      	ldreq	r2, [r1, #12]
 8003204:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8003208:	60ca      	streq	r2, [r1, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800320a:	0499      	lsls	r1, r3, #18
 800320c:	d50f      	bpl.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800320e:	492e      	ldr	r1, [pc, #184]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003210:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003212:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003216:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800321a:	432a      	orrs	r2, r5
 800321c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003220:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003224:	bf02      	ittt	eq
 8003226:	68ca      	ldreq	r2, [r1, #12]
 8003228:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 800322c:	60ca      	streq	r2, [r1, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800322e:	045a      	lsls	r2, r3, #17
 8003230:	d50f      	bpl.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003232:	4925      	ldr	r1, [pc, #148]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003234:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003236:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800323a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800323e:	432a      	orrs	r2, r5
 8003240:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003244:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003248:	bf02      	ittt	eq
 800324a:	68ca      	ldreq	r2, [r1, #12]
 800324c:	f442 1280 	orreq.w	r2, r2, #1048576	; 0x100000
 8003250:	60ca      	streq	r2, [r1, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	d50f      	bpl.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003258:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800325a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800325e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003262:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003264:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800326c:	d103      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800326e:	68d3      	ldr	r3, [r2, #12]
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	60d3      	str	r3, [r2, #12]
  }

#endif /* QUADSPI */

  return status;
}
 8003276:	b002      	add	sp, #8
 8003278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800327c:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003280:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800328c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003290:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003298:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800329a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800329e:	f8c5 1090 	str.w	r1, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032a2:	f57f af00 	bpl.w	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 80032a6:	f7fe fc4d 	bl	8001b44 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80032ae:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80032b4:	079b      	lsls	r3, r3, #30
 80032b6:	f53f aef6 	bmi.w	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe fc43 	bl	8001b44 <HAL_GetTick>
 80032be:	1bc0      	subs	r0, r0, r7
 80032c0:	4540      	cmp	r0, r8
 80032c2:	d9f5      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 80032c4:	e701      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000

080032d0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d0:	6a03      	ldr	r3, [r0, #32]
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d8:	6a03      	ldr	r3, [r0, #32]
{
 80032da:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032de:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032e6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80032ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80032ee:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80032f2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f4:	4d1b      	ldr	r5, [pc, #108]	; (8003364 <TIM_OC1_SetConfig+0x94>)
 80032f6:	42a8      	cmp	r0, r5
 80032f8:	d00f      	beq.n	800331a <TIM_OC1_SetConfig+0x4a>
 80032fa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80032fe:	42a8      	cmp	r0, r5
 8003300:	d00b      	beq.n	800331a <TIM_OC1_SetConfig+0x4a>
 8003302:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003306:	42a8      	cmp	r0, r5
 8003308:	d007      	beq.n	800331a <TIM_OC1_SetConfig+0x4a>
 800330a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800330e:	42a8      	cmp	r0, r5
 8003310:	d003      	beq.n	800331a <TIM_OC1_SetConfig+0x4a>
 8003312:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003316:	42a8      	cmp	r0, r5
 8003318:	d11e      	bne.n	8003358 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800331a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800331c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003320:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003322:	4d10      	ldr	r5, [pc, #64]	; (8003364 <TIM_OC1_SetConfig+0x94>)
 8003324:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003326:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800332a:	d00f      	beq.n	800334c <TIM_OC1_SetConfig+0x7c>
 800332c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003330:	42a8      	cmp	r0, r5
 8003332:	d00b      	beq.n	800334c <TIM_OC1_SetConfig+0x7c>
 8003334:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003338:	42a8      	cmp	r0, r5
 800333a:	d007      	beq.n	800334c <TIM_OC1_SetConfig+0x7c>
 800333c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003340:	42a8      	cmp	r0, r5
 8003342:	d003      	beq.n	800334c <TIM_OC1_SetConfig+0x7c>
 8003344:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003348:	42a8      	cmp	r0, r5
 800334a:	d105      	bne.n	8003358 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003350:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8003354:	4334      	orrs	r4, r6
 8003356:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003358:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335c:	684a      	ldr	r2, [r1, #4]
 800335e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003360:	6203      	str	r3, [r0, #32]
}
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	40012c00 	.word	0x40012c00

08003368 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003368:	6a03      	ldr	r3, [r0, #32]
 800336a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003370:	6a03      	ldr	r3, [r0, #32]
{
 8003372:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003376:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003378:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800337a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800337e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003382:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003384:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800338a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800338e:	4d16      	ldr	r5, [pc, #88]	; (80033e8 <TIM_OC3_SetConfig+0x80>)
 8003390:	42a8      	cmp	r0, r5
 8003392:	d003      	beq.n	800339c <TIM_OC3_SetConfig+0x34>
 8003394:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003398:	42a8      	cmp	r0, r5
 800339a:	d10d      	bne.n	80033b8 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800339c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800339e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a6:	4d10      	ldr	r5, [pc, #64]	; (80033e8 <TIM_OC3_SetConfig+0x80>)
 80033a8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80033aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ae:	d00e      	beq.n	80033ce <TIM_OC3_SetConfig+0x66>
 80033b0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80033b4:	42a8      	cmp	r0, r5
 80033b6:	d00a      	beq.n	80033ce <TIM_OC3_SetConfig+0x66>
 80033b8:	4d0c      	ldr	r5, [pc, #48]	; (80033ec <TIM_OC3_SetConfig+0x84>)
 80033ba:	42a8      	cmp	r0, r5
 80033bc:	d007      	beq.n	80033ce <TIM_OC3_SetConfig+0x66>
 80033be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80033c2:	42a8      	cmp	r0, r5
 80033c4:	d003      	beq.n	80033ce <TIM_OC3_SetConfig+0x66>
 80033c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80033ca:	42a8      	cmp	r0, r5
 80033cc:	d106      	bne.n	80033dc <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ce:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033d2:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80033d6:	4334      	orrs	r4, r6
 80033d8:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033de:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033e0:	684a      	ldr	r2, [r1, #4]
 80033e2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e4:	6203      	str	r3, [r0, #32]
}
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40014000 	.word	0x40014000

080033f0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033f0:	6a03      	ldr	r3, [r0, #32]
 80033f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f8:	6a03      	ldr	r3, [r0, #32]
{
 80033fa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fe:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003400:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003402:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003406:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800340e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003414:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003418:	4d16      	ldr	r5, [pc, #88]	; (8003474 <TIM_OC4_SetConfig+0x84>)
 800341a:	42a8      	cmp	r0, r5
 800341c:	d003      	beq.n	8003426 <TIM_OC4_SetConfig+0x36>
 800341e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003422:	42a8      	cmp	r0, r5
 8003424:	d10d      	bne.n	8003442 <TIM_OC4_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003426:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8003428:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800342c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	4d10      	ldr	r5, [pc, #64]	; (8003474 <TIM_OC4_SetConfig+0x84>)
 8003432:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC4NE;
 8003434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003438:	d00e      	beq.n	8003458 <TIM_OC4_SetConfig+0x68>
 800343a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800343e:	42a8      	cmp	r0, r5
 8003440:	d00a      	beq.n	8003458 <TIM_OC4_SetConfig+0x68>
 8003442:	4d0d      	ldr	r5, [pc, #52]	; (8003478 <TIM_OC4_SetConfig+0x88>)
 8003444:	42a8      	cmp	r0, r5
 8003446:	d007      	beq.n	8003458 <TIM_OC4_SetConfig+0x68>
 8003448:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800344c:	42a8      	cmp	r0, r5
 800344e:	d003      	beq.n	8003458 <TIM_OC4_SetConfig+0x68>
 8003450:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003454:	42a8      	cmp	r0, r5
 8003456:	d106      	bne.n	8003466 <TIM_OC4_SetConfig+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003458:	f424 4540 	bic.w	r5, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800345c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8003460:	4334      	orrs	r4, r6
 8003462:	ea45 1484 	orr.w	r4, r5, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003466:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003468:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800346a:	684a      	ldr	r2, [r1, #4]
 800346c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	6203      	str	r3, [r0, #32]
}
 8003470:	bd70      	pop	{r4, r5, r6, pc}
 8003472:	bf00      	nop
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40014000 	.word	0x40014000

0800347c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800347c:	6a03      	ldr	r3, [r0, #32]
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003484:	6a03      	ldr	r3, [r0, #32]
{
 8003486:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003488:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800348a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800348e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003496:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003498:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800349a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800349e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a2:	4d0f      	ldr	r5, [pc, #60]	; (80034e0 <TIM_OC5_SetConfig+0x64>)
 80034a4:	42a8      	cmp	r0, r5
 80034a6:	d00f      	beq.n	80034c8 <TIM_OC5_SetConfig+0x4c>
 80034a8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80034ac:	42a8      	cmp	r0, r5
 80034ae:	d00b      	beq.n	80034c8 <TIM_OC5_SetConfig+0x4c>
 80034b0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80034b4:	42a8      	cmp	r0, r5
 80034b6:	d007      	beq.n	80034c8 <TIM_OC5_SetConfig+0x4c>
 80034b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034bc:	42a8      	cmp	r0, r5
 80034be:	d003      	beq.n	80034c8 <TIM_OC5_SetConfig+0x4c>
 80034c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80034c4:	42a8      	cmp	r0, r5
 80034c6:	d104      	bne.n	80034d2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034c8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034ca:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034ce:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034d4:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034d6:	684a      	ldr	r2, [r1, #4]
 80034d8:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034da:	6203      	str	r3, [r0, #32]
}
 80034dc:	bd30      	pop	{r4, r5, pc}
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034e4:	6a03      	ldr	r3, [r0, #32]
 80034e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034ea:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ec:	6a03      	ldr	r3, [r0, #32]
{
 80034ee:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034f2:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034f6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80034fa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003502:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003508:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350c:	4d0e      	ldr	r5, [pc, #56]	; (8003548 <TIM_OC6_SetConfig+0x64>)
 800350e:	42a8      	cmp	r0, r5
 8003510:	d00f      	beq.n	8003532 <TIM_OC6_SetConfig+0x4e>
 8003512:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003516:	42a8      	cmp	r0, r5
 8003518:	d00b      	beq.n	8003532 <TIM_OC6_SetConfig+0x4e>
 800351a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800351e:	42a8      	cmp	r0, r5
 8003520:	d007      	beq.n	8003532 <TIM_OC6_SetConfig+0x4e>
 8003522:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003526:	42a8      	cmp	r0, r5
 8003528:	d003      	beq.n	8003532 <TIM_OC6_SetConfig+0x4e>
 800352a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800352e:	42a8      	cmp	r0, r5
 8003530:	d104      	bne.n	800353c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003532:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003534:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003538:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800353e:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003540:	684a      	ldr	r2, [r1, #4]
 8003542:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003544:	6203      	str	r3, [r0, #32]
}
 8003546:	bd30      	pop	{r4, r5, pc}
 8003548:	40012c00 	.word	0x40012c00

0800354c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800354c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003550:	2b01      	cmp	r3, #1
 8003552:	d127      	bne.n	80035a4 <HAL_TIM_Base_Start+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003556:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <HAL_TIM_Base_Start+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355c:	6803      	ldr	r3, [r0, #0]
 800355e:	4293      	cmp	r3, r2
 8003560:	d012      	beq.n	8003588 <HAL_TIM_Base_Start+0x3c>
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d00f      	beq.n	8003588 <HAL_TIM_Base_Start+0x3c>
 8003568:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800356c:	4293      	cmp	r3, r2
 800356e:	d00b      	beq.n	8003588 <HAL_TIM_Base_Start+0x3c>
 8003570:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <HAL_TIM_Base_Start+0x3c>
 8003578:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <HAL_TIM_Base_Start+0x3c>
 8003580:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003584:	4293      	cmp	r3, r2
 8003586:	d107      	bne.n	8003598 <HAL_TIM_Base_Start+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003588:	6899      	ldr	r1, [r3, #8]
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_TIM_Base_Start+0x60>)
 800358c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	2a06      	cmp	r2, #6
 8003590:	d006      	beq.n	80035a0 <HAL_TIM_Base_Start+0x54>
 8003592:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003596:	d003      	beq.n	80035a0 <HAL_TIM_Base_Start+0x54>
    __HAL_TIM_ENABLE(htim);
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80035a0:	2000      	movs	r0, #0
}
 80035a2:	4770      	bx	lr
    return HAL_ERROR;
 80035a4:	2001      	movs	r0, #1
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	00010007 	.word	0x00010007

080035b0 <HAL_TIM_PWM_MspInit>:
 80035b0:	4770      	bx	lr
	...

080035b4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b4:	4a2c      	ldr	r2, [pc, #176]	; (8003668 <TIM_Base_SetConfig+0xb4>)
  tmpcr1 = TIMx->CR1;
 80035b6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b8:	4290      	cmp	r0, r2
 80035ba:	d00e      	beq.n	80035da <TIM_Base_SetConfig+0x26>
 80035bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035c0:	d00b      	beq.n	80035da <TIM_Base_SetConfig+0x26>
 80035c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80035c6:	4290      	cmp	r0, r2
 80035c8:	d007      	beq.n	80035da <TIM_Base_SetConfig+0x26>
 80035ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035ce:	4290      	cmp	r0, r2
 80035d0:	d003      	beq.n	80035da <TIM_Base_SetConfig+0x26>
 80035d2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80035d6:	4290      	cmp	r0, r2
 80035d8:	d115      	bne.n	8003606 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 80035da:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035e0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <TIM_Base_SetConfig+0xb4>)
 80035e4:	4290      	cmp	r0, r2
 80035e6:	d019      	beq.n	800361c <TIM_Base_SetConfig+0x68>
 80035e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80035ec:	d016      	beq.n	800361c <TIM_Base_SetConfig+0x68>
 80035ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80035f2:	4290      	cmp	r0, r2
 80035f4:	d012      	beq.n	800361c <TIM_Base_SetConfig+0x68>
 80035f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035fa:	4290      	cmp	r0, r2
 80035fc:	d00e      	beq.n	800361c <TIM_Base_SetConfig+0x68>
 80035fe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003602:	4290      	cmp	r0, r2
 8003604:	d00a      	beq.n	800361c <TIM_Base_SetConfig+0x68>
 8003606:	4a19      	ldr	r2, [pc, #100]	; (800366c <TIM_Base_SetConfig+0xb8>)
 8003608:	4290      	cmp	r0, r2
 800360a:	d007      	beq.n	800361c <TIM_Base_SetConfig+0x68>
 800360c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003610:	4290      	cmp	r0, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0x68>
 8003614:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003618:	4290      	cmp	r0, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	694a      	ldr	r2, [r1, #20]
 8003626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800362c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362e:	688b      	ldr	r3, [r1, #8]
 8003630:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003632:	680b      	ldr	r3, [r1, #0]
 8003634:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <TIM_Base_SetConfig+0xb4>)
 8003638:	4298      	cmp	r0, r3
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0xa8>
 800363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003640:	4298      	cmp	r0, r3
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0xa8>
 8003644:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003648:	4298      	cmp	r0, r3
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0xa8>
 800364c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003650:	4298      	cmp	r0, r3
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0xa8>
 8003654:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003658:	4298      	cmp	r0, r3
 800365a:	d101      	bne.n	8003660 <TIM_Base_SetConfig+0xac>
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	690b      	ldr	r3, [r1, #16]
 800365e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003660:	2301      	movs	r3, #1
 8003662:	6143      	str	r3, [r0, #20]
}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40014000 	.word	0x40014000

08003670 <HAL_TIM_Base_Init>:
{
 8003670:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003672:	4604      	mov	r4, r0
 8003674:	b350      	cbz	r0, 80036cc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003676:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800367a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800367e:	b91b      	cbnz	r3, 8003688 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003680:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003684:	f7fe f8d4 	bl	8001830 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003690:	1d21      	adds	r1, r4, #4
 8003692:	f7ff ff8f 	bl	80035b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003696:	2301      	movs	r3, #1
 8003698:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800369c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80036a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80036a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80036aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80036ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80036ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80036c2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80036c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80036ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036cc:	2001      	movs	r0, #1
 80036ce:	e7fc      	b.n	80036ca <HAL_TIM_Base_Init+0x5a>

080036d0 <HAL_TIM_PWM_Init>:
{
 80036d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80036d2:	4604      	mov	r4, r0
 80036d4:	b350      	cbz	r0, 800372c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036de:	b91b      	cbnz	r3, 80036e8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80036e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80036e4:	f7ff ff64 	bl	80035b0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	1d21      	adds	r1, r4, #4
 80036f2:	f7ff ff5f 	bl	80035b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80036fc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003702:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003706:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800370a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800370e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800371a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800371e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003722:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800372a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800372c:	2001      	movs	r0, #1
 800372e:	e7fc      	b.n	800372a <HAL_TIM_PWM_Init+0x5a>

08003730 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003730:	6a03      	ldr	r3, [r0, #32]
 8003732:	f023 0310 	bic.w	r3, r3, #16
 8003736:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003738:	6a03      	ldr	r3, [r0, #32]
{
 800373a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800373c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800373e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003742:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003746:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800374a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800374e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003750:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003754:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003758:	4d16      	ldr	r5, [pc, #88]	; (80037b4 <TIM_OC2_SetConfig+0x84>)
 800375a:	42a8      	cmp	r0, r5
 800375c:	d003      	beq.n	8003766 <TIM_OC2_SetConfig+0x36>
 800375e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003762:	42a8      	cmp	r0, r5
 8003764:	d10d      	bne.n	8003782 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003766:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800376c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	4d10      	ldr	r5, [pc, #64]	; (80037b4 <TIM_OC2_SetConfig+0x84>)
 8003772:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003778:	d00e      	beq.n	8003798 <TIM_OC2_SetConfig+0x68>
 800377a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800377e:	42a8      	cmp	r0, r5
 8003780:	d00a      	beq.n	8003798 <TIM_OC2_SetConfig+0x68>
 8003782:	4d0d      	ldr	r5, [pc, #52]	; (80037b8 <TIM_OC2_SetConfig+0x88>)
 8003784:	42a8      	cmp	r0, r5
 8003786:	d007      	beq.n	8003798 <TIM_OC2_SetConfig+0x68>
 8003788:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800378c:	42a8      	cmp	r0, r5
 800378e:	d003      	beq.n	8003798 <TIM_OC2_SetConfig+0x68>
 8003790:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003794:	42a8      	cmp	r0, r5
 8003796:	d106      	bne.n	80037a6 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003798:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800379c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 80037a0:	4334      	orrs	r4, r6
 80037a2:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80037a6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80037a8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80037aa:	684a      	ldr	r2, [r1, #4]
 80037ac:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80037ae:	6203      	str	r3, [r0, #32]
}
 80037b0:	bd70      	pop	{r4, r5, r6, pc}
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40014000 	.word	0x40014000

080037bc <HAL_TIM_PWM_ConfigChannel>:
{
 80037bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80037be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80037c2:	2b01      	cmp	r3, #1
{
 80037c4:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80037c6:	d074      	beq.n	80038b2 <HAL_TIM_PWM_ConfigChannel+0xf6>
 80037c8:	2301      	movs	r3, #1
  switch (Channel)
 80037ca:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 80037cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80037d0:	d04f      	beq.n	8003872 <HAL_TIM_PWM_ConfigChannel+0xb6>
 80037d2:	d809      	bhi.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x2c>
 80037d4:	2a04      	cmp	r2, #4
 80037d6:	d02c      	beq.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x76>
 80037d8:	2a08      	cmp	r2, #8
 80037da:	d03a      	beq.n	8003852 <HAL_TIM_PWM_ConfigChannel+0x96>
 80037dc:	b1c2      	cbz	r2, 8003810 <HAL_TIM_PWM_ConfigChannel+0x54>
 80037de:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80037e0:	2300      	movs	r3, #0
 80037e2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80037e8:	2a10      	cmp	r2, #16
 80037ea:	d052      	beq.n	8003892 <HAL_TIM_PWM_ConfigChannel+0xd6>
 80037ec:	2a14      	cmp	r2, #20
 80037ee:	d1f6      	bne.n	80037de <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037f0:	6800      	ldr	r0, [r0, #0]
 80037f2:	f7ff fe77 	bl	80034e4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037f8:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037fe:	6503      	str	r3, [r0, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003800:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003806:	6503      	str	r3, [r0, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003808:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800380a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800380e:	e04e      	b.n	80038ae <HAL_TIM_PWM_ConfigChannel+0xf2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003810:	6800      	ldr	r0, [r0, #0]
 8003812:	f7ff fd5d 	bl	80032d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003816:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003818:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800381a:	f043 0308 	orr.w	r3, r3, #8
 800381e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003820:	6983      	ldr	r3, [r0, #24]
 8003822:	f023 0304 	bic.w	r3, r3, #4
 8003826:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003828:	6983      	ldr	r3, [r0, #24]
 800382a:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800382c:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2000      	movs	r0, #0
      break;
 8003830:	e7d6      	b.n	80037e0 <HAL_TIM_PWM_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003832:	6800      	ldr	r0, [r0, #0]
 8003834:	f7ff ff7c 	bl	8003730 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003838:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800383a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800383c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003840:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003842:	6983      	ldr	r3, [r0, #24]
 8003844:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003848:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800384a:	6983      	ldr	r3, [r0, #24]
 800384c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003850:	e7ec      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003852:	6800      	ldr	r0, [r0, #0]
 8003854:	f7ff fd88 	bl	8003368 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003858:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800385a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800385c:	f043 0308 	orr.w	r3, r3, #8
 8003860:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003862:	69c3      	ldr	r3, [r0, #28]
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800386a:	69c3      	ldr	r3, [r0, #28]
 800386c:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800386e:	61c3      	str	r3, [r0, #28]
      break;
 8003870:	e7dd      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003872:	6800      	ldr	r0, [r0, #0]
 8003874:	f7ff fdbc 	bl	80033f0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003878:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800387a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800387c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003880:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003882:	69c3      	ldr	r3, [r0, #28]
 8003884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003888:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800388a:	69c3      	ldr	r3, [r0, #28]
 800388c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003890:	e7ed      	b.n	800386e <HAL_TIM_PWM_ConfigChannel+0xb2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003892:	6800      	ldr	r0, [r0, #0]
 8003894:	f7ff fdf2 	bl	800347c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003898:	6d03      	ldr	r3, [r0, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800389a:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	6503      	str	r3, [r0, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	6503      	str	r3, [r0, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038ac:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038ae:	6503      	str	r3, [r0, #80]	; 0x50
 80038b0:	e7bd      	b.n	800382e <HAL_TIM_PWM_ConfigChannel+0x72>
  __HAL_LOCK(htim);
 80038b2:	2002      	movs	r0, #2
 80038b4:	e797      	b.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x2a>

080038b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b6:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038ba:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038bc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80038c4:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c6:	6083      	str	r3, [r0, #8]
}
 80038c8:	bd10      	pop	{r4, pc}
	...

080038cc <HAL_TIM_ConfigClockSource>:
{
 80038cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80038ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038d2:	2b01      	cmp	r3, #1
{
 80038d4:	4604      	mov	r4, r0
 80038d6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80038da:	f000 80aa 	beq.w	8003a32 <HAL_TIM_ConfigClockSource+0x166>
 80038de:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80038e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80038e8:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ea:	4b53      	ldr	r3, [pc, #332]	; (8003a38 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpsmcr = htim->Instance->SMCR;
 80038ec:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ee:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80038f0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80038f2:	680b      	ldr	r3, [r1, #0]
 80038f4:	2b70      	cmp	r3, #112	; 0x70
 80038f6:	d056      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0xda>
 80038f8:	d83c      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0xa8>
 80038fa:	2b50      	cmp	r3, #80	; 0x50
 80038fc:	d067      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x102>
 80038fe:	d81d      	bhi.n	800393c <HAL_TIM_ConfigClockSource+0x70>
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d07d      	beq.n	8003a00 <HAL_TIM_ConfigClockSource+0x134>
 8003904:	d806      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x48>
 8003906:	2b20      	cmp	r3, #32
 8003908:	d00e      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0x5c>
 800390a:	d80b      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x58>
 800390c:	f033 0210 	bics.w	r2, r3, #16
 8003910:	d00a      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0x5c>
 8003912:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_READY;
 8003914:	2301      	movs	r3, #1
 8003916:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800391a:	2300      	movs	r3, #0
 800391c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003920:	4610      	mov	r0, r2
 8003922:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d1f4      	bne.n	8003912 <HAL_TIM_ConfigClockSource+0x46>
  tmpsmcr = TIMx->SMCR;
 8003928:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800392a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800392e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003932:	431a      	orrs	r2, r3
 8003934:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8003938:	6082      	str	r2, [r0, #8]
 800393a:	e03d      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0xec>
  switch (sClockSourceConfig->ClockSource)
 800393c:	2b60      	cmp	r3, #96	; 0x60
 800393e:	d1e9      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x48>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003940:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003942:	684d      	ldr	r5, [r1, #4]
 8003944:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800394e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003950:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003954:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003958:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800395c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003960:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003962:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003964:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003966:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800396e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003972:	e020      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 8003974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003978:	d020      	beq.n	80039bc <HAL_TIM_ConfigClockSource+0xf0>
 800397a:	d804      	bhi.n	8003986 <HAL_TIM_ConfigClockSource+0xba>
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8003980:	bf18      	it	ne
 8003982:	2201      	movne	r2, #1
 8003984:	e7c6      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x48>
  switch (sClockSourceConfig->ClockSource)
 8003986:	492d      	ldr	r1, [pc, #180]	; (8003a3c <HAL_TIM_ConfigClockSource+0x170>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d0cd      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0x5c>
 800398c:	d806      	bhi.n	800399c <HAL_TIM_ConfigClockSource+0xd0>
 800398e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003992:	d0c9      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0x5c>
 8003994:	3910      	subs	r1, #16
 8003996:	428b      	cmp	r3, r1
 8003998:	d0c6      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0x5c>
 800399a:	e7bb      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x48>
 800399c:	4928      	ldr	r1, [pc, #160]	; (8003a40 <HAL_TIM_ConfigClockSource+0x174>)
 800399e:	428b      	cmp	r3, r1
 80039a0:	d0c2      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0x5c>
 80039a2:	3130      	adds	r1, #48	; 0x30
 80039a4:	e7f7      	b.n	8003996 <HAL_TIM_ConfigClockSource+0xca>
      TIM_ETR_SetConfig(htim->Instance,
 80039a6:	68cb      	ldr	r3, [r1, #12]
 80039a8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80039ac:	f7ff ff83 	bl	80038b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039b0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2200      	movs	r2, #0
}
 80039ba:	e7ab      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x48>
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	68cb      	ldr	r3, [r1, #12]
 80039be:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80039c2:	f7ff ff78 	bl	80038b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c6:	6883      	ldr	r3, [r0, #8]
 80039c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039cc:	e7f3      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0xea>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	684a      	ldr	r2, [r1, #4]
 80039d0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80039d2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d4:	6a03      	ldr	r3, [r0, #32]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039dc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039de:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80039ea:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80039ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039ee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039fa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039fe:	e7da      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0xea>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a00:	684a      	ldr	r2, [r1, #4]
 8003a02:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a04:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a06:	6a03      	ldr	r3, [r0, #32]
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a10:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a1c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003a1e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a20:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a22:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a2c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a30:	e7c1      	b.n	80039b6 <HAL_TIM_ConfigClockSource+0xea>
  __HAL_LOCK(htim);
 8003a32:	461a      	mov	r2, r3
 8003a34:	e774      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x54>
 8003a36:	bf00      	nop
 8003a38:	ffce0088 	.word	0xffce0088
 8003a3c:	00100030 	.word	0x00100030
 8003a40:	00100040 	.word	0x00100040

08003a44 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a44:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a46:	f001 011f 	and.w	r1, r1, #31
{
 8003a4a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a4c:	2401      	movs	r4, #1
 8003a4e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003a50:	ea23 0304 	bic.w	r3, r3, r4
 8003a54:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a56:	6a03      	ldr	r3, [r0, #32]
 8003a58:	408a      	lsls	r2, r1
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	6202      	str	r2, [r0, #32]
}
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a60:	2908      	cmp	r1, #8
{
 8003a62:	b508      	push	{r3, lr}
 8003a64:	d018      	beq.n	8003a98 <HAL_TIM_OC_Start+0x38>
 8003a66:	d805      	bhi.n	8003a74 <HAL_TIM_OC_Start+0x14>
 8003a68:	b159      	cbz	r1, 8003a82 <HAL_TIM_OC_Start+0x22>
 8003a6a:	2904      	cmp	r1, #4
 8003a6c:	d011      	beq.n	8003a92 <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a6e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8003a72:	e013      	b.n	8003a9c <HAL_TIM_OC_Start+0x3c>
 8003a74:	290c      	cmp	r1, #12
 8003a76:	d023      	beq.n	8003ac0 <HAL_TIM_OC_Start+0x60>
 8003a78:	2910      	cmp	r1, #16
 8003a7a:	d1f8      	bne.n	8003a6e <HAL_TIM_OC_Start+0xe>
 8003a7c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8003a80:	e00c      	b.n	8003a9c <HAL_TIM_OC_Start+0x3c>
 8003a82:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003a86:	3b01      	subs	r3, #1
 8003a88:	bf18      	it	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	b183      	cbz	r3, 8003ab0 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8003a8e:	2001      	movs	r0, #1
 8003a90:	e042      	b.n	8003b18 <HAL_TIM_OC_Start+0xb8>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a92:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003a96:	e7f6      	b.n	8003a86 <HAL_TIM_OC_Start+0x26>
 8003a98:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	bf18      	it	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f3      	bne.n	8003a8e <HAL_TIM_OC_Start+0x2e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa6:	2908      	cmp	r1, #8
 8003aa8:	f04f 0302 	mov.w	r3, #2
 8003aac:	d038      	beq.n	8003b20 <HAL_TIM_OC_Start+0xc0>
 8003aae:	d80a      	bhi.n	8003ac6 <HAL_TIM_OC_Start+0x66>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	b179      	cbz	r1, 8003ad4 <HAL_TIM_OC_Start+0x74>
 8003ab4:	2904      	cmp	r1, #4
 8003ab6:	d030      	beq.n	8003b1a <HAL_TIM_OC_Start+0xba>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8003abe:	e00b      	b.n	8003ad8 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ac0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003ac4:	e7ea      	b.n	8003a9c <HAL_TIM_OC_Start+0x3c>
 8003ac6:	290c      	cmp	r1, #12
 8003ac8:	d02d      	beq.n	8003b26 <HAL_TIM_OC_Start+0xc6>
 8003aca:	2910      	cmp	r1, #16
 8003acc:	d1f4      	bne.n	8003ab8 <HAL_TIM_OC_Start+0x58>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ace:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8003ad2:	e001      	b.n	8003ad8 <HAL_TIM_OC_Start+0x78>
 8003ad4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad8:	6800      	ldr	r0, [r0, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f7ff ffb2 	bl	8003a44 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <HAL_TIM_OC_Start+0x10c>)
 8003ae2:	4298      	cmp	r0, r3
 8003ae4:	d022      	beq.n	8003b2c <HAL_TIM_OC_Start+0xcc>
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	4298      	cmp	r0, r3
 8003aec:	d01e      	beq.n	8003b2c <HAL_TIM_OC_Start+0xcc>
 8003aee:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003af2:	4298      	cmp	r0, r3
 8003af4:	d01a      	beq.n	8003b2c <HAL_TIM_OC_Start+0xcc>
 8003af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afa:	4298      	cmp	r0, r3
 8003afc:	d016      	beq.n	8003b2c <HAL_TIM_OC_Start+0xcc>
 8003afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b02:	4298      	cmp	r0, r3
 8003b04:	d012      	beq.n	8003b2c <HAL_TIM_OC_Start+0xcc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b06:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b0a:	d117      	bne.n	8003b3c <HAL_TIM_OC_Start+0xdc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0c:	6882      	ldr	r2, [r0, #8]
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_TIM_OC_Start+0x110>)
 8003b10:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b12:	2b06      	cmp	r3, #6
 8003b14:	d126      	bne.n	8003b64 <HAL_TIM_OC_Start+0x104>
  return HAL_OK;
 8003b16:	2000      	movs	r0, #0
}
 8003b18:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b1a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003b1e:	e7db      	b.n	8003ad8 <HAL_TIM_OC_Start+0x78>
 8003b20:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003b24:	e7d8      	b.n	8003ad8 <HAL_TIM_OC_Start+0x78>
 8003b26:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003b2a:	e7d5      	b.n	8003ad8 <HAL_TIM_OC_Start+0x78>
    __HAL_TIM_MOE_ENABLE(htim);
 8003b2c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b32:	6443      	str	r3, [r0, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <HAL_TIM_OC_Start+0x10c>)
 8003b36:	4298      	cmp	r0, r3
 8003b38:	d1e5      	bne.n	8003b06 <HAL_TIM_OC_Start+0xa6>
 8003b3a:	e7e7      	b.n	8003b0c <HAL_TIM_OC_Start+0xac>
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <HAL_TIM_OC_Start+0x114>)
 8003b3e:	4298      	cmp	r0, r3
 8003b40:	d0e4      	beq.n	8003b0c <HAL_TIM_OC_Start+0xac>
 8003b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b46:	4298      	cmp	r0, r3
 8003b48:	d0e0      	beq.n	8003b0c <HAL_TIM_OC_Start+0xac>
 8003b4a:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8003b4e:	4298      	cmp	r0, r3
 8003b50:	d0dc      	beq.n	8003b0c <HAL_TIM_OC_Start+0xac>
 8003b52:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003b56:	4298      	cmp	r0, r3
 8003b58:	d0d8      	beq.n	8003b0c <HAL_TIM_OC_Start+0xac>
    __HAL_TIM_ENABLE(htim);
 8003b5a:	6803      	ldr	r3, [r0, #0]
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6003      	str	r3, [r0, #0]
 8003b62:	e7d8      	b.n	8003b16 <HAL_TIM_OC_Start+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b68:	d1f7      	bne.n	8003b5a <HAL_TIM_OC_Start+0xfa>
 8003b6a:	e7d4      	b.n	8003b16 <HAL_TIM_OC_Start+0xb6>
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	00010007 	.word	0x00010007
 8003b74:	40000400 	.word	0x40000400

08003b78 <HAL_TIM_PWM_Start>:
 8003b78:	f7ff bf72 	b.w	8003a60 <HAL_TIM_OC_Start>

08003b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b7c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	f04f 0302 	mov.w	r3, #2
 8003b88:	d037      	beq.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b8e:	4d1c      	ldr	r5, [pc, #112]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpcr2 = htim->Instance->CR2;
 8003b90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b92:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8003b94:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003b96:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8003b9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b9e:	42ab      	cmp	r3, r5
 8003ba0:	d103      	bne.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ba2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ba4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ba8:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003baa:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bac:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003bb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bb4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb8:	4a11      	ldr	r2, [pc, #68]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d012      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d00f      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003bc4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003bcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003bd4:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003bdc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d104      	bne.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be6:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bea:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003bfa:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003bfc:	bd30      	pop	{r4, r5, pc}
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00

08003c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c08:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c0a:	6921      	ldr	r1, [r4, #16]
 8003c0c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c0e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c10:	69c0      	ldr	r0, [r0, #28]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	6961      	ldr	r1, [r4, #20]
 8003c16:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c18:	4993      	ldr	r1, [pc, #588]	; (8003e68 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c1a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c1c:	4029      	ands	r1, r5
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68e1      	ldr	r1, [r4, #12]
 8003c26:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c2e:	4a8f      	ldr	r2, [pc, #572]	; (8003e6c <UART_SetConfig+0x268>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c30:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c32:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c34:	bf1c      	itt	ne
 8003c36:	6a22      	ldrne	r2, [r4, #32]
 8003c38:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8003c40:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c4c:	f022 020f 	bic.w	r2, r2, #15
 8003c50:	430a      	orrs	r2, r1
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c54:	4a86      	ldr	r2, [pc, #536]	; (8003e70 <UART_SetConfig+0x26c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d117      	bne.n	8003c8a <UART_SetConfig+0x86>
 8003c5a:	4b86      	ldr	r3, [pc, #536]	; (8003e74 <UART_SetConfig+0x270>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	f200 80da 	bhi.w	8003e20 <UART_SetConfig+0x21c>
 8003c6c:	4a82      	ldr	r2, [pc, #520]	; (8003e78 <UART_SetConfig+0x274>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c74:	f040 80af 	bne.w	8003dd6 <UART_SetConfig+0x1d2>
  {
    switch (clocksource)
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d822      	bhi.n	8003cc2 <UART_SetConfig+0xbe>
 8003c7c:	e8df f003 	tbb	[pc, r3]
 8003c80:	21a9d38a 	.word	0x21a9d38a
 8003c84:	212121cd 	.word	0x212121cd
 8003c88:	8e          	.byte	0x8e
 8003c89:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c8a:	4a7c      	ldr	r2, [pc, #496]	; (8003e7c <UART_SetConfig+0x278>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d106      	bne.n	8003c9e <UART_SetConfig+0x9a>
 8003c90:	4b78      	ldr	r3, [pc, #480]	; (8003e74 <UART_SetConfig+0x270>)
 8003c92:	4a7b      	ldr	r2, [pc, #492]	; (8003e80 <UART_SetConfig+0x27c>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	e7e7      	b.n	8003c6e <UART_SetConfig+0x6a>
 8003c9e:	4a79      	ldr	r2, [pc, #484]	; (8003e84 <UART_SetConfig+0x280>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d118      	bne.n	8003cd6 <UART_SetConfig+0xd2>
 8003ca4:	4b73      	ldr	r3, [pc, #460]	; (8003e74 <UART_SetConfig+0x270>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	f000 80bc 	beq.w	8003e2c <UART_SetConfig+0x228>
 8003cb4:	d807      	bhi.n	8003cc6 <UART_SetConfig+0xc2>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80bd 	beq.w	8003e36 <UART_SetConfig+0x232>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	f000 80a9 	beq.w	8003e14 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	e037      	b.n	8003d36 <UART_SetConfig+0x132>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc6:	2b30      	cmp	r3, #48	; 0x30
 8003cc8:	d1fb      	bne.n	8003cc2 <UART_SetConfig+0xbe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003cce:	d065      	beq.n	8003d9c <UART_SetConfig+0x198>
 8003cd0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003cd4:	e0b7      	b.n	8003e46 <UART_SetConfig+0x242>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd6:	4a6c      	ldr	r2, [pc, #432]	; (8003e88 <UART_SetConfig+0x284>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d10f      	bne.n	8003cfc <UART_SetConfig+0xf8>
 8003cdc:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <UART_SetConfig+0x270>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	f000 80a0 	beq.w	8003e2c <UART_SetConfig+0x228>
 8003cec:	d804      	bhi.n	8003cf8 <UART_SetConfig+0xf4>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80a1 	beq.w	8003e36 <UART_SetConfig+0x232>
 8003cf4:	2b40      	cmp	r3, #64	; 0x40
 8003cf6:	e7e2      	b.n	8003cbe <UART_SetConfig+0xba>
 8003cf8:	2bc0      	cmp	r3, #192	; 0xc0
 8003cfa:	e7e5      	b.n	8003cc8 <UART_SetConfig+0xc4>
 8003cfc:	4a5b      	ldr	r2, [pc, #364]	; (8003e6c <UART_SetConfig+0x268>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d1df      	bne.n	8003cc2 <UART_SetConfig+0xbe>
 8003d02:	4b5c      	ldr	r3, [pc, #368]	; (8003e74 <UART_SetConfig+0x270>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d10:	d018      	beq.n	8003d44 <UART_SetConfig+0x140>
 8003d12:	d806      	bhi.n	8003d22 <UART_SetConfig+0x11e>
 8003d14:	b15b      	cbz	r3, 8003d2e <UART_SetConfig+0x12a>
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d1a:	d1d2      	bne.n	8003cc2 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1c:	f7ff f84c 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
        break;
 8003d20:	e007      	b.n	8003d32 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d26:	d1cc      	bne.n	8003cc2 <UART_SetConfig+0xbe>
        pclk = (uint32_t) LSE_VALUE;
 8003d28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003d2c:	e00b      	b.n	8003d46 <UART_SetConfig+0x142>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2e:	f7ff f96d 	bl	800300c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003d32:	b940      	cbnz	r0, 8003d46 <UART_SetConfig+0x142>
 8003d34:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8003d36:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003d3a:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d3c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003d3e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003d44:	4851      	ldr	r0, [pc, #324]	; (8003e8c <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d46:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d48:	4b51      	ldr	r3, [pc, #324]	; (8003e90 <UART_SetConfig+0x28c>)
 8003d4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d4c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d50:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003d54:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d8b2      	bhi.n	8003cc2 <UART_SetConfig+0xbe>
 8003d5c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003d60:	d8af      	bhi.n	8003cc2 <UART_SetConfig+0xbe>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d62:	2300      	movs	r3, #0
 8003d64:	4619      	mov	r1, r3
 8003d66:	f7fc ff47 	bl	8000bf8 <__aeabi_uldivmod>
 8003d6a:	0209      	lsls	r1, r1, #8
 8003d6c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003d70:	086b      	lsrs	r3, r5, #1
 8003d72:	0200      	lsls	r0, r0, #8
 8003d74:	18c0      	adds	r0, r0, r3
 8003d76:	462a      	mov	r2, r5
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	f141 0100 	adc.w	r1, r1, #0
 8003d80:	f7fc ff3a 	bl	8000bf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d84:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <UART_SetConfig+0x290>)
 8003d86:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d899      	bhi.n	8003cc2 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	60d8      	str	r0, [r3, #12]
 8003d92:	e7cf      	b.n	8003d34 <UART_SetConfig+0x130>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7ff f93a 	bl	800300c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d0cb      	beq.n	8003d34 <UART_SetConfig+0x130>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d9c:	6861      	ldr	r1, [r4, #4]
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	; (8003e90 <UART_SetConfig+0x28c>)
 8003da0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003da2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003da6:	fbb0 f2f2 	udiv	r2, r0, r2
 8003daa:	084b      	lsrs	r3, r1, #1
 8003dac:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db0:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db4:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db8:	f1a3 0110 	sub.w	r1, r3, #16
 8003dbc:	4291      	cmp	r1, r2
 8003dbe:	d880      	bhi.n	8003cc2 <UART_SetConfig+0xbe>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc0:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003dc4:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc6:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dc8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60cb      	str	r3, [r1, #12]
 8003dd0:	e7b0      	b.n	8003d34 <UART_SetConfig+0x130>
        pclk = (uint32_t) HSI_VALUE;
 8003dd2:	482e      	ldr	r0, [pc, #184]	; (8003e8c <UART_SetConfig+0x288>)
 8003dd4:	e7e2      	b.n	8003d9c <UART_SetConfig+0x198>
    switch (clocksource)
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	f63f af73 	bhi.w	8003cc2 <UART_SetConfig+0xbe>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <UART_SetConfig+0x1e0>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e3d 	.word	0x08003e3d
 8003de8:	08003e09 	.word	0x08003e09
 8003dec:	08003e33 	.word	0x08003e33
 8003df0:	08003cc3 	.word	0x08003cc3
 8003df4:	08003e0f 	.word	0x08003e0f
 8003df8:	08003cc3 	.word	0x08003cc3
 8003dfc:	08003cc3 	.word	0x08003cc3
 8003e00:	08003cc3 	.word	0x08003cc3
 8003e04:	08003cd1 	.word	0x08003cd1
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e08:	f7ff f912 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
        break;
 8003e0c:	e018      	b.n	8003e40 <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fe ffd3 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
        break;
 8003e12:	e015      	b.n	8003e40 <UART_SetConfig+0x23c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e18:	d1f9      	bne.n	8003e0e <UART_SetConfig+0x20a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe ffcd 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
        break;
 8003e1e:	e7bb      	b.n	8003d98 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e24:	d1f0      	bne.n	8003e08 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e26:	f7ff f903 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
        break;
 8003e2a:	e7b5      	b.n	8003d98 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e30:	d0cf      	beq.n	8003dd2 <UART_SetConfig+0x1ce>
        pclk = (uint32_t) HSI_VALUE;
 8003e32:	4816      	ldr	r0, [pc, #88]	; (8003e8c <UART_SetConfig+0x288>)
 8003e34:	e007      	b.n	8003e46 <UART_SetConfig+0x242>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e36:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e3a:	d0ab      	beq.n	8003d94 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e3c:	f7ff f8e6 	bl	800300c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f43f af77 	beq.w	8003d34 <UART_SetConfig+0x130>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e4a:	4a11      	ldr	r2, [pc, #68]	; (8003e90 <UART_SetConfig+0x28c>)
 8003e4c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003e50:	fbb0 f0f2 	udiv	r0, r0, r2
 8003e54:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003e58:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003e60:	f1a0 0210 	sub.w	r2, r0, #16
 8003e64:	e791      	b.n	8003d8a <UART_SetConfig+0x186>
 8003e66:	bf00      	nop
 8003e68:	cfff69f3 	.word	0xcfff69f3
 8003e6c:	40008000 	.word	0x40008000
 8003e70:	40013800 	.word	0x40013800
 8003e74:	40021000 	.word	0x40021000
 8003e78:	08006f19 	.word	0x08006f19
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	08006f1c 	.word	0x08006f1c
 8003e84:	40004800 	.word	0x40004800
 8003e88:	40004c00 	.word	0x40004c00
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	08006f2a 	.word	0x08006f2a
 8003e94:	000ffcff 	.word	0x000ffcff

08003e98 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e98:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e9a:	07da      	lsls	r2, r3, #31
{
 8003e9c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e9e:	d506      	bpl.n	8003eae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ea0:	6801      	ldr	r1, [r0, #0]
 8003ea2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003ea4:	684a      	ldr	r2, [r1, #4]
 8003ea6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003eaa:	4322      	orrs	r2, r4
 8003eac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eae:	079c      	lsls	r4, r3, #30
 8003eb0:	d506      	bpl.n	8003ec0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb2:	6801      	ldr	r1, [r0, #0]
 8003eb4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003eb6:	684a      	ldr	r2, [r1, #4]
 8003eb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ebc:	4322      	orrs	r2, r4
 8003ebe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec0:	0759      	lsls	r1, r3, #29
 8003ec2:	d506      	bpl.n	8003ed2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec4:	6801      	ldr	r1, [r0, #0]
 8003ec6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003ec8:	684a      	ldr	r2, [r1, #4]
 8003eca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ece:	4322      	orrs	r2, r4
 8003ed0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ed2:	071a      	lsls	r2, r3, #28
 8003ed4:	d506      	bpl.n	8003ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed6:	6801      	ldr	r1, [r0, #0]
 8003ed8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003eda:	684a      	ldr	r2, [r1, #4]
 8003edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee0:	4322      	orrs	r2, r4
 8003ee2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee4:	06dc      	lsls	r4, r3, #27
 8003ee6:	d506      	bpl.n	8003ef6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee8:	6801      	ldr	r1, [r0, #0]
 8003eea:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ef2:	4322      	orrs	r2, r4
 8003ef4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef6:	0699      	lsls	r1, r3, #26
 8003ef8:	d506      	bpl.n	8003f08 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efa:	6801      	ldr	r1, [r0, #0]
 8003efc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003efe:	688a      	ldr	r2, [r1, #8]
 8003f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f04:	4322      	orrs	r2, r4
 8003f06:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f08:	065a      	lsls	r2, r3, #25
 8003f0a:	d50f      	bpl.n	8003f2c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f0c:	6801      	ldr	r1, [r0, #0]
 8003f0e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f10:	684a      	ldr	r2, [r1, #4]
 8003f12:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f16:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f18:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f1c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f1e:	d105      	bne.n	8003f2c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f20:	684a      	ldr	r2, [r1, #4]
 8003f22:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003f24:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003f28:	4322      	orrs	r2, r4
 8003f2a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	d506      	bpl.n	8003f3e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f30:	6802      	ldr	r2, [r0, #0]
 8003f32:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003f34:	6853      	ldr	r3, [r2, #4]
 8003f36:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6053      	str	r3, [r2, #4]
  }
}
 8003f3e:	bd10      	pop	{r4, pc}

08003f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f44:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460e      	mov	r6, r1
 8003f4c:	4615      	mov	r5, r2
 8003f4e:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f50:	6822      	ldr	r2, [r4, #0]
 8003f52:	69d3      	ldr	r3, [r2, #28]
 8003f54:	ea36 0303 	bics.w	r3, r6, r3
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	42ab      	cmp	r3, r5
 8003f60:	d001      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003f62:	2000      	movs	r0, #0
 8003f64:	e027      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003f6a:	d0f2      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6c:	f7fd fdea 	bl	8001b44 <HAL_GetTick>
 8003f70:	1bc0      	subs	r0, r0, r7
 8003f72:	4540      	cmp	r0, r8
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	d802      	bhi.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x3e>
 8003f78:	f1b8 0f00 	cmp.w	r8, #0
 8003f7c:	d11d      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	e840 3200 	strex	r2, r3, [r0]
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	d1f7      	bne.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	f100 0308 	add.w	r3, r0, #8
 8003f92:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	f100 0108 	add.w	r1, r0, #8
 8003f9e:	e841 3200 	strex	r2, r3, [r1]
 8003fa2:	2a00      	cmp	r2, #0
 8003fa4:	d1f3      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003fac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8003fb0:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8003fb4:	2003      	movs	r0, #3
}
 8003fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fba:	6803      	ldr	r3, [r0, #0]
 8003fbc:	075a      	lsls	r2, r3, #29
 8003fbe:	d5c7      	bpl.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fc0:	69c3      	ldr	r3, [r0, #28]
 8003fc2:	051b      	lsls	r3, r3, #20
 8003fc4:	d5c4      	bpl.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fca:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003fd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	e840 3200 	strex	r2, r3, [r0]
 8003fd8:	2a00      	cmp	r2, #0
 8003fda:	d1f7      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	f100 0308 	add.w	r3, r0, #8
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	f100 0108 	add.w	r1, r0, #8
 8003fec:	e841 3200 	strex	r2, r3, [r1]
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	d1f3      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ffe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004002:	e7d5      	b.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x70>

08004004 <UART_CheckIdleState>:
{
 8004004:	b530      	push	{r4, r5, lr}
 8004006:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	2500      	movs	r5, #0
{
 800400a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8004010:	f7fd fd98 	bl	8001b44 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004014:	6822      	ldr	r2, [r4, #0]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800401a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401c:	d417      	bmi.n	800404e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	0752      	lsls	r2, r2, #29
 8004024:	d509      	bpl.n	800403a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004026:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800402a:	9200      	str	r2, [sp, #0]
 800402c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004030:	2200      	movs	r2, #0
 8004032:	4620      	mov	r0, r4
 8004034:	f7ff ff84 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8004038:	b9b0      	cbnz	r0, 8004068 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800403a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800403e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8004042:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004046:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404a:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 800404c:	e00d      	b.n	800406a <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800404e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004052:	9200      	str	r2, [sp, #0]
 8004054:	9003      	str	r0, [sp, #12]
 8004056:	462a      	mov	r2, r5
 8004058:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800405c:	4620      	mov	r0, r4
 800405e:	f7ff ff6f 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	2800      	cmp	r0, #0
 8004066:	d0da      	beq.n	800401e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004068:	2003      	movs	r0, #3
}
 800406a:	b005      	add	sp, #20
 800406c:	bd30      	pop	{r4, r5, pc}

0800406e <HAL_UART_Init>:
{
 800406e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004070:	4604      	mov	r4, r0
 8004072:	b350      	cbz	r0, 80040ca <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004074:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004078:	b91b      	cbnz	r3, 8004082 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800407a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800407e:	f7fd fcb5 	bl	80019ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004082:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004084:	2324      	movs	r3, #36	; 0x24
 8004086:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800408a:	6813      	ldr	r3, [r2, #0]
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004092:	4620      	mov	r0, r4
 8004094:	f7ff fdb6 	bl	8003c04 <UART_SetConfig>
 8004098:	2801      	cmp	r0, #1
 800409a:	d016      	beq.n	80040ca <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800409c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800409e:	b113      	cbz	r3, 80040a6 <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7ff fef9 	bl	8003e98 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80040be:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80040c0:	601a      	str	r2, [r3, #0]
}
 80040c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80040c6:	f7ff bf9d 	b.w	8004004 <UART_CheckIdleState>
}
 80040ca:	2001      	movs	r0, #1
 80040cc:	bd10      	pop	{r4, pc}
	...

080040d0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040d0:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 80040d2:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040d4:	b92b      	cbnz	r3, 80040e2 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80040dc:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80040e0:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040e2:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040e4:	4d09      	ldr	r5, [pc, #36]	; (800410c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040e6:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040e8:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80040ea:	4c09      	ldr	r4, [pc, #36]	; (8004110 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040ec:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040ee:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040f2:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80040f4:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80040fc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004100:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8004102:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800410a:	e7e7      	b.n	80040dc <UARTEx_SetNbDataToProcess+0xc>
 800410c:	08006f4a 	.word	0x08006f4a
 8004110:	08006f42 	.word	0x08006f42

08004114 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004114:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004118:	2b01      	cmp	r3, #1
 800411a:	d014      	beq.n	8004146 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800411c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800411e:	2324      	movs	r3, #36	; 0x24
 8004120:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004124:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800412e:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004136:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004138:	2220      	movs	r2, #32
 800413a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800413e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8004142:	4618      	mov	r0, r3
 8004144:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004146:	2002      	movs	r0, #2
}
 8004148:	4770      	bx	lr

0800414a <HAL_UARTEx_SetTxFifoThreshold>:
{
 800414a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800414c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004150:	2b01      	cmp	r3, #1
{
 8004152:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004154:	d017      	beq.n	8004186 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004156:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	2324      	movs	r3, #36	; 0x24
 800415a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800415e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004168:	68ab      	ldr	r3, [r5, #8]
 800416a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800416e:	4319      	orrs	r1, r3
 8004170:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004172:	f7ff ffad 	bl	80040d0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8004176:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004178:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800417a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800417e:	2000      	movs	r0, #0
 8004180:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8004184:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004186:	2002      	movs	r0, #2
 8004188:	e7fc      	b.n	8004184 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800418a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800418a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800418c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8004190:	2b01      	cmp	r3, #1
{
 8004192:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004194:	d017      	beq.n	80041c6 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004196:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004198:	2324      	movs	r3, #36	; 0x24
 800419a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800419e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80041a8:	68ab      	ldr	r3, [r5, #8]
 80041aa:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80041ae:	4319      	orrs	r1, r3
 80041b0:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80041b2:	f7ff ff8d 	bl	80040d0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80041b6:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041b8:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80041be:	2000      	movs	r0, #0
 80041c0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80041c4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80041c6:	2002      	movs	r0, #2
 80041c8:	e7fc      	b.n	80041c4 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

080041ca <__cvt>:
 80041ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041ce:	ec55 4b10 	vmov	r4, r5, d0
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	460e      	mov	r6, r1
 80041d6:	4619      	mov	r1, r3
 80041d8:	462b      	mov	r3, r5
 80041da:	bfbb      	ittet	lt
 80041dc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80041e0:	461d      	movlt	r5, r3
 80041e2:	2300      	movge	r3, #0
 80041e4:	232d      	movlt	r3, #45	; 0x2d
 80041e6:	700b      	strb	r3, [r1, #0]
 80041e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80041ee:	4691      	mov	r9, r2
 80041f0:	f023 0820 	bic.w	r8, r3, #32
 80041f4:	bfbc      	itt	lt
 80041f6:	4622      	movlt	r2, r4
 80041f8:	4614      	movlt	r4, r2
 80041fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041fe:	d005      	beq.n	800420c <__cvt+0x42>
 8004200:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004204:	d100      	bne.n	8004208 <__cvt+0x3e>
 8004206:	3601      	adds	r6, #1
 8004208:	2102      	movs	r1, #2
 800420a:	e000      	b.n	800420e <__cvt+0x44>
 800420c:	2103      	movs	r1, #3
 800420e:	ab03      	add	r3, sp, #12
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	ab02      	add	r3, sp, #8
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	ec45 4b10 	vmov	d0, r4, r5
 800421a:	4653      	mov	r3, sl
 800421c:	4632      	mov	r2, r6
 800421e:	f000 fe6b 	bl	8004ef8 <_dtoa_r>
 8004222:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004226:	4607      	mov	r7, r0
 8004228:	d102      	bne.n	8004230 <__cvt+0x66>
 800422a:	f019 0f01 	tst.w	r9, #1
 800422e:	d022      	beq.n	8004276 <__cvt+0xac>
 8004230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004234:	eb07 0906 	add.w	r9, r7, r6
 8004238:	d110      	bne.n	800425c <__cvt+0x92>
 800423a:	783b      	ldrb	r3, [r7, #0]
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d10a      	bne.n	8004256 <__cvt+0x8c>
 8004240:	2200      	movs	r2, #0
 8004242:	2300      	movs	r3, #0
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fc fc66 	bl	8000b18 <__aeabi_dcmpeq>
 800424c:	b918      	cbnz	r0, 8004256 <__cvt+0x8c>
 800424e:	f1c6 0601 	rsb	r6, r6, #1
 8004252:	f8ca 6000 	str.w	r6, [sl]
 8004256:	f8da 3000 	ldr.w	r3, [sl]
 800425a:	4499      	add	r9, r3
 800425c:	2200      	movs	r2, #0
 800425e:	2300      	movs	r3, #0
 8004260:	4620      	mov	r0, r4
 8004262:	4629      	mov	r1, r5
 8004264:	f7fc fc58 	bl	8000b18 <__aeabi_dcmpeq>
 8004268:	b108      	cbz	r0, 800426e <__cvt+0xa4>
 800426a:	f8cd 900c 	str.w	r9, [sp, #12]
 800426e:	2230      	movs	r2, #48	; 0x30
 8004270:	9b03      	ldr	r3, [sp, #12]
 8004272:	454b      	cmp	r3, r9
 8004274:	d307      	bcc.n	8004286 <__cvt+0xbc>
 8004276:	9b03      	ldr	r3, [sp, #12]
 8004278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800427a:	1bdb      	subs	r3, r3, r7
 800427c:	4638      	mov	r0, r7
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	b004      	add	sp, #16
 8004282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	9103      	str	r1, [sp, #12]
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e7f0      	b.n	8004270 <__cvt+0xa6>

0800428e <__exponent>:
 800428e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004290:	4603      	mov	r3, r0
 8004292:	2900      	cmp	r1, #0
 8004294:	bfb8      	it	lt
 8004296:	4249      	neglt	r1, r1
 8004298:	f803 2b02 	strb.w	r2, [r3], #2
 800429c:	bfb4      	ite	lt
 800429e:	222d      	movlt	r2, #45	; 0x2d
 80042a0:	222b      	movge	r2, #43	; 0x2b
 80042a2:	2909      	cmp	r1, #9
 80042a4:	7042      	strb	r2, [r0, #1]
 80042a6:	dd2a      	ble.n	80042fe <__exponent+0x70>
 80042a8:	f10d 0207 	add.w	r2, sp, #7
 80042ac:	4617      	mov	r7, r2
 80042ae:	260a      	movs	r6, #10
 80042b0:	4694      	mov	ip, r2
 80042b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80042b6:	fb06 1415 	mls	r4, r6, r5, r1
 80042ba:	3430      	adds	r4, #48	; 0x30
 80042bc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80042c0:	460c      	mov	r4, r1
 80042c2:	2c63      	cmp	r4, #99	; 0x63
 80042c4:	f102 32ff 	add.w	r2, r2, #4294967295
 80042c8:	4629      	mov	r1, r5
 80042ca:	dcf1      	bgt.n	80042b0 <__exponent+0x22>
 80042cc:	3130      	adds	r1, #48	; 0x30
 80042ce:	f1ac 0402 	sub.w	r4, ip, #2
 80042d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80042d6:	1c41      	adds	r1, r0, #1
 80042d8:	4622      	mov	r2, r4
 80042da:	42ba      	cmp	r2, r7
 80042dc:	d30a      	bcc.n	80042f4 <__exponent+0x66>
 80042de:	f10d 0209 	add.w	r2, sp, #9
 80042e2:	eba2 020c 	sub.w	r2, r2, ip
 80042e6:	42bc      	cmp	r4, r7
 80042e8:	bf88      	it	hi
 80042ea:	2200      	movhi	r2, #0
 80042ec:	4413      	add	r3, r2
 80042ee:	1a18      	subs	r0, r3, r0
 80042f0:	b003      	add	sp, #12
 80042f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80042f8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80042fc:	e7ed      	b.n	80042da <__exponent+0x4c>
 80042fe:	2330      	movs	r3, #48	; 0x30
 8004300:	3130      	adds	r1, #48	; 0x30
 8004302:	7083      	strb	r3, [r0, #2]
 8004304:	70c1      	strb	r1, [r0, #3]
 8004306:	1d03      	adds	r3, r0, #4
 8004308:	e7f1      	b.n	80042ee <__exponent+0x60>
	...

0800430c <_printf_float>:
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	ed2d 8b02 	vpush	{d8}
 8004314:	b08d      	sub	sp, #52	; 0x34
 8004316:	460c      	mov	r4, r1
 8004318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800431c:	4616      	mov	r6, r2
 800431e:	461f      	mov	r7, r3
 8004320:	4605      	mov	r5, r0
 8004322:	f000 fce7 	bl	8004cf4 <_localeconv_r>
 8004326:	f8d0 a000 	ldr.w	sl, [r0]
 800432a:	4650      	mov	r0, sl
 800432c:	f7fb ffc8 	bl	80002c0 <strlen>
 8004330:	2300      	movs	r3, #0
 8004332:	930a      	str	r3, [sp, #40]	; 0x28
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	9305      	str	r3, [sp, #20]
 8004338:	f8d8 3000 	ldr.w	r3, [r8]
 800433c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004340:	3307      	adds	r3, #7
 8004342:	f023 0307 	bic.w	r3, r3, #7
 8004346:	f103 0208 	add.w	r2, r3, #8
 800434a:	f8c8 2000 	str.w	r2, [r8]
 800434e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004352:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004356:	9307      	str	r3, [sp, #28]
 8004358:	f8cd 8018 	str.w	r8, [sp, #24]
 800435c:	ee08 0a10 	vmov	s16, r0
 8004360:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004368:	4b9e      	ldr	r3, [pc, #632]	; (80045e4 <_printf_float+0x2d8>)
 800436a:	f04f 32ff 	mov.w	r2, #4294967295
 800436e:	f7fc fc05 	bl	8000b7c <__aeabi_dcmpun>
 8004372:	bb88      	cbnz	r0, 80043d8 <_printf_float+0xcc>
 8004374:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004378:	4b9a      	ldr	r3, [pc, #616]	; (80045e4 <_printf_float+0x2d8>)
 800437a:	f04f 32ff 	mov.w	r2, #4294967295
 800437e:	f7fc fbdf 	bl	8000b40 <__aeabi_dcmple>
 8004382:	bb48      	cbnz	r0, 80043d8 <_printf_float+0xcc>
 8004384:	2200      	movs	r2, #0
 8004386:	2300      	movs	r3, #0
 8004388:	4640      	mov	r0, r8
 800438a:	4649      	mov	r1, r9
 800438c:	f7fc fbce 	bl	8000b2c <__aeabi_dcmplt>
 8004390:	b110      	cbz	r0, 8004398 <_printf_float+0x8c>
 8004392:	232d      	movs	r3, #45	; 0x2d
 8004394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004398:	4a93      	ldr	r2, [pc, #588]	; (80045e8 <_printf_float+0x2dc>)
 800439a:	4b94      	ldr	r3, [pc, #592]	; (80045ec <_printf_float+0x2e0>)
 800439c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043a0:	bf94      	ite	ls
 80043a2:	4690      	movls	r8, r2
 80043a4:	4698      	movhi	r8, r3
 80043a6:	2303      	movs	r3, #3
 80043a8:	6123      	str	r3, [r4, #16]
 80043aa:	9b05      	ldr	r3, [sp, #20]
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	f04f 0900 	mov.w	r9, #0
 80043b6:	9700      	str	r7, [sp, #0]
 80043b8:	4633      	mov	r3, r6
 80043ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80043bc:	4621      	mov	r1, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f9da 	bl	8004778 <_printf_common>
 80043c4:	3001      	adds	r0, #1
 80043c6:	f040 8090 	bne.w	80044ea <_printf_float+0x1de>
 80043ca:	f04f 30ff 	mov.w	r0, #4294967295
 80043ce:	b00d      	add	sp, #52	; 0x34
 80043d0:	ecbd 8b02 	vpop	{d8}
 80043d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d8:	4642      	mov	r2, r8
 80043da:	464b      	mov	r3, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	4649      	mov	r1, r9
 80043e0:	f7fc fbcc 	bl	8000b7c <__aeabi_dcmpun>
 80043e4:	b140      	cbz	r0, 80043f8 <_printf_float+0xec>
 80043e6:	464b      	mov	r3, r9
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bfbc      	itt	lt
 80043ec:	232d      	movlt	r3, #45	; 0x2d
 80043ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80043f2:	4a7f      	ldr	r2, [pc, #508]	; (80045f0 <_printf_float+0x2e4>)
 80043f4:	4b7f      	ldr	r3, [pc, #508]	; (80045f4 <_printf_float+0x2e8>)
 80043f6:	e7d1      	b.n	800439c <_printf_float+0x90>
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80043fe:	9206      	str	r2, [sp, #24]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	d13f      	bne.n	8004484 <_printf_float+0x178>
 8004404:	2306      	movs	r3, #6
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	9b05      	ldr	r3, [sp, #20]
 800440a:	6861      	ldr	r1, [r4, #4]
 800440c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004410:	2300      	movs	r3, #0
 8004412:	9303      	str	r3, [sp, #12]
 8004414:	ab0a      	add	r3, sp, #40	; 0x28
 8004416:	e9cd b301 	strd	fp, r3, [sp, #4]
 800441a:	ab09      	add	r3, sp, #36	; 0x24
 800441c:	ec49 8b10 	vmov	d0, r8, r9
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	6022      	str	r2, [r4, #0]
 8004424:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004428:	4628      	mov	r0, r5
 800442a:	f7ff fece 	bl	80041ca <__cvt>
 800442e:	9b06      	ldr	r3, [sp, #24]
 8004430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004432:	2b47      	cmp	r3, #71	; 0x47
 8004434:	4680      	mov	r8, r0
 8004436:	d108      	bne.n	800444a <_printf_float+0x13e>
 8004438:	1cc8      	adds	r0, r1, #3
 800443a:	db02      	blt.n	8004442 <_printf_float+0x136>
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	4299      	cmp	r1, r3
 8004440:	dd41      	ble.n	80044c6 <_printf_float+0x1ba>
 8004442:	f1ab 0302 	sub.w	r3, fp, #2
 8004446:	fa5f fb83 	uxtb.w	fp, r3
 800444a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800444e:	d820      	bhi.n	8004492 <_printf_float+0x186>
 8004450:	3901      	subs	r1, #1
 8004452:	465a      	mov	r2, fp
 8004454:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004458:	9109      	str	r1, [sp, #36]	; 0x24
 800445a:	f7ff ff18 	bl	800428e <__exponent>
 800445e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004460:	1813      	adds	r3, r2, r0
 8004462:	2a01      	cmp	r2, #1
 8004464:	4681      	mov	r9, r0
 8004466:	6123      	str	r3, [r4, #16]
 8004468:	dc02      	bgt.n	8004470 <_printf_float+0x164>
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	07d2      	lsls	r2, r2, #31
 800446e:	d501      	bpl.n	8004474 <_printf_float+0x168>
 8004470:	3301      	adds	r3, #1
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004478:	2b00      	cmp	r3, #0
 800447a:	d09c      	beq.n	80043b6 <_printf_float+0xaa>
 800447c:	232d      	movs	r3, #45	; 0x2d
 800447e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004482:	e798      	b.n	80043b6 <_printf_float+0xaa>
 8004484:	9a06      	ldr	r2, [sp, #24]
 8004486:	2a47      	cmp	r2, #71	; 0x47
 8004488:	d1be      	bne.n	8004408 <_printf_float+0xfc>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1bc      	bne.n	8004408 <_printf_float+0xfc>
 800448e:	2301      	movs	r3, #1
 8004490:	e7b9      	b.n	8004406 <_printf_float+0xfa>
 8004492:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004496:	d118      	bne.n	80044ca <_printf_float+0x1be>
 8004498:	2900      	cmp	r1, #0
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	dd0b      	ble.n	80044b6 <_printf_float+0x1aa>
 800449e:	6121      	str	r1, [r4, #16]
 80044a0:	b913      	cbnz	r3, 80044a8 <_printf_float+0x19c>
 80044a2:	6822      	ldr	r2, [r4, #0]
 80044a4:	07d0      	lsls	r0, r2, #31
 80044a6:	d502      	bpl.n	80044ae <_printf_float+0x1a2>
 80044a8:	3301      	adds	r3, #1
 80044aa:	440b      	add	r3, r1
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80044b0:	f04f 0900 	mov.w	r9, #0
 80044b4:	e7de      	b.n	8004474 <_printf_float+0x168>
 80044b6:	b913      	cbnz	r3, 80044be <_printf_float+0x1b2>
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	07d2      	lsls	r2, r2, #31
 80044bc:	d501      	bpl.n	80044c2 <_printf_float+0x1b6>
 80044be:	3302      	adds	r3, #2
 80044c0:	e7f4      	b.n	80044ac <_printf_float+0x1a0>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e7f2      	b.n	80044ac <_printf_float+0x1a0>
 80044c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80044ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044cc:	4299      	cmp	r1, r3
 80044ce:	db05      	blt.n	80044dc <_printf_float+0x1d0>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	6121      	str	r1, [r4, #16]
 80044d4:	07d8      	lsls	r0, r3, #31
 80044d6:	d5ea      	bpl.n	80044ae <_printf_float+0x1a2>
 80044d8:	1c4b      	adds	r3, r1, #1
 80044da:	e7e7      	b.n	80044ac <_printf_float+0x1a0>
 80044dc:	2900      	cmp	r1, #0
 80044de:	bfd4      	ite	le
 80044e0:	f1c1 0202 	rsble	r2, r1, #2
 80044e4:	2201      	movgt	r2, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	e7e0      	b.n	80044ac <_printf_float+0x1a0>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	055a      	lsls	r2, r3, #21
 80044ee:	d407      	bmi.n	8004500 <_printf_float+0x1f4>
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	4642      	mov	r2, r8
 80044f4:	4631      	mov	r1, r6
 80044f6:	4628      	mov	r0, r5
 80044f8:	47b8      	blx	r7
 80044fa:	3001      	adds	r0, #1
 80044fc:	d12c      	bne.n	8004558 <_printf_float+0x24c>
 80044fe:	e764      	b.n	80043ca <_printf_float+0xbe>
 8004500:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004504:	f240 80e0 	bls.w	80046c8 <_printf_float+0x3bc>
 8004508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800450c:	2200      	movs	r2, #0
 800450e:	2300      	movs	r3, #0
 8004510:	f7fc fb02 	bl	8000b18 <__aeabi_dcmpeq>
 8004514:	2800      	cmp	r0, #0
 8004516:	d034      	beq.n	8004582 <_printf_float+0x276>
 8004518:	4a37      	ldr	r2, [pc, #220]	; (80045f8 <_printf_float+0x2ec>)
 800451a:	2301      	movs	r3, #1
 800451c:	4631      	mov	r1, r6
 800451e:	4628      	mov	r0, r5
 8004520:	47b8      	blx	r7
 8004522:	3001      	adds	r0, #1
 8004524:	f43f af51 	beq.w	80043ca <_printf_float+0xbe>
 8004528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800452c:	429a      	cmp	r2, r3
 800452e:	db02      	blt.n	8004536 <_printf_float+0x22a>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	07d8      	lsls	r0, r3, #31
 8004534:	d510      	bpl.n	8004558 <_printf_float+0x24c>
 8004536:	ee18 3a10 	vmov	r3, s16
 800453a:	4652      	mov	r2, sl
 800453c:	4631      	mov	r1, r6
 800453e:	4628      	mov	r0, r5
 8004540:	47b8      	blx	r7
 8004542:	3001      	adds	r0, #1
 8004544:	f43f af41 	beq.w	80043ca <_printf_float+0xbe>
 8004548:	f04f 0800 	mov.w	r8, #0
 800454c:	f104 091a 	add.w	r9, r4, #26
 8004550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	4543      	cmp	r3, r8
 8004556:	dc09      	bgt.n	800456c <_printf_float+0x260>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	079b      	lsls	r3, r3, #30
 800455c:	f100 8107 	bmi.w	800476e <_printf_float+0x462>
 8004560:	68e0      	ldr	r0, [r4, #12]
 8004562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004564:	4298      	cmp	r0, r3
 8004566:	bfb8      	it	lt
 8004568:	4618      	movlt	r0, r3
 800456a:	e730      	b.n	80043ce <_printf_float+0xc2>
 800456c:	2301      	movs	r3, #1
 800456e:	464a      	mov	r2, r9
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f af27 	beq.w	80043ca <_printf_float+0xbe>
 800457c:	f108 0801 	add.w	r8, r8, #1
 8004580:	e7e6      	b.n	8004550 <_printf_float+0x244>
 8004582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	dc39      	bgt.n	80045fc <_printf_float+0x2f0>
 8004588:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <_printf_float+0x2ec>)
 800458a:	2301      	movs	r3, #1
 800458c:	4631      	mov	r1, r6
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	f43f af19 	beq.w	80043ca <_printf_float+0xbe>
 8004598:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800459c:	4313      	orrs	r3, r2
 800459e:	d102      	bne.n	80045a6 <_printf_float+0x29a>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	07d9      	lsls	r1, r3, #31
 80045a4:	d5d8      	bpl.n	8004558 <_printf_float+0x24c>
 80045a6:	ee18 3a10 	vmov	r3, s16
 80045aa:	4652      	mov	r2, sl
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	f43f af09 	beq.w	80043ca <_printf_float+0xbe>
 80045b8:	f04f 0900 	mov.w	r9, #0
 80045bc:	f104 0a1a 	add.w	sl, r4, #26
 80045c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045c2:	425b      	negs	r3, r3
 80045c4:	454b      	cmp	r3, r9
 80045c6:	dc01      	bgt.n	80045cc <_printf_float+0x2c0>
 80045c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ca:	e792      	b.n	80044f2 <_printf_float+0x1e6>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4652      	mov	r2, sl
 80045d0:	4631      	mov	r1, r6
 80045d2:	4628      	mov	r0, r5
 80045d4:	47b8      	blx	r7
 80045d6:	3001      	adds	r0, #1
 80045d8:	f43f aef7 	beq.w	80043ca <_printf_float+0xbe>
 80045dc:	f109 0901 	add.w	r9, r9, #1
 80045e0:	e7ee      	b.n	80045c0 <_printf_float+0x2b4>
 80045e2:	bf00      	nop
 80045e4:	7fefffff 	.word	0x7fefffff
 80045e8:	08006f52 	.word	0x08006f52
 80045ec:	08006f56 	.word	0x08006f56
 80045f0:	08006f5a 	.word	0x08006f5a
 80045f4:	08006f5e 	.word	0x08006f5e
 80045f8:	08006f62 	.word	0x08006f62
 80045fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004600:	429a      	cmp	r2, r3
 8004602:	bfa8      	it	ge
 8004604:	461a      	movge	r2, r3
 8004606:	2a00      	cmp	r2, #0
 8004608:	4691      	mov	r9, r2
 800460a:	dc37      	bgt.n	800467c <_printf_float+0x370>
 800460c:	f04f 0b00 	mov.w	fp, #0
 8004610:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004614:	f104 021a 	add.w	r2, r4, #26
 8004618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800461a:	9305      	str	r3, [sp, #20]
 800461c:	eba3 0309 	sub.w	r3, r3, r9
 8004620:	455b      	cmp	r3, fp
 8004622:	dc33      	bgt.n	800468c <_printf_float+0x380>
 8004624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004628:	429a      	cmp	r2, r3
 800462a:	db3b      	blt.n	80046a4 <_printf_float+0x398>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	07da      	lsls	r2, r3, #31
 8004630:	d438      	bmi.n	80046a4 <_printf_float+0x398>
 8004632:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004636:	eba2 0903 	sub.w	r9, r2, r3
 800463a:	9b05      	ldr	r3, [sp, #20]
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	4591      	cmp	r9, r2
 8004640:	bfa8      	it	ge
 8004642:	4691      	movge	r9, r2
 8004644:	f1b9 0f00 	cmp.w	r9, #0
 8004648:	dc35      	bgt.n	80046b6 <_printf_float+0x3aa>
 800464a:	f04f 0800 	mov.w	r8, #0
 800464e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004652:	f104 0a1a 	add.w	sl, r4, #26
 8004656:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	eba3 0309 	sub.w	r3, r3, r9
 8004660:	4543      	cmp	r3, r8
 8004662:	f77f af79 	ble.w	8004558 <_printf_float+0x24c>
 8004666:	2301      	movs	r3, #1
 8004668:	4652      	mov	r2, sl
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f aeaa 	beq.w	80043ca <_printf_float+0xbe>
 8004676:	f108 0801 	add.w	r8, r8, #1
 800467a:	e7ec      	b.n	8004656 <_printf_float+0x34a>
 800467c:	4613      	mov	r3, r2
 800467e:	4631      	mov	r1, r6
 8004680:	4642      	mov	r2, r8
 8004682:	4628      	mov	r0, r5
 8004684:	47b8      	blx	r7
 8004686:	3001      	adds	r0, #1
 8004688:	d1c0      	bne.n	800460c <_printf_float+0x300>
 800468a:	e69e      	b.n	80043ca <_printf_float+0xbe>
 800468c:	2301      	movs	r3, #1
 800468e:	4631      	mov	r1, r6
 8004690:	4628      	mov	r0, r5
 8004692:	9205      	str	r2, [sp, #20]
 8004694:	47b8      	blx	r7
 8004696:	3001      	adds	r0, #1
 8004698:	f43f ae97 	beq.w	80043ca <_printf_float+0xbe>
 800469c:	9a05      	ldr	r2, [sp, #20]
 800469e:	f10b 0b01 	add.w	fp, fp, #1
 80046a2:	e7b9      	b.n	8004618 <_printf_float+0x30c>
 80046a4:	ee18 3a10 	vmov	r3, s16
 80046a8:	4652      	mov	r2, sl
 80046aa:	4631      	mov	r1, r6
 80046ac:	4628      	mov	r0, r5
 80046ae:	47b8      	blx	r7
 80046b0:	3001      	adds	r0, #1
 80046b2:	d1be      	bne.n	8004632 <_printf_float+0x326>
 80046b4:	e689      	b.n	80043ca <_printf_float+0xbe>
 80046b6:	9a05      	ldr	r2, [sp, #20]
 80046b8:	464b      	mov	r3, r9
 80046ba:	4442      	add	r2, r8
 80046bc:	4631      	mov	r1, r6
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	d1c1      	bne.n	800464a <_printf_float+0x33e>
 80046c6:	e680      	b.n	80043ca <_printf_float+0xbe>
 80046c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ca:	2a01      	cmp	r2, #1
 80046cc:	dc01      	bgt.n	80046d2 <_printf_float+0x3c6>
 80046ce:	07db      	lsls	r3, r3, #31
 80046d0:	d53a      	bpl.n	8004748 <_printf_float+0x43c>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4642      	mov	r2, r8
 80046d6:	4631      	mov	r1, r6
 80046d8:	4628      	mov	r0, r5
 80046da:	47b8      	blx	r7
 80046dc:	3001      	adds	r0, #1
 80046de:	f43f ae74 	beq.w	80043ca <_printf_float+0xbe>
 80046e2:	ee18 3a10 	vmov	r3, s16
 80046e6:	4652      	mov	r2, sl
 80046e8:	4631      	mov	r1, r6
 80046ea:	4628      	mov	r0, r5
 80046ec:	47b8      	blx	r7
 80046ee:	3001      	adds	r0, #1
 80046f0:	f43f ae6b 	beq.w	80043ca <_printf_float+0xbe>
 80046f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046f8:	2200      	movs	r2, #0
 80046fa:	2300      	movs	r3, #0
 80046fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004700:	f7fc fa0a 	bl	8000b18 <__aeabi_dcmpeq>
 8004704:	b9d8      	cbnz	r0, 800473e <_printf_float+0x432>
 8004706:	f10a 33ff 	add.w	r3, sl, #4294967295
 800470a:	f108 0201 	add.w	r2, r8, #1
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	47b8      	blx	r7
 8004714:	3001      	adds	r0, #1
 8004716:	d10e      	bne.n	8004736 <_printf_float+0x42a>
 8004718:	e657      	b.n	80043ca <_printf_float+0xbe>
 800471a:	2301      	movs	r3, #1
 800471c:	4652      	mov	r2, sl
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	47b8      	blx	r7
 8004724:	3001      	adds	r0, #1
 8004726:	f43f ae50 	beq.w	80043ca <_printf_float+0xbe>
 800472a:	f108 0801 	add.w	r8, r8, #1
 800472e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	4543      	cmp	r3, r8
 8004734:	dcf1      	bgt.n	800471a <_printf_float+0x40e>
 8004736:	464b      	mov	r3, r9
 8004738:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800473c:	e6da      	b.n	80044f4 <_printf_float+0x1e8>
 800473e:	f04f 0800 	mov.w	r8, #0
 8004742:	f104 0a1a 	add.w	sl, r4, #26
 8004746:	e7f2      	b.n	800472e <_printf_float+0x422>
 8004748:	2301      	movs	r3, #1
 800474a:	4642      	mov	r2, r8
 800474c:	e7df      	b.n	800470e <_printf_float+0x402>
 800474e:	2301      	movs	r3, #1
 8004750:	464a      	mov	r2, r9
 8004752:	4631      	mov	r1, r6
 8004754:	4628      	mov	r0, r5
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	f43f ae36 	beq.w	80043ca <_printf_float+0xbe>
 800475e:	f108 0801 	add.w	r8, r8, #1
 8004762:	68e3      	ldr	r3, [r4, #12]
 8004764:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004766:	1a5b      	subs	r3, r3, r1
 8004768:	4543      	cmp	r3, r8
 800476a:	dcf0      	bgt.n	800474e <_printf_float+0x442>
 800476c:	e6f8      	b.n	8004560 <_printf_float+0x254>
 800476e:	f04f 0800 	mov.w	r8, #0
 8004772:	f104 0919 	add.w	r9, r4, #25
 8004776:	e7f4      	b.n	8004762 <_printf_float+0x456>

08004778 <_printf_common>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	4616      	mov	r6, r2
 800477e:	4699      	mov	r9, r3
 8004780:	688a      	ldr	r2, [r1, #8]
 8004782:	690b      	ldr	r3, [r1, #16]
 8004784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004788:	4293      	cmp	r3, r2
 800478a:	bfb8      	it	lt
 800478c:	4613      	movlt	r3, r2
 800478e:	6033      	str	r3, [r6, #0]
 8004790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004794:	4607      	mov	r7, r0
 8004796:	460c      	mov	r4, r1
 8004798:	b10a      	cbz	r2, 800479e <_printf_common+0x26>
 800479a:	3301      	adds	r3, #1
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	0699      	lsls	r1, r3, #26
 80047a2:	bf42      	ittt	mi
 80047a4:	6833      	ldrmi	r3, [r6, #0]
 80047a6:	3302      	addmi	r3, #2
 80047a8:	6033      	strmi	r3, [r6, #0]
 80047aa:	6825      	ldr	r5, [r4, #0]
 80047ac:	f015 0506 	ands.w	r5, r5, #6
 80047b0:	d106      	bne.n	80047c0 <_printf_common+0x48>
 80047b2:	f104 0a19 	add.w	sl, r4, #25
 80047b6:	68e3      	ldr	r3, [r4, #12]
 80047b8:	6832      	ldr	r2, [r6, #0]
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	42ab      	cmp	r3, r5
 80047be:	dc26      	bgt.n	800480e <_printf_common+0x96>
 80047c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047c4:	1e13      	subs	r3, r2, #0
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	bf18      	it	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	0692      	lsls	r2, r2, #26
 80047ce:	d42b      	bmi.n	8004828 <_printf_common+0xb0>
 80047d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047d4:	4649      	mov	r1, r9
 80047d6:	4638      	mov	r0, r7
 80047d8:	47c0      	blx	r8
 80047da:	3001      	adds	r0, #1
 80047dc:	d01e      	beq.n	800481c <_printf_common+0xa4>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	6922      	ldr	r2, [r4, #16]
 80047e2:	f003 0306 	and.w	r3, r3, #6
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	bf02      	ittt	eq
 80047ea:	68e5      	ldreq	r5, [r4, #12]
 80047ec:	6833      	ldreq	r3, [r6, #0]
 80047ee:	1aed      	subeq	r5, r5, r3
 80047f0:	68a3      	ldr	r3, [r4, #8]
 80047f2:	bf0c      	ite	eq
 80047f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047f8:	2500      	movne	r5, #0
 80047fa:	4293      	cmp	r3, r2
 80047fc:	bfc4      	itt	gt
 80047fe:	1a9b      	subgt	r3, r3, r2
 8004800:	18ed      	addgt	r5, r5, r3
 8004802:	2600      	movs	r6, #0
 8004804:	341a      	adds	r4, #26
 8004806:	42b5      	cmp	r5, r6
 8004808:	d11a      	bne.n	8004840 <_printf_common+0xc8>
 800480a:	2000      	movs	r0, #0
 800480c:	e008      	b.n	8004820 <_printf_common+0xa8>
 800480e:	2301      	movs	r3, #1
 8004810:	4652      	mov	r2, sl
 8004812:	4649      	mov	r1, r9
 8004814:	4638      	mov	r0, r7
 8004816:	47c0      	blx	r8
 8004818:	3001      	adds	r0, #1
 800481a:	d103      	bne.n	8004824 <_printf_common+0xac>
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004824:	3501      	adds	r5, #1
 8004826:	e7c6      	b.n	80047b6 <_printf_common+0x3e>
 8004828:	18e1      	adds	r1, r4, r3
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	2030      	movs	r0, #48	; 0x30
 800482e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004832:	4422      	add	r2, r4
 8004834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800483c:	3302      	adds	r3, #2
 800483e:	e7c7      	b.n	80047d0 <_printf_common+0x58>
 8004840:	2301      	movs	r3, #1
 8004842:	4622      	mov	r2, r4
 8004844:	4649      	mov	r1, r9
 8004846:	4638      	mov	r0, r7
 8004848:	47c0      	blx	r8
 800484a:	3001      	adds	r0, #1
 800484c:	d0e6      	beq.n	800481c <_printf_common+0xa4>
 800484e:	3601      	adds	r6, #1
 8004850:	e7d9      	b.n	8004806 <_printf_common+0x8e>
	...

08004854 <_printf_i>:
 8004854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	7e0f      	ldrb	r7, [r1, #24]
 800485a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800485c:	2f78      	cmp	r7, #120	; 0x78
 800485e:	4691      	mov	r9, r2
 8004860:	4680      	mov	r8, r0
 8004862:	460c      	mov	r4, r1
 8004864:	469a      	mov	sl, r3
 8004866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800486a:	d807      	bhi.n	800487c <_printf_i+0x28>
 800486c:	2f62      	cmp	r7, #98	; 0x62
 800486e:	d80a      	bhi.n	8004886 <_printf_i+0x32>
 8004870:	2f00      	cmp	r7, #0
 8004872:	f000 80d4 	beq.w	8004a1e <_printf_i+0x1ca>
 8004876:	2f58      	cmp	r7, #88	; 0x58
 8004878:	f000 80c0 	beq.w	80049fc <_printf_i+0x1a8>
 800487c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004884:	e03a      	b.n	80048fc <_printf_i+0xa8>
 8004886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800488a:	2b15      	cmp	r3, #21
 800488c:	d8f6      	bhi.n	800487c <_printf_i+0x28>
 800488e:	a101      	add	r1, pc, #4	; (adr r1, 8004894 <_printf_i+0x40>)
 8004890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004894:	080048ed 	.word	0x080048ed
 8004898:	08004901 	.word	0x08004901
 800489c:	0800487d 	.word	0x0800487d
 80048a0:	0800487d 	.word	0x0800487d
 80048a4:	0800487d 	.word	0x0800487d
 80048a8:	0800487d 	.word	0x0800487d
 80048ac:	08004901 	.word	0x08004901
 80048b0:	0800487d 	.word	0x0800487d
 80048b4:	0800487d 	.word	0x0800487d
 80048b8:	0800487d 	.word	0x0800487d
 80048bc:	0800487d 	.word	0x0800487d
 80048c0:	08004a05 	.word	0x08004a05
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	080049bf 	.word	0x080049bf
 80048cc:	0800487d 	.word	0x0800487d
 80048d0:	0800487d 	.word	0x0800487d
 80048d4:	08004a27 	.word	0x08004a27
 80048d8:	0800487d 	.word	0x0800487d
 80048dc:	0800492d 	.word	0x0800492d
 80048e0:	0800487d 	.word	0x0800487d
 80048e4:	0800487d 	.word	0x0800487d
 80048e8:	080049c7 	.word	0x080049c7
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	602a      	str	r2, [r5, #0]
 80048f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048fc:	2301      	movs	r3, #1
 80048fe:	e09f      	b.n	8004a40 <_printf_i+0x1ec>
 8004900:	6820      	ldr	r0, [r4, #0]
 8004902:	682b      	ldr	r3, [r5, #0]
 8004904:	0607      	lsls	r7, r0, #24
 8004906:	f103 0104 	add.w	r1, r3, #4
 800490a:	6029      	str	r1, [r5, #0]
 800490c:	d501      	bpl.n	8004912 <_printf_i+0xbe>
 800490e:	681e      	ldr	r6, [r3, #0]
 8004910:	e003      	b.n	800491a <_printf_i+0xc6>
 8004912:	0646      	lsls	r6, r0, #25
 8004914:	d5fb      	bpl.n	800490e <_printf_i+0xba>
 8004916:	f9b3 6000 	ldrsh.w	r6, [r3]
 800491a:	2e00      	cmp	r6, #0
 800491c:	da03      	bge.n	8004926 <_printf_i+0xd2>
 800491e:	232d      	movs	r3, #45	; 0x2d
 8004920:	4276      	negs	r6, r6
 8004922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004926:	485a      	ldr	r0, [pc, #360]	; (8004a90 <_printf_i+0x23c>)
 8004928:	230a      	movs	r3, #10
 800492a:	e012      	b.n	8004952 <_printf_i+0xfe>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	1d19      	adds	r1, r3, #4
 8004932:	6029      	str	r1, [r5, #0]
 8004934:	0605      	lsls	r5, r0, #24
 8004936:	d501      	bpl.n	800493c <_printf_i+0xe8>
 8004938:	681e      	ldr	r6, [r3, #0]
 800493a:	e002      	b.n	8004942 <_printf_i+0xee>
 800493c:	0641      	lsls	r1, r0, #25
 800493e:	d5fb      	bpl.n	8004938 <_printf_i+0xe4>
 8004940:	881e      	ldrh	r6, [r3, #0]
 8004942:	4853      	ldr	r0, [pc, #332]	; (8004a90 <_printf_i+0x23c>)
 8004944:	2f6f      	cmp	r7, #111	; 0x6f
 8004946:	bf0c      	ite	eq
 8004948:	2308      	moveq	r3, #8
 800494a:	230a      	movne	r3, #10
 800494c:	2100      	movs	r1, #0
 800494e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004952:	6865      	ldr	r5, [r4, #4]
 8004954:	60a5      	str	r5, [r4, #8]
 8004956:	2d00      	cmp	r5, #0
 8004958:	bfa2      	ittt	ge
 800495a:	6821      	ldrge	r1, [r4, #0]
 800495c:	f021 0104 	bicge.w	r1, r1, #4
 8004960:	6021      	strge	r1, [r4, #0]
 8004962:	b90e      	cbnz	r6, 8004968 <_printf_i+0x114>
 8004964:	2d00      	cmp	r5, #0
 8004966:	d04b      	beq.n	8004a00 <_printf_i+0x1ac>
 8004968:	4615      	mov	r5, r2
 800496a:	fbb6 f1f3 	udiv	r1, r6, r3
 800496e:	fb03 6711 	mls	r7, r3, r1, r6
 8004972:	5dc7      	ldrb	r7, [r0, r7]
 8004974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004978:	4637      	mov	r7, r6
 800497a:	42bb      	cmp	r3, r7
 800497c:	460e      	mov	r6, r1
 800497e:	d9f4      	bls.n	800496a <_printf_i+0x116>
 8004980:	2b08      	cmp	r3, #8
 8004982:	d10b      	bne.n	800499c <_printf_i+0x148>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	07de      	lsls	r6, r3, #31
 8004988:	d508      	bpl.n	800499c <_printf_i+0x148>
 800498a:	6923      	ldr	r3, [r4, #16]
 800498c:	6861      	ldr	r1, [r4, #4]
 800498e:	4299      	cmp	r1, r3
 8004990:	bfde      	ittt	le
 8004992:	2330      	movle	r3, #48	; 0x30
 8004994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800499c:	1b52      	subs	r2, r2, r5
 800499e:	6122      	str	r2, [r4, #16]
 80049a0:	f8cd a000 	str.w	sl, [sp]
 80049a4:	464b      	mov	r3, r9
 80049a6:	aa03      	add	r2, sp, #12
 80049a8:	4621      	mov	r1, r4
 80049aa:	4640      	mov	r0, r8
 80049ac:	f7ff fee4 	bl	8004778 <_printf_common>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d14a      	bne.n	8004a4a <_printf_i+0x1f6>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	b004      	add	sp, #16
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	f043 0320 	orr.w	r3, r3, #32
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	4833      	ldr	r0, [pc, #204]	; (8004a94 <_printf_i+0x240>)
 80049c8:	2778      	movs	r7, #120	; 0x78
 80049ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	6829      	ldr	r1, [r5, #0]
 80049d2:	061f      	lsls	r7, r3, #24
 80049d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80049d8:	d402      	bmi.n	80049e0 <_printf_i+0x18c>
 80049da:	065f      	lsls	r7, r3, #25
 80049dc:	bf48      	it	mi
 80049de:	b2b6      	uxthmi	r6, r6
 80049e0:	07df      	lsls	r7, r3, #31
 80049e2:	bf48      	it	mi
 80049e4:	f043 0320 	orrmi.w	r3, r3, #32
 80049e8:	6029      	str	r1, [r5, #0]
 80049ea:	bf48      	it	mi
 80049ec:	6023      	strmi	r3, [r4, #0]
 80049ee:	b91e      	cbnz	r6, 80049f8 <_printf_i+0x1a4>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	f023 0320 	bic.w	r3, r3, #32
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	2310      	movs	r3, #16
 80049fa:	e7a7      	b.n	800494c <_printf_i+0xf8>
 80049fc:	4824      	ldr	r0, [pc, #144]	; (8004a90 <_printf_i+0x23c>)
 80049fe:	e7e4      	b.n	80049ca <_printf_i+0x176>
 8004a00:	4615      	mov	r5, r2
 8004a02:	e7bd      	b.n	8004980 <_printf_i+0x12c>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	6826      	ldr	r6, [r4, #0]
 8004a08:	6961      	ldr	r1, [r4, #20]
 8004a0a:	1d18      	adds	r0, r3, #4
 8004a0c:	6028      	str	r0, [r5, #0]
 8004a0e:	0635      	lsls	r5, r6, #24
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	d501      	bpl.n	8004a18 <_printf_i+0x1c4>
 8004a14:	6019      	str	r1, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <_printf_i+0x1ca>
 8004a18:	0670      	lsls	r0, r6, #25
 8004a1a:	d5fb      	bpl.n	8004a14 <_printf_i+0x1c0>
 8004a1c:	8019      	strh	r1, [r3, #0]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	4615      	mov	r5, r2
 8004a24:	e7bc      	b.n	80049a0 <_printf_i+0x14c>
 8004a26:	682b      	ldr	r3, [r5, #0]
 8004a28:	1d1a      	adds	r2, r3, #4
 8004a2a:	602a      	str	r2, [r5, #0]
 8004a2c:	681d      	ldr	r5, [r3, #0]
 8004a2e:	6862      	ldr	r2, [r4, #4]
 8004a30:	2100      	movs	r1, #0
 8004a32:	4628      	mov	r0, r5
 8004a34:	f7fb fbf4 	bl	8000220 <memchr>
 8004a38:	b108      	cbz	r0, 8004a3e <_printf_i+0x1ea>
 8004a3a:	1b40      	subs	r0, r0, r5
 8004a3c:	6060      	str	r0, [r4, #4]
 8004a3e:	6863      	ldr	r3, [r4, #4]
 8004a40:	6123      	str	r3, [r4, #16]
 8004a42:	2300      	movs	r3, #0
 8004a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a48:	e7aa      	b.n	80049a0 <_printf_i+0x14c>
 8004a4a:	6923      	ldr	r3, [r4, #16]
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4649      	mov	r1, r9
 8004a50:	4640      	mov	r0, r8
 8004a52:	47d0      	blx	sl
 8004a54:	3001      	adds	r0, #1
 8004a56:	d0ad      	beq.n	80049b4 <_printf_i+0x160>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	079b      	lsls	r3, r3, #30
 8004a5c:	d413      	bmi.n	8004a86 <_printf_i+0x232>
 8004a5e:	68e0      	ldr	r0, [r4, #12]
 8004a60:	9b03      	ldr	r3, [sp, #12]
 8004a62:	4298      	cmp	r0, r3
 8004a64:	bfb8      	it	lt
 8004a66:	4618      	movlt	r0, r3
 8004a68:	e7a6      	b.n	80049b8 <_printf_i+0x164>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4632      	mov	r2, r6
 8004a6e:	4649      	mov	r1, r9
 8004a70:	4640      	mov	r0, r8
 8004a72:	47d0      	blx	sl
 8004a74:	3001      	adds	r0, #1
 8004a76:	d09d      	beq.n	80049b4 <_printf_i+0x160>
 8004a78:	3501      	adds	r5, #1
 8004a7a:	68e3      	ldr	r3, [r4, #12]
 8004a7c:	9903      	ldr	r1, [sp, #12]
 8004a7e:	1a5b      	subs	r3, r3, r1
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	dcf2      	bgt.n	8004a6a <_printf_i+0x216>
 8004a84:	e7eb      	b.n	8004a5e <_printf_i+0x20a>
 8004a86:	2500      	movs	r5, #0
 8004a88:	f104 0619 	add.w	r6, r4, #25
 8004a8c:	e7f5      	b.n	8004a7a <_printf_i+0x226>
 8004a8e:	bf00      	nop
 8004a90:	08006f64 	.word	0x08006f64
 8004a94:	08006f75 	.word	0x08006f75

08004a98 <std>:
 8004a98:	2300      	movs	r3, #0
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aa6:	6083      	str	r3, [r0, #8]
 8004aa8:	8181      	strh	r1, [r0, #12]
 8004aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8004aac:	81c2      	strh	r2, [r0, #14]
 8004aae:	6183      	str	r3, [r0, #24]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	305c      	adds	r0, #92	; 0x5c
 8004ab6:	f000 f914 	bl	8004ce2 <memset>
 8004aba:	4b0d      	ldr	r3, [pc, #52]	; (8004af0 <std+0x58>)
 8004abc:	6263      	str	r3, [r4, #36]	; 0x24
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <std+0x5c>)
 8004ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <std+0x60>)
 8004ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <std+0x64>)
 8004ac8:	6323      	str	r3, [r4, #48]	; 0x30
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <std+0x68>)
 8004acc:	6224      	str	r4, [r4, #32]
 8004ace:	429c      	cmp	r4, r3
 8004ad0:	d006      	beq.n	8004ae0 <std+0x48>
 8004ad2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ad6:	4294      	cmp	r4, r2
 8004ad8:	d002      	beq.n	8004ae0 <std+0x48>
 8004ada:	33d0      	adds	r3, #208	; 0xd0
 8004adc:	429c      	cmp	r4, r3
 8004ade:	d105      	bne.n	8004aec <std+0x54>
 8004ae0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ae8:	f000 b978 	b.w	8004ddc <__retarget_lock_init_recursive>
 8004aec:	bd10      	pop	{r4, pc}
 8004aee:	bf00      	nop
 8004af0:	08004c5d 	.word	0x08004c5d
 8004af4:	08004c7f 	.word	0x08004c7f
 8004af8:	08004cb7 	.word	0x08004cb7
 8004afc:	08004cdb 	.word	0x08004cdb
 8004b00:	20000488 	.word	0x20000488

08004b04 <stdio_exit_handler>:
 8004b04:	4a02      	ldr	r2, [pc, #8]	; (8004b10 <stdio_exit_handler+0xc>)
 8004b06:	4903      	ldr	r1, [pc, #12]	; (8004b14 <stdio_exit_handler+0x10>)
 8004b08:	4803      	ldr	r0, [pc, #12]	; (8004b18 <stdio_exit_handler+0x14>)
 8004b0a:	f000 b869 	b.w	8004be0 <_fwalk_sglue>
 8004b0e:	bf00      	nop
 8004b10:	20000034 	.word	0x20000034
 8004b14:	08006791 	.word	0x08006791
 8004b18:	20000040 	.word	0x20000040

08004b1c <cleanup_stdio>:
 8004b1c:	6841      	ldr	r1, [r0, #4]
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <cleanup_stdio+0x34>)
 8004b20:	4299      	cmp	r1, r3
 8004b22:	b510      	push	{r4, lr}
 8004b24:	4604      	mov	r4, r0
 8004b26:	d001      	beq.n	8004b2c <cleanup_stdio+0x10>
 8004b28:	f001 fe32 	bl	8006790 <_fflush_r>
 8004b2c:	68a1      	ldr	r1, [r4, #8]
 8004b2e:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <cleanup_stdio+0x38>)
 8004b30:	4299      	cmp	r1, r3
 8004b32:	d002      	beq.n	8004b3a <cleanup_stdio+0x1e>
 8004b34:	4620      	mov	r0, r4
 8004b36:	f001 fe2b 	bl	8006790 <_fflush_r>
 8004b3a:	68e1      	ldr	r1, [r4, #12]
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <cleanup_stdio+0x3c>)
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	d004      	beq.n	8004b4c <cleanup_stdio+0x30>
 8004b42:	4620      	mov	r0, r4
 8004b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b48:	f001 be22 	b.w	8006790 <_fflush_r>
 8004b4c:	bd10      	pop	{r4, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000488 	.word	0x20000488
 8004b54:	200004f0 	.word	0x200004f0
 8004b58:	20000558 	.word	0x20000558

08004b5c <global_stdio_init.part.0>:
 8004b5c:	b510      	push	{r4, lr}
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <global_stdio_init.part.0+0x30>)
 8004b60:	4c0b      	ldr	r4, [pc, #44]	; (8004b90 <global_stdio_init.part.0+0x34>)
 8004b62:	4a0c      	ldr	r2, [pc, #48]	; (8004b94 <global_stdio_init.part.0+0x38>)
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	4620      	mov	r0, r4
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	f7ff ff94 	bl	8004a98 <std>
 8004b70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b74:	2201      	movs	r2, #1
 8004b76:	2109      	movs	r1, #9
 8004b78:	f7ff ff8e 	bl	8004a98 <std>
 8004b7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b80:	2202      	movs	r2, #2
 8004b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b86:	2112      	movs	r1, #18
 8004b88:	f7ff bf86 	b.w	8004a98 <std>
 8004b8c:	200005c0 	.word	0x200005c0
 8004b90:	20000488 	.word	0x20000488
 8004b94:	08004b05 	.word	0x08004b05

08004b98 <__sfp_lock_acquire>:
 8004b98:	4801      	ldr	r0, [pc, #4]	; (8004ba0 <__sfp_lock_acquire+0x8>)
 8004b9a:	f000 b920 	b.w	8004dde <__retarget_lock_acquire_recursive>
 8004b9e:	bf00      	nop
 8004ba0:	200005c9 	.word	0x200005c9

08004ba4 <__sfp_lock_release>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__sfp_lock_release+0x8>)
 8004ba6:	f000 b91b 	b.w	8004de0 <__retarget_lock_release_recursive>
 8004baa:	bf00      	nop
 8004bac:	200005c9 	.word	0x200005c9

08004bb0 <__sinit>:
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	f7ff fff0 	bl	8004b98 <__sfp_lock_acquire>
 8004bb8:	6a23      	ldr	r3, [r4, #32]
 8004bba:	b11b      	cbz	r3, 8004bc4 <__sinit+0x14>
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	f7ff bff0 	b.w	8004ba4 <__sfp_lock_release>
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <__sinit+0x28>)
 8004bc6:	6223      	str	r3, [r4, #32]
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <__sinit+0x2c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f5      	bne.n	8004bbc <__sinit+0xc>
 8004bd0:	f7ff ffc4 	bl	8004b5c <global_stdio_init.part.0>
 8004bd4:	e7f2      	b.n	8004bbc <__sinit+0xc>
 8004bd6:	bf00      	nop
 8004bd8:	08004b1d 	.word	0x08004b1d
 8004bdc:	200005c0 	.word	0x200005c0

08004be0 <_fwalk_sglue>:
 8004be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be4:	4607      	mov	r7, r0
 8004be6:	4688      	mov	r8, r1
 8004be8:	4614      	mov	r4, r2
 8004bea:	2600      	movs	r6, #0
 8004bec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf0:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf4:	d505      	bpl.n	8004c02 <_fwalk_sglue+0x22>
 8004bf6:	6824      	ldr	r4, [r4, #0]
 8004bf8:	2c00      	cmp	r4, #0
 8004bfa:	d1f7      	bne.n	8004bec <_fwalk_sglue+0xc>
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c02:	89ab      	ldrh	r3, [r5, #12]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d907      	bls.n	8004c18 <_fwalk_sglue+0x38>
 8004c08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	d003      	beq.n	8004c18 <_fwalk_sglue+0x38>
 8004c10:	4629      	mov	r1, r5
 8004c12:	4638      	mov	r0, r7
 8004c14:	47c0      	blx	r8
 8004c16:	4306      	orrs	r6, r0
 8004c18:	3568      	adds	r5, #104	; 0x68
 8004c1a:	e7e9      	b.n	8004bf0 <_fwalk_sglue+0x10>

08004c1c <siprintf>:
 8004c1c:	b40e      	push	{r1, r2, r3}
 8004c1e:	b500      	push	{lr}
 8004c20:	b09c      	sub	sp, #112	; 0x70
 8004c22:	ab1d      	add	r3, sp, #116	; 0x74
 8004c24:	9002      	str	r0, [sp, #8]
 8004c26:	9006      	str	r0, [sp, #24]
 8004c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c2c:	4809      	ldr	r0, [pc, #36]	; (8004c54 <siprintf+0x38>)
 8004c2e:	9107      	str	r1, [sp, #28]
 8004c30:	9104      	str	r1, [sp, #16]
 8004c32:	4909      	ldr	r1, [pc, #36]	; (8004c58 <siprintf+0x3c>)
 8004c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c38:	9105      	str	r1, [sp, #20]
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	a902      	add	r1, sp, #8
 8004c40:	f001 fc22 	bl	8006488 <_svfiprintf_r>
 8004c44:	9b02      	ldr	r3, [sp, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	b01c      	add	sp, #112	; 0x70
 8004c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c50:	b003      	add	sp, #12
 8004c52:	4770      	bx	lr
 8004c54:	2000008c 	.word	0x2000008c
 8004c58:	ffff0208 	.word	0xffff0208

08004c5c <__sread>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	460c      	mov	r4, r1
 8004c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c64:	f000 f86c 	bl	8004d40 <_read_r>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	bfab      	itete	ge
 8004c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c70:	181b      	addge	r3, r3, r0
 8004c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c76:	bfac      	ite	ge
 8004c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c7a:	81a3      	strhlt	r3, [r4, #12]
 8004c7c:	bd10      	pop	{r4, pc}

08004c7e <__swrite>:
 8004c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c82:	461f      	mov	r7, r3
 8004c84:	898b      	ldrh	r3, [r1, #12]
 8004c86:	05db      	lsls	r3, r3, #23
 8004c88:	4605      	mov	r5, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	d505      	bpl.n	8004c9c <__swrite+0x1e>
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	2302      	movs	r3, #2
 8004c96:	2200      	movs	r2, #0
 8004c98:	f000 f840 	bl	8004d1c <_lseek_r>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	4632      	mov	r2, r6
 8004caa:	463b      	mov	r3, r7
 8004cac:	4628      	mov	r0, r5
 8004cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb2:	f000 b857 	b.w	8004d64 <_write_r>

08004cb6 <__sseek>:
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	460c      	mov	r4, r1
 8004cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cbe:	f000 f82d 	bl	8004d1c <_lseek_r>
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	bf15      	itete	ne
 8004cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cd2:	81a3      	strheq	r3, [r4, #12]
 8004cd4:	bf18      	it	ne
 8004cd6:	81a3      	strhne	r3, [r4, #12]
 8004cd8:	bd10      	pop	{r4, pc}

08004cda <__sclose>:
 8004cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cde:	f000 b80d 	b.w	8004cfc <_close_r>

08004ce2 <memset>:
 8004ce2:	4402      	add	r2, r0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d100      	bne.n	8004cec <memset+0xa>
 8004cea:	4770      	bx	lr
 8004cec:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf0:	e7f9      	b.n	8004ce6 <memset+0x4>
	...

08004cf4 <_localeconv_r>:
 8004cf4:	4800      	ldr	r0, [pc, #0]	; (8004cf8 <_localeconv_r+0x4>)
 8004cf6:	4770      	bx	lr
 8004cf8:	20000180 	.word	0x20000180

08004cfc <_close_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d06      	ldr	r5, [pc, #24]	; (8004d18 <_close_r+0x1c>)
 8004d00:	2300      	movs	r3, #0
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	f7fc fcee 	bl	80016e8 <_close>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_close_r+0x1a>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_close_r+0x1a>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	200005c4 	.word	0x200005c4

08004d1c <_lseek_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	; (8004d3c <_lseek_r+0x20>)
 8004d20:	4604      	mov	r4, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	602a      	str	r2, [r5, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7fc fce6 	bl	80016fc <_lseek>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_lseek_r+0x1e>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_lseek_r+0x1e>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	200005c4 	.word	0x200005c4

08004d40 <_read_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	; (8004d60 <_read_r+0x20>)
 8004d44:	4604      	mov	r4, r0
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc fcae 	bl	80016b0 <_read>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_read_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_read_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	200005c4 	.word	0x200005c4

08004d64 <_write_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	; (8004d84 <_write_r+0x20>)
 8004d68:	4604      	mov	r4, r0
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fcaa 	bl	80016cc <_write>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_write_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_write_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	200005c4 	.word	0x200005c4

08004d88 <__errno>:
 8004d88:	4b01      	ldr	r3, [pc, #4]	; (8004d90 <__errno+0x8>)
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	2000008c 	.word	0x2000008c

08004d94 <__libc_init_array>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4d0d      	ldr	r5, [pc, #52]	; (8004dcc <__libc_init_array+0x38>)
 8004d98:	4c0d      	ldr	r4, [pc, #52]	; (8004dd0 <__libc_init_array+0x3c>)
 8004d9a:	1b64      	subs	r4, r4, r5
 8004d9c:	10a4      	asrs	r4, r4, #2
 8004d9e:	2600      	movs	r6, #0
 8004da0:	42a6      	cmp	r6, r4
 8004da2:	d109      	bne.n	8004db8 <__libc_init_array+0x24>
 8004da4:	4d0b      	ldr	r5, [pc, #44]	; (8004dd4 <__libc_init_array+0x40>)
 8004da6:	4c0c      	ldr	r4, [pc, #48]	; (8004dd8 <__libc_init_array+0x44>)
 8004da8:	f002 f896 	bl	8006ed8 <_init>
 8004dac:	1b64      	subs	r4, r4, r5
 8004dae:	10a4      	asrs	r4, r4, #2
 8004db0:	2600      	movs	r6, #0
 8004db2:	42a6      	cmp	r6, r4
 8004db4:	d105      	bne.n	8004dc2 <__libc_init_array+0x2e>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbc:	4798      	blx	r3
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	e7ee      	b.n	8004da0 <__libc_init_array+0xc>
 8004dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc6:	4798      	blx	r3
 8004dc8:	3601      	adds	r6, #1
 8004dca:	e7f2      	b.n	8004db2 <__libc_init_array+0x1e>
 8004dcc:	080072cc 	.word	0x080072cc
 8004dd0:	080072cc 	.word	0x080072cc
 8004dd4:	080072cc 	.word	0x080072cc
 8004dd8:	080072d0 	.word	0x080072d0

08004ddc <__retarget_lock_init_recursive>:
 8004ddc:	4770      	bx	lr

08004dde <__retarget_lock_acquire_recursive>:
 8004dde:	4770      	bx	lr

08004de0 <__retarget_lock_release_recursive>:
 8004de0:	4770      	bx	lr

08004de2 <quorem>:
 8004de2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de6:	6903      	ldr	r3, [r0, #16]
 8004de8:	690c      	ldr	r4, [r1, #16]
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	4607      	mov	r7, r0
 8004dee:	db7e      	blt.n	8004eee <quorem+0x10c>
 8004df0:	3c01      	subs	r4, #1
 8004df2:	f101 0814 	add.w	r8, r1, #20
 8004df6:	f100 0514 	add.w	r5, r0, #20
 8004dfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e14:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e18:	d331      	bcc.n	8004e7e <quorem+0x9c>
 8004e1a:	f04f 0e00 	mov.w	lr, #0
 8004e1e:	4640      	mov	r0, r8
 8004e20:	46ac      	mov	ip, r5
 8004e22:	46f2      	mov	sl, lr
 8004e24:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e28:	b293      	uxth	r3, r2
 8004e2a:	fb06 e303 	mla	r3, r6, r3, lr
 8004e2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e32:	0c1a      	lsrs	r2, r3, #16
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	ebaa 0303 	sub.w	r3, sl, r3
 8004e3a:	f8dc a000 	ldr.w	sl, [ip]
 8004e3e:	fa13 f38a 	uxtah	r3, r3, sl
 8004e42:	fb06 220e 	mla	r2, r6, lr, r2
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	9b00      	ldr	r3, [sp, #0]
 8004e4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e58:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e5c:	4581      	cmp	r9, r0
 8004e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e62:	f84c 3b04 	str.w	r3, [ip], #4
 8004e66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e6a:	d2db      	bcs.n	8004e24 <quorem+0x42>
 8004e6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e70:	b92b      	cbnz	r3, 8004e7e <quorem+0x9c>
 8004e72:	9b01      	ldr	r3, [sp, #4]
 8004e74:	3b04      	subs	r3, #4
 8004e76:	429d      	cmp	r5, r3
 8004e78:	461a      	mov	r2, r3
 8004e7a:	d32c      	bcc.n	8004ed6 <quorem+0xf4>
 8004e7c:	613c      	str	r4, [r7, #16]
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f001 f9a8 	bl	80061d4 <__mcmp>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	db22      	blt.n	8004ece <quorem+0xec>
 8004e88:	3601      	adds	r6, #1
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e92:	f8d1 c000 	ldr.w	ip, [r1]
 8004e96:	b293      	uxth	r3, r2
 8004e98:	1ac3      	subs	r3, r0, r3
 8004e9a:	0c12      	lsrs	r2, r2, #16
 8004e9c:	fa13 f38c 	uxtah	r3, r3, ip
 8004ea0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eae:	45c1      	cmp	r9, r8
 8004eb0:	f841 3b04 	str.w	r3, [r1], #4
 8004eb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004eb8:	d2e9      	bcs.n	8004e8e <quorem+0xac>
 8004eba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ec2:	b922      	cbnz	r2, 8004ece <quorem+0xec>
 8004ec4:	3b04      	subs	r3, #4
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	d30a      	bcc.n	8004ee2 <quorem+0x100>
 8004ecc:	613c      	str	r4, [r7, #16]
 8004ece:	4630      	mov	r0, r6
 8004ed0:	b003      	add	sp, #12
 8004ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	3b04      	subs	r3, #4
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	d1ce      	bne.n	8004e7c <quorem+0x9a>
 8004ede:	3c01      	subs	r4, #1
 8004ee0:	e7c9      	b.n	8004e76 <quorem+0x94>
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	3b04      	subs	r3, #4
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	d1f0      	bne.n	8004ecc <quorem+0xea>
 8004eea:	3c01      	subs	r4, #1
 8004eec:	e7eb      	b.n	8004ec6 <quorem+0xe4>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e7ee      	b.n	8004ed0 <quorem+0xee>
 8004ef2:	0000      	movs	r0, r0
 8004ef4:	0000      	movs	r0, r0
	...

08004ef8 <_dtoa_r>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	ed2d 8b04 	vpush	{d8-d9}
 8004f00:	69c5      	ldr	r5, [r0, #28]
 8004f02:	b093      	sub	sp, #76	; 0x4c
 8004f04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f08:	ec57 6b10 	vmov	r6, r7, d0
 8004f0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f10:	9107      	str	r1, [sp, #28]
 8004f12:	4604      	mov	r4, r0
 8004f14:	920a      	str	r2, [sp, #40]	; 0x28
 8004f16:	930d      	str	r3, [sp, #52]	; 0x34
 8004f18:	b975      	cbnz	r5, 8004f38 <_dtoa_r+0x40>
 8004f1a:	2010      	movs	r0, #16
 8004f1c:	f000 fe2a 	bl	8005b74 <malloc>
 8004f20:	4602      	mov	r2, r0
 8004f22:	61e0      	str	r0, [r4, #28]
 8004f24:	b920      	cbnz	r0, 8004f30 <_dtoa_r+0x38>
 8004f26:	4bae      	ldr	r3, [pc, #696]	; (80051e0 <_dtoa_r+0x2e8>)
 8004f28:	21ef      	movs	r1, #239	; 0xef
 8004f2a:	48ae      	ldr	r0, [pc, #696]	; (80051e4 <_dtoa_r+0x2ec>)
 8004f2c:	f001 fc90 	bl	8006850 <__assert_func>
 8004f30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f34:	6005      	str	r5, [r0, #0]
 8004f36:	60c5      	str	r5, [r0, #12]
 8004f38:	69e3      	ldr	r3, [r4, #28]
 8004f3a:	6819      	ldr	r1, [r3, #0]
 8004f3c:	b151      	cbz	r1, 8004f54 <_dtoa_r+0x5c>
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	604a      	str	r2, [r1, #4]
 8004f42:	2301      	movs	r3, #1
 8004f44:	4093      	lsls	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 ff07 	bl	8005d5c <_Bfree>
 8004f4e:	69e3      	ldr	r3, [r4, #28]
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	1e3b      	subs	r3, r7, #0
 8004f56:	bfbb      	ittet	lt
 8004f58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f5c:	9303      	strlt	r3, [sp, #12]
 8004f5e:	2300      	movge	r3, #0
 8004f60:	2201      	movlt	r2, #1
 8004f62:	bfac      	ite	ge
 8004f64:	f8c8 3000 	strge.w	r3, [r8]
 8004f68:	f8c8 2000 	strlt.w	r2, [r8]
 8004f6c:	4b9e      	ldr	r3, [pc, #632]	; (80051e8 <_dtoa_r+0x2f0>)
 8004f6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f72:	ea33 0308 	bics.w	r3, r3, r8
 8004f76:	d11b      	bne.n	8004fb0 <_dtoa_r+0xb8>
 8004f78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004f84:	4333      	orrs	r3, r6
 8004f86:	f000 8593 	beq.w	8005ab0 <_dtoa_r+0xbb8>
 8004f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f8c:	b963      	cbnz	r3, 8004fa8 <_dtoa_r+0xb0>
 8004f8e:	4b97      	ldr	r3, [pc, #604]	; (80051ec <_dtoa_r+0x2f4>)
 8004f90:	e027      	b.n	8004fe2 <_dtoa_r+0xea>
 8004f92:	4b97      	ldr	r3, [pc, #604]	; (80051f0 <_dtoa_r+0x2f8>)
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	9800      	ldr	r0, [sp, #0]
 8004f9e:	b013      	add	sp, #76	; 0x4c
 8004fa0:	ecbd 8b04 	vpop	{d8-d9}
 8004fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa8:	4b90      	ldr	r3, [pc, #576]	; (80051ec <_dtoa_r+0x2f4>)
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	3303      	adds	r3, #3
 8004fae:	e7f3      	b.n	8004f98 <_dtoa_r+0xa0>
 8004fb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	ec51 0b17 	vmov	r0, r1, d7
 8004fba:	eeb0 8a47 	vmov.f32	s16, s14
 8004fbe:	eef0 8a67 	vmov.f32	s17, s15
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f7fb fda8 	bl	8000b18 <__aeabi_dcmpeq>
 8004fc8:	4681      	mov	r9, r0
 8004fca:	b160      	cbz	r0, 8004fe6 <_dtoa_r+0xee>
 8004fcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fce:	2301      	movs	r3, #1
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8568 	beq.w	8005aaa <_dtoa_r+0xbb2>
 8004fda:	4b86      	ldr	r3, [pc, #536]	; (80051f4 <_dtoa_r+0x2fc>)
 8004fdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	e7da      	b.n	8004f9c <_dtoa_r+0xa4>
 8004fe6:	aa10      	add	r2, sp, #64	; 0x40
 8004fe8:	a911      	add	r1, sp, #68	; 0x44
 8004fea:	4620      	mov	r0, r4
 8004fec:	eeb0 0a48 	vmov.f32	s0, s16
 8004ff0:	eef0 0a68 	vmov.f32	s1, s17
 8004ff4:	f001 f994 	bl	8006320 <__d2b>
 8004ff8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004ffc:	4682      	mov	sl, r0
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	d07f      	beq.n	8005102 <_dtoa_r+0x20a>
 8005002:	ee18 3a90 	vmov	r3, s17
 8005006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800500a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800500e:	ec51 0b18 	vmov	r0, r1, d8
 8005012:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800501a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800501e:	4619      	mov	r1, r3
 8005020:	2200      	movs	r2, #0
 8005022:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <_dtoa_r+0x300>)
 8005024:	f7fb f958 	bl	80002d8 <__aeabi_dsub>
 8005028:	a367      	add	r3, pc, #412	; (adr r3, 80051c8 <_dtoa_r+0x2d0>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb fb0b 	bl	8000648 <__aeabi_dmul>
 8005032:	a367      	add	r3, pc, #412	; (adr r3, 80051d0 <_dtoa_r+0x2d8>)
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f7fb f950 	bl	80002dc <__adddf3>
 800503c:	4606      	mov	r6, r0
 800503e:	4628      	mov	r0, r5
 8005040:	460f      	mov	r7, r1
 8005042:	f7fb fa97 	bl	8000574 <__aeabi_i2d>
 8005046:	a364      	add	r3, pc, #400	; (adr r3, 80051d8 <_dtoa_r+0x2e0>)
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f7fb fafc 	bl	8000648 <__aeabi_dmul>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4630      	mov	r0, r6
 8005056:	4639      	mov	r1, r7
 8005058:	f7fb f940 	bl	80002dc <__adddf3>
 800505c:	4606      	mov	r6, r0
 800505e:	460f      	mov	r7, r1
 8005060:	f7fb fda2 	bl	8000ba8 <__aeabi_d2iz>
 8005064:	2200      	movs	r2, #0
 8005066:	4683      	mov	fp, r0
 8005068:	2300      	movs	r3, #0
 800506a:	4630      	mov	r0, r6
 800506c:	4639      	mov	r1, r7
 800506e:	f7fb fd5d 	bl	8000b2c <__aeabi_dcmplt>
 8005072:	b148      	cbz	r0, 8005088 <_dtoa_r+0x190>
 8005074:	4658      	mov	r0, fp
 8005076:	f7fb fa7d 	bl	8000574 <__aeabi_i2d>
 800507a:	4632      	mov	r2, r6
 800507c:	463b      	mov	r3, r7
 800507e:	f7fb fd4b 	bl	8000b18 <__aeabi_dcmpeq>
 8005082:	b908      	cbnz	r0, 8005088 <_dtoa_r+0x190>
 8005084:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005088:	f1bb 0f16 	cmp.w	fp, #22
 800508c:	d857      	bhi.n	800513e <_dtoa_r+0x246>
 800508e:	4b5b      	ldr	r3, [pc, #364]	; (80051fc <_dtoa_r+0x304>)
 8005090:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	ec51 0b18 	vmov	r0, r1, d8
 800509c:	f7fb fd46 	bl	8000b2c <__aeabi_dcmplt>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d04e      	beq.n	8005142 <_dtoa_r+0x24a>
 80050a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050a8:	2300      	movs	r3, #0
 80050aa:	930c      	str	r3, [sp, #48]	; 0x30
 80050ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050ae:	1b5b      	subs	r3, r3, r5
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	bf45      	ittet	mi
 80050b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80050b8:	9305      	strmi	r3, [sp, #20]
 80050ba:	2300      	movpl	r3, #0
 80050bc:	2300      	movmi	r3, #0
 80050be:	9206      	str	r2, [sp, #24]
 80050c0:	bf54      	ite	pl
 80050c2:	9305      	strpl	r3, [sp, #20]
 80050c4:	9306      	strmi	r3, [sp, #24]
 80050c6:	f1bb 0f00 	cmp.w	fp, #0
 80050ca:	db3c      	blt.n	8005146 <_dtoa_r+0x24e>
 80050cc:	9b06      	ldr	r3, [sp, #24]
 80050ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80050d2:	445b      	add	r3, fp
 80050d4:	9306      	str	r3, [sp, #24]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9308      	str	r3, [sp, #32]
 80050da:	9b07      	ldr	r3, [sp, #28]
 80050dc:	2b09      	cmp	r3, #9
 80050de:	d868      	bhi.n	80051b2 <_dtoa_r+0x2ba>
 80050e0:	2b05      	cmp	r3, #5
 80050e2:	bfc4      	itt	gt
 80050e4:	3b04      	subgt	r3, #4
 80050e6:	9307      	strgt	r3, [sp, #28]
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	f1a3 0302 	sub.w	r3, r3, #2
 80050ee:	bfcc      	ite	gt
 80050f0:	2500      	movgt	r5, #0
 80050f2:	2501      	movle	r5, #1
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	f200 8085 	bhi.w	8005204 <_dtoa_r+0x30c>
 80050fa:	e8df f003 	tbb	[pc, r3]
 80050fe:	3b2e      	.short	0x3b2e
 8005100:	5839      	.short	0x5839
 8005102:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005106:	441d      	add	r5, r3
 8005108:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800510c:	2b20      	cmp	r3, #32
 800510e:	bfc1      	itttt	gt
 8005110:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005114:	fa08 f803 	lslgt.w	r8, r8, r3
 8005118:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800511c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005120:	bfd6      	itet	le
 8005122:	f1c3 0320 	rsble	r3, r3, #32
 8005126:	ea48 0003 	orrgt.w	r0, r8, r3
 800512a:	fa06 f003 	lslle.w	r0, r6, r3
 800512e:	f7fb fa11 	bl	8000554 <__aeabi_ui2d>
 8005132:	2201      	movs	r2, #1
 8005134:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005138:	3d01      	subs	r5, #1
 800513a:	920e      	str	r2, [sp, #56]	; 0x38
 800513c:	e76f      	b.n	800501e <_dtoa_r+0x126>
 800513e:	2301      	movs	r3, #1
 8005140:	e7b3      	b.n	80050aa <_dtoa_r+0x1b2>
 8005142:	900c      	str	r0, [sp, #48]	; 0x30
 8005144:	e7b2      	b.n	80050ac <_dtoa_r+0x1b4>
 8005146:	9b05      	ldr	r3, [sp, #20]
 8005148:	eba3 030b 	sub.w	r3, r3, fp
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	f1cb 0300 	rsb	r3, fp, #0
 8005152:	9308      	str	r3, [sp, #32]
 8005154:	2300      	movs	r3, #0
 8005156:	930b      	str	r3, [sp, #44]	; 0x2c
 8005158:	e7bf      	b.n	80050da <_dtoa_r+0x1e2>
 800515a:	2300      	movs	r3, #0
 800515c:	9309      	str	r3, [sp, #36]	; 0x24
 800515e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	dc52      	bgt.n	800520a <_dtoa_r+0x312>
 8005164:	2301      	movs	r3, #1
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	9304      	str	r3, [sp, #16]
 800516a:	461a      	mov	r2, r3
 800516c:	920a      	str	r2, [sp, #40]	; 0x28
 800516e:	e00b      	b.n	8005188 <_dtoa_r+0x290>
 8005170:	2301      	movs	r3, #1
 8005172:	e7f3      	b.n	800515c <_dtoa_r+0x264>
 8005174:	2300      	movs	r3, #0
 8005176:	9309      	str	r3, [sp, #36]	; 0x24
 8005178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800517a:	445b      	add	r3, fp
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	3301      	adds	r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	bfb8      	it	lt
 8005186:	2301      	movlt	r3, #1
 8005188:	69e0      	ldr	r0, [r4, #28]
 800518a:	2100      	movs	r1, #0
 800518c:	2204      	movs	r2, #4
 800518e:	f102 0614 	add.w	r6, r2, #20
 8005192:	429e      	cmp	r6, r3
 8005194:	d93d      	bls.n	8005212 <_dtoa_r+0x31a>
 8005196:	6041      	str	r1, [r0, #4]
 8005198:	4620      	mov	r0, r4
 800519a:	f000 fd9f 	bl	8005cdc <_Balloc>
 800519e:	9000      	str	r0, [sp, #0]
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d139      	bne.n	8005218 <_dtoa_r+0x320>
 80051a4:	4b16      	ldr	r3, [pc, #88]	; (8005200 <_dtoa_r+0x308>)
 80051a6:	4602      	mov	r2, r0
 80051a8:	f240 11af 	movw	r1, #431	; 0x1af
 80051ac:	e6bd      	b.n	8004f2a <_dtoa_r+0x32>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e7e1      	b.n	8005176 <_dtoa_r+0x27e>
 80051b2:	2501      	movs	r5, #1
 80051b4:	2300      	movs	r3, #0
 80051b6:	9307      	str	r3, [sp, #28]
 80051b8:	9509      	str	r5, [sp, #36]	; 0x24
 80051ba:	f04f 33ff 	mov.w	r3, #4294967295
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	9304      	str	r3, [sp, #16]
 80051c2:	2200      	movs	r2, #0
 80051c4:	2312      	movs	r3, #18
 80051c6:	e7d1      	b.n	800516c <_dtoa_r+0x274>
 80051c8:	636f4361 	.word	0x636f4361
 80051cc:	3fd287a7 	.word	0x3fd287a7
 80051d0:	8b60c8b3 	.word	0x8b60c8b3
 80051d4:	3fc68a28 	.word	0x3fc68a28
 80051d8:	509f79fb 	.word	0x509f79fb
 80051dc:	3fd34413 	.word	0x3fd34413
 80051e0:	08006f93 	.word	0x08006f93
 80051e4:	08006faa 	.word	0x08006faa
 80051e8:	7ff00000 	.word	0x7ff00000
 80051ec:	08006f8f 	.word	0x08006f8f
 80051f0:	08006f86 	.word	0x08006f86
 80051f4:	08006f63 	.word	0x08006f63
 80051f8:	3ff80000 	.word	0x3ff80000
 80051fc:	08007098 	.word	0x08007098
 8005200:	08007002 	.word	0x08007002
 8005204:	2301      	movs	r3, #1
 8005206:	9309      	str	r3, [sp, #36]	; 0x24
 8005208:	e7d7      	b.n	80051ba <_dtoa_r+0x2c2>
 800520a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	e7ba      	b.n	8005188 <_dtoa_r+0x290>
 8005212:	3101      	adds	r1, #1
 8005214:	0052      	lsls	r2, r2, #1
 8005216:	e7ba      	b.n	800518e <_dtoa_r+0x296>
 8005218:	69e3      	ldr	r3, [r4, #28]
 800521a:	9a00      	ldr	r2, [sp, #0]
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	9b04      	ldr	r3, [sp, #16]
 8005220:	2b0e      	cmp	r3, #14
 8005222:	f200 80a8 	bhi.w	8005376 <_dtoa_r+0x47e>
 8005226:	2d00      	cmp	r5, #0
 8005228:	f000 80a5 	beq.w	8005376 <_dtoa_r+0x47e>
 800522c:	f1bb 0f00 	cmp.w	fp, #0
 8005230:	dd38      	ble.n	80052a4 <_dtoa_r+0x3ac>
 8005232:	4bc0      	ldr	r3, [pc, #768]	; (8005534 <_dtoa_r+0x63c>)
 8005234:	f00b 020f 	and.w	r2, fp, #15
 8005238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800523c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005240:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005244:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005248:	d019      	beq.n	800527e <_dtoa_r+0x386>
 800524a:	4bbb      	ldr	r3, [pc, #748]	; (8005538 <_dtoa_r+0x640>)
 800524c:	ec51 0b18 	vmov	r0, r1, d8
 8005250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005254:	f7fb fb22 	bl	800089c <__aeabi_ddiv>
 8005258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800525c:	f008 080f 	and.w	r8, r8, #15
 8005260:	2503      	movs	r5, #3
 8005262:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005538 <_dtoa_r+0x640>
 8005266:	f1b8 0f00 	cmp.w	r8, #0
 800526a:	d10a      	bne.n	8005282 <_dtoa_r+0x38a>
 800526c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005270:	4632      	mov	r2, r6
 8005272:	463b      	mov	r3, r7
 8005274:	f7fb fb12 	bl	800089c <__aeabi_ddiv>
 8005278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800527c:	e02b      	b.n	80052d6 <_dtoa_r+0x3de>
 800527e:	2502      	movs	r5, #2
 8005280:	e7ef      	b.n	8005262 <_dtoa_r+0x36a>
 8005282:	f018 0f01 	tst.w	r8, #1
 8005286:	d008      	beq.n	800529a <_dtoa_r+0x3a2>
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005290:	f7fb f9da 	bl	8000648 <__aeabi_dmul>
 8005294:	3501      	adds	r5, #1
 8005296:	4606      	mov	r6, r0
 8005298:	460f      	mov	r7, r1
 800529a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800529e:	f109 0908 	add.w	r9, r9, #8
 80052a2:	e7e0      	b.n	8005266 <_dtoa_r+0x36e>
 80052a4:	f000 809f 	beq.w	80053e6 <_dtoa_r+0x4ee>
 80052a8:	f1cb 0600 	rsb	r6, fp, #0
 80052ac:	4ba1      	ldr	r3, [pc, #644]	; (8005534 <_dtoa_r+0x63c>)
 80052ae:	4fa2      	ldr	r7, [pc, #648]	; (8005538 <_dtoa_r+0x640>)
 80052b0:	f006 020f 	and.w	r2, r6, #15
 80052b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	ec51 0b18 	vmov	r0, r1, d8
 80052c0:	f7fb f9c2 	bl	8000648 <__aeabi_dmul>
 80052c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052c8:	1136      	asrs	r6, r6, #4
 80052ca:	2300      	movs	r3, #0
 80052cc:	2502      	movs	r5, #2
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d17e      	bne.n	80053d0 <_dtoa_r+0x4d8>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1d0      	bne.n	8005278 <_dtoa_r+0x380>
 80052d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 8084 	beq.w	80053ea <_dtoa_r+0x4f2>
 80052e2:	4b96      	ldr	r3, [pc, #600]	; (800553c <_dtoa_r+0x644>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	4640      	mov	r0, r8
 80052e8:	4649      	mov	r1, r9
 80052ea:	f7fb fc1f 	bl	8000b2c <__aeabi_dcmplt>
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d07b      	beq.n	80053ea <_dtoa_r+0x4f2>
 80052f2:	9b04      	ldr	r3, [sp, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d078      	beq.n	80053ea <_dtoa_r+0x4f2>
 80052f8:	9b01      	ldr	r3, [sp, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	dd39      	ble.n	8005372 <_dtoa_r+0x47a>
 80052fe:	4b90      	ldr	r3, [pc, #576]	; (8005540 <_dtoa_r+0x648>)
 8005300:	2200      	movs	r2, #0
 8005302:	4640      	mov	r0, r8
 8005304:	4649      	mov	r1, r9
 8005306:	f7fb f99f 	bl	8000648 <__aeabi_dmul>
 800530a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800530e:	9e01      	ldr	r6, [sp, #4]
 8005310:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005314:	3501      	adds	r5, #1
 8005316:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800531a:	4628      	mov	r0, r5
 800531c:	f7fb f92a 	bl	8000574 <__aeabi_i2d>
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	f7fb f990 	bl	8000648 <__aeabi_dmul>
 8005328:	4b86      	ldr	r3, [pc, #536]	; (8005544 <_dtoa_r+0x64c>)
 800532a:	2200      	movs	r2, #0
 800532c:	f7fa ffd6 	bl	80002dc <__adddf3>
 8005330:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005338:	9303      	str	r3, [sp, #12]
 800533a:	2e00      	cmp	r6, #0
 800533c:	d158      	bne.n	80053f0 <_dtoa_r+0x4f8>
 800533e:	4b82      	ldr	r3, [pc, #520]	; (8005548 <_dtoa_r+0x650>)
 8005340:	2200      	movs	r2, #0
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f7fa ffc7 	bl	80002d8 <__aeabi_dsub>
 800534a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800534e:	4680      	mov	r8, r0
 8005350:	4689      	mov	r9, r1
 8005352:	f7fb fc09 	bl	8000b68 <__aeabi_dcmpgt>
 8005356:	2800      	cmp	r0, #0
 8005358:	f040 8296 	bne.w	8005888 <_dtoa_r+0x990>
 800535c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005360:	4640      	mov	r0, r8
 8005362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005366:	4649      	mov	r1, r9
 8005368:	f7fb fbe0 	bl	8000b2c <__aeabi_dcmplt>
 800536c:	2800      	cmp	r0, #0
 800536e:	f040 8289 	bne.w	8005884 <_dtoa_r+0x98c>
 8005372:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005378:	2b00      	cmp	r3, #0
 800537a:	f2c0 814e 	blt.w	800561a <_dtoa_r+0x722>
 800537e:	f1bb 0f0e 	cmp.w	fp, #14
 8005382:	f300 814a 	bgt.w	800561a <_dtoa_r+0x722>
 8005386:	4b6b      	ldr	r3, [pc, #428]	; (8005534 <_dtoa_r+0x63c>)
 8005388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800538c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005392:	2b00      	cmp	r3, #0
 8005394:	f280 80dc 	bge.w	8005550 <_dtoa_r+0x658>
 8005398:	9b04      	ldr	r3, [sp, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f300 80d8 	bgt.w	8005550 <_dtoa_r+0x658>
 80053a0:	f040 826f 	bne.w	8005882 <_dtoa_r+0x98a>
 80053a4:	4b68      	ldr	r3, [pc, #416]	; (8005548 <_dtoa_r+0x650>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	4640      	mov	r0, r8
 80053aa:	4649      	mov	r1, r9
 80053ac:	f7fb f94c 	bl	8000648 <__aeabi_dmul>
 80053b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053b4:	f7fb fbce 	bl	8000b54 <__aeabi_dcmpge>
 80053b8:	9e04      	ldr	r6, [sp, #16]
 80053ba:	4637      	mov	r7, r6
 80053bc:	2800      	cmp	r0, #0
 80053be:	f040 8245 	bne.w	800584c <_dtoa_r+0x954>
 80053c2:	9d00      	ldr	r5, [sp, #0]
 80053c4:	2331      	movs	r3, #49	; 0x31
 80053c6:	f805 3b01 	strb.w	r3, [r5], #1
 80053ca:	f10b 0b01 	add.w	fp, fp, #1
 80053ce:	e241      	b.n	8005854 <_dtoa_r+0x95c>
 80053d0:	07f2      	lsls	r2, r6, #31
 80053d2:	d505      	bpl.n	80053e0 <_dtoa_r+0x4e8>
 80053d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053d8:	f7fb f936 	bl	8000648 <__aeabi_dmul>
 80053dc:	3501      	adds	r5, #1
 80053de:	2301      	movs	r3, #1
 80053e0:	1076      	asrs	r6, r6, #1
 80053e2:	3708      	adds	r7, #8
 80053e4:	e773      	b.n	80052ce <_dtoa_r+0x3d6>
 80053e6:	2502      	movs	r5, #2
 80053e8:	e775      	b.n	80052d6 <_dtoa_r+0x3de>
 80053ea:	9e04      	ldr	r6, [sp, #16]
 80053ec:	465f      	mov	r7, fp
 80053ee:	e792      	b.n	8005316 <_dtoa_r+0x41e>
 80053f0:	9900      	ldr	r1, [sp, #0]
 80053f2:	4b50      	ldr	r3, [pc, #320]	; (8005534 <_dtoa_r+0x63c>)
 80053f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053f8:	4431      	add	r1, r6
 80053fa:	9102      	str	r1, [sp, #8]
 80053fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053fe:	eeb0 9a47 	vmov.f32	s18, s14
 8005402:	eef0 9a67 	vmov.f32	s19, s15
 8005406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800540a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800540e:	2900      	cmp	r1, #0
 8005410:	d044      	beq.n	800549c <_dtoa_r+0x5a4>
 8005412:	494e      	ldr	r1, [pc, #312]	; (800554c <_dtoa_r+0x654>)
 8005414:	2000      	movs	r0, #0
 8005416:	f7fb fa41 	bl	800089c <__aeabi_ddiv>
 800541a:	ec53 2b19 	vmov	r2, r3, d9
 800541e:	f7fa ff5b 	bl	80002d8 <__aeabi_dsub>
 8005422:	9d00      	ldr	r5, [sp, #0]
 8005424:	ec41 0b19 	vmov	d9, r0, r1
 8005428:	4649      	mov	r1, r9
 800542a:	4640      	mov	r0, r8
 800542c:	f7fb fbbc 	bl	8000ba8 <__aeabi_d2iz>
 8005430:	4606      	mov	r6, r0
 8005432:	f7fb f89f 	bl	8000574 <__aeabi_i2d>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4640      	mov	r0, r8
 800543c:	4649      	mov	r1, r9
 800543e:	f7fa ff4b 	bl	80002d8 <__aeabi_dsub>
 8005442:	3630      	adds	r6, #48	; 0x30
 8005444:	f805 6b01 	strb.w	r6, [r5], #1
 8005448:	ec53 2b19 	vmov	r2, r3, d9
 800544c:	4680      	mov	r8, r0
 800544e:	4689      	mov	r9, r1
 8005450:	f7fb fb6c 	bl	8000b2c <__aeabi_dcmplt>
 8005454:	2800      	cmp	r0, #0
 8005456:	d164      	bne.n	8005522 <_dtoa_r+0x62a>
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	4937      	ldr	r1, [pc, #220]	; (800553c <_dtoa_r+0x644>)
 800545e:	2000      	movs	r0, #0
 8005460:	f7fa ff3a 	bl	80002d8 <__aeabi_dsub>
 8005464:	ec53 2b19 	vmov	r2, r3, d9
 8005468:	f7fb fb60 	bl	8000b2c <__aeabi_dcmplt>
 800546c:	2800      	cmp	r0, #0
 800546e:	f040 80b6 	bne.w	80055de <_dtoa_r+0x6e6>
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	429d      	cmp	r5, r3
 8005476:	f43f af7c 	beq.w	8005372 <_dtoa_r+0x47a>
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <_dtoa_r+0x648>)
 800547c:	ec51 0b19 	vmov	r0, r1, d9
 8005480:	2200      	movs	r2, #0
 8005482:	f7fb f8e1 	bl	8000648 <__aeabi_dmul>
 8005486:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <_dtoa_r+0x648>)
 8005488:	ec41 0b19 	vmov	d9, r0, r1
 800548c:	2200      	movs	r2, #0
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fb f8d9 	bl	8000648 <__aeabi_dmul>
 8005496:	4680      	mov	r8, r0
 8005498:	4689      	mov	r9, r1
 800549a:	e7c5      	b.n	8005428 <_dtoa_r+0x530>
 800549c:	ec51 0b17 	vmov	r0, r1, d7
 80054a0:	f7fb f8d2 	bl	8000648 <__aeabi_dmul>
 80054a4:	9b02      	ldr	r3, [sp, #8]
 80054a6:	9d00      	ldr	r5, [sp, #0]
 80054a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80054aa:	ec41 0b19 	vmov	d9, r0, r1
 80054ae:	4649      	mov	r1, r9
 80054b0:	4640      	mov	r0, r8
 80054b2:	f7fb fb79 	bl	8000ba8 <__aeabi_d2iz>
 80054b6:	4606      	mov	r6, r0
 80054b8:	f7fb f85c 	bl	8000574 <__aeabi_i2d>
 80054bc:	3630      	adds	r6, #48	; 0x30
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fa ff07 	bl	80002d8 <__aeabi_dsub>
 80054ca:	f805 6b01 	strb.w	r6, [r5], #1
 80054ce:	9b02      	ldr	r3, [sp, #8]
 80054d0:	429d      	cmp	r5, r3
 80054d2:	4680      	mov	r8, r0
 80054d4:	4689      	mov	r9, r1
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	d124      	bne.n	8005526 <_dtoa_r+0x62e>
 80054dc:	4b1b      	ldr	r3, [pc, #108]	; (800554c <_dtoa_r+0x654>)
 80054de:	ec51 0b19 	vmov	r0, r1, d9
 80054e2:	f7fa fefb 	bl	80002dc <__adddf3>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f7fb fb3b 	bl	8000b68 <__aeabi_dcmpgt>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d173      	bne.n	80055de <_dtoa_r+0x6e6>
 80054f6:	ec53 2b19 	vmov	r2, r3, d9
 80054fa:	4914      	ldr	r1, [pc, #80]	; (800554c <_dtoa_r+0x654>)
 80054fc:	2000      	movs	r0, #0
 80054fe:	f7fa feeb 	bl	80002d8 <__aeabi_dsub>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4640      	mov	r0, r8
 8005508:	4649      	mov	r1, r9
 800550a:	f7fb fb0f 	bl	8000b2c <__aeabi_dcmplt>
 800550e:	2800      	cmp	r0, #0
 8005510:	f43f af2f 	beq.w	8005372 <_dtoa_r+0x47a>
 8005514:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005516:	1e6b      	subs	r3, r5, #1
 8005518:	930f      	str	r3, [sp, #60]	; 0x3c
 800551a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800551e:	2b30      	cmp	r3, #48	; 0x30
 8005520:	d0f8      	beq.n	8005514 <_dtoa_r+0x61c>
 8005522:	46bb      	mov	fp, r7
 8005524:	e04a      	b.n	80055bc <_dtoa_r+0x6c4>
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_dtoa_r+0x648>)
 8005528:	f7fb f88e 	bl	8000648 <__aeabi_dmul>
 800552c:	4680      	mov	r8, r0
 800552e:	4689      	mov	r9, r1
 8005530:	e7bd      	b.n	80054ae <_dtoa_r+0x5b6>
 8005532:	bf00      	nop
 8005534:	08007098 	.word	0x08007098
 8005538:	08007070 	.word	0x08007070
 800553c:	3ff00000 	.word	0x3ff00000
 8005540:	40240000 	.word	0x40240000
 8005544:	401c0000 	.word	0x401c0000
 8005548:	40140000 	.word	0x40140000
 800554c:	3fe00000 	.word	0x3fe00000
 8005550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005554:	9d00      	ldr	r5, [sp, #0]
 8005556:	4642      	mov	r2, r8
 8005558:	464b      	mov	r3, r9
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fb f99d 	bl	800089c <__aeabi_ddiv>
 8005562:	f7fb fb21 	bl	8000ba8 <__aeabi_d2iz>
 8005566:	9001      	str	r0, [sp, #4]
 8005568:	f7fb f804 	bl	8000574 <__aeabi_i2d>
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	f7fb f86a 	bl	8000648 <__aeabi_dmul>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4630      	mov	r0, r6
 800557a:	4639      	mov	r1, r7
 800557c:	f7fa feac 	bl	80002d8 <__aeabi_dsub>
 8005580:	9e01      	ldr	r6, [sp, #4]
 8005582:	9f04      	ldr	r7, [sp, #16]
 8005584:	3630      	adds	r6, #48	; 0x30
 8005586:	f805 6b01 	strb.w	r6, [r5], #1
 800558a:	9e00      	ldr	r6, [sp, #0]
 800558c:	1bae      	subs	r6, r5, r6
 800558e:	42b7      	cmp	r7, r6
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	d134      	bne.n	8005600 <_dtoa_r+0x708>
 8005596:	f7fa fea1 	bl	80002dc <__adddf3>
 800559a:	4642      	mov	r2, r8
 800559c:	464b      	mov	r3, r9
 800559e:	4606      	mov	r6, r0
 80055a0:	460f      	mov	r7, r1
 80055a2:	f7fb fae1 	bl	8000b68 <__aeabi_dcmpgt>
 80055a6:	b9c8      	cbnz	r0, 80055dc <_dtoa_r+0x6e4>
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	4630      	mov	r0, r6
 80055ae:	4639      	mov	r1, r7
 80055b0:	f7fb fab2 	bl	8000b18 <__aeabi_dcmpeq>
 80055b4:	b110      	cbz	r0, 80055bc <_dtoa_r+0x6c4>
 80055b6:	9b01      	ldr	r3, [sp, #4]
 80055b8:	07db      	lsls	r3, r3, #31
 80055ba:	d40f      	bmi.n	80055dc <_dtoa_r+0x6e4>
 80055bc:	4651      	mov	r1, sl
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 fbcc 	bl	8005d5c <_Bfree>
 80055c4:	2300      	movs	r3, #0
 80055c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055c8:	702b      	strb	r3, [r5, #0]
 80055ca:	f10b 0301 	add.w	r3, fp, #1
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f43f ace2 	beq.w	8004f9c <_dtoa_r+0xa4>
 80055d8:	601d      	str	r5, [r3, #0]
 80055da:	e4df      	b.n	8004f9c <_dtoa_r+0xa4>
 80055dc:	465f      	mov	r7, fp
 80055de:	462b      	mov	r3, r5
 80055e0:	461d      	mov	r5, r3
 80055e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055e6:	2a39      	cmp	r2, #57	; 0x39
 80055e8:	d106      	bne.n	80055f8 <_dtoa_r+0x700>
 80055ea:	9a00      	ldr	r2, [sp, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1f7      	bne.n	80055e0 <_dtoa_r+0x6e8>
 80055f0:	9900      	ldr	r1, [sp, #0]
 80055f2:	2230      	movs	r2, #48	; 0x30
 80055f4:	3701      	adds	r7, #1
 80055f6:	700a      	strb	r2, [r1, #0]
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	3201      	adds	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e790      	b.n	8005522 <_dtoa_r+0x62a>
 8005600:	4ba3      	ldr	r3, [pc, #652]	; (8005890 <_dtoa_r+0x998>)
 8005602:	2200      	movs	r2, #0
 8005604:	f7fb f820 	bl	8000648 <__aeabi_dmul>
 8005608:	2200      	movs	r2, #0
 800560a:	2300      	movs	r3, #0
 800560c:	4606      	mov	r6, r0
 800560e:	460f      	mov	r7, r1
 8005610:	f7fb fa82 	bl	8000b18 <__aeabi_dcmpeq>
 8005614:	2800      	cmp	r0, #0
 8005616:	d09e      	beq.n	8005556 <_dtoa_r+0x65e>
 8005618:	e7d0      	b.n	80055bc <_dtoa_r+0x6c4>
 800561a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800561c:	2a00      	cmp	r2, #0
 800561e:	f000 80ca 	beq.w	80057b6 <_dtoa_r+0x8be>
 8005622:	9a07      	ldr	r2, [sp, #28]
 8005624:	2a01      	cmp	r2, #1
 8005626:	f300 80ad 	bgt.w	8005784 <_dtoa_r+0x88c>
 800562a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800562c:	2a00      	cmp	r2, #0
 800562e:	f000 80a5 	beq.w	800577c <_dtoa_r+0x884>
 8005632:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005636:	9e08      	ldr	r6, [sp, #32]
 8005638:	9d05      	ldr	r5, [sp, #20]
 800563a:	9a05      	ldr	r2, [sp, #20]
 800563c:	441a      	add	r2, r3
 800563e:	9205      	str	r2, [sp, #20]
 8005640:	9a06      	ldr	r2, [sp, #24]
 8005642:	2101      	movs	r1, #1
 8005644:	441a      	add	r2, r3
 8005646:	4620      	mov	r0, r4
 8005648:	9206      	str	r2, [sp, #24]
 800564a:	f000 fc3d 	bl	8005ec8 <__i2b>
 800564e:	4607      	mov	r7, r0
 8005650:	b165      	cbz	r5, 800566c <_dtoa_r+0x774>
 8005652:	9b06      	ldr	r3, [sp, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	dd09      	ble.n	800566c <_dtoa_r+0x774>
 8005658:	42ab      	cmp	r3, r5
 800565a:	9a05      	ldr	r2, [sp, #20]
 800565c:	bfa8      	it	ge
 800565e:	462b      	movge	r3, r5
 8005660:	1ad2      	subs	r2, r2, r3
 8005662:	9205      	str	r2, [sp, #20]
 8005664:	9a06      	ldr	r2, [sp, #24]
 8005666:	1aed      	subs	r5, r5, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	9306      	str	r3, [sp, #24]
 800566c:	9b08      	ldr	r3, [sp, #32]
 800566e:	b1f3      	cbz	r3, 80056ae <_dtoa_r+0x7b6>
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80a3 	beq.w	80057be <_dtoa_r+0x8c6>
 8005678:	2e00      	cmp	r6, #0
 800567a:	dd10      	ble.n	800569e <_dtoa_r+0x7a6>
 800567c:	4639      	mov	r1, r7
 800567e:	4632      	mov	r2, r6
 8005680:	4620      	mov	r0, r4
 8005682:	f000 fce1 	bl	8006048 <__pow5mult>
 8005686:	4652      	mov	r2, sl
 8005688:	4601      	mov	r1, r0
 800568a:	4607      	mov	r7, r0
 800568c:	4620      	mov	r0, r4
 800568e:	f000 fc31 	bl	8005ef4 <__multiply>
 8005692:	4651      	mov	r1, sl
 8005694:	4680      	mov	r8, r0
 8005696:	4620      	mov	r0, r4
 8005698:	f000 fb60 	bl	8005d5c <_Bfree>
 800569c:	46c2      	mov	sl, r8
 800569e:	9b08      	ldr	r3, [sp, #32]
 80056a0:	1b9a      	subs	r2, r3, r6
 80056a2:	d004      	beq.n	80056ae <_dtoa_r+0x7b6>
 80056a4:	4651      	mov	r1, sl
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fcce 	bl	8006048 <__pow5mult>
 80056ac:	4682      	mov	sl, r0
 80056ae:	2101      	movs	r1, #1
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 fc09 	bl	8005ec8 <__i2b>
 80056b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	4606      	mov	r6, r0
 80056bc:	f340 8081 	ble.w	80057c2 <_dtoa_r+0x8ca>
 80056c0:	461a      	mov	r2, r3
 80056c2:	4601      	mov	r1, r0
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 fcbf 	bl	8006048 <__pow5mult>
 80056ca:	9b07      	ldr	r3, [sp, #28]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	4606      	mov	r6, r0
 80056d0:	dd7a      	ble.n	80057c8 <_dtoa_r+0x8d0>
 80056d2:	f04f 0800 	mov.w	r8, #0
 80056d6:	6933      	ldr	r3, [r6, #16]
 80056d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056dc:	6918      	ldr	r0, [r3, #16]
 80056de:	f000 fba5 	bl	8005e2c <__hi0bits>
 80056e2:	f1c0 0020 	rsb	r0, r0, #32
 80056e6:	9b06      	ldr	r3, [sp, #24]
 80056e8:	4418      	add	r0, r3
 80056ea:	f010 001f 	ands.w	r0, r0, #31
 80056ee:	f000 8094 	beq.w	800581a <_dtoa_r+0x922>
 80056f2:	f1c0 0320 	rsb	r3, r0, #32
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	f340 8085 	ble.w	8005806 <_dtoa_r+0x90e>
 80056fc:	9b05      	ldr	r3, [sp, #20]
 80056fe:	f1c0 001c 	rsb	r0, r0, #28
 8005702:	4403      	add	r3, r0
 8005704:	9305      	str	r3, [sp, #20]
 8005706:	9b06      	ldr	r3, [sp, #24]
 8005708:	4403      	add	r3, r0
 800570a:	4405      	add	r5, r0
 800570c:	9306      	str	r3, [sp, #24]
 800570e:	9b05      	ldr	r3, [sp, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	dd05      	ble.n	8005720 <_dtoa_r+0x828>
 8005714:	4651      	mov	r1, sl
 8005716:	461a      	mov	r2, r3
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fcef 	bl	80060fc <__lshift>
 800571e:	4682      	mov	sl, r0
 8005720:	9b06      	ldr	r3, [sp, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	dd05      	ble.n	8005732 <_dtoa_r+0x83a>
 8005726:	4631      	mov	r1, r6
 8005728:	461a      	mov	r2, r3
 800572a:	4620      	mov	r0, r4
 800572c:	f000 fce6 	bl	80060fc <__lshift>
 8005730:	4606      	mov	r6, r0
 8005732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005734:	2b00      	cmp	r3, #0
 8005736:	d072      	beq.n	800581e <_dtoa_r+0x926>
 8005738:	4631      	mov	r1, r6
 800573a:	4650      	mov	r0, sl
 800573c:	f000 fd4a 	bl	80061d4 <__mcmp>
 8005740:	2800      	cmp	r0, #0
 8005742:	da6c      	bge.n	800581e <_dtoa_r+0x926>
 8005744:	2300      	movs	r3, #0
 8005746:	4651      	mov	r1, sl
 8005748:	220a      	movs	r2, #10
 800574a:	4620      	mov	r0, r4
 800574c:	f000 fb28 	bl	8005da0 <__multadd>
 8005750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005752:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005756:	4682      	mov	sl, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 81b0 	beq.w	8005abe <_dtoa_r+0xbc6>
 800575e:	2300      	movs	r3, #0
 8005760:	4639      	mov	r1, r7
 8005762:	220a      	movs	r2, #10
 8005764:	4620      	mov	r0, r4
 8005766:	f000 fb1b 	bl	8005da0 <__multadd>
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	4607      	mov	r7, r0
 8005770:	f300 8096 	bgt.w	80058a0 <_dtoa_r+0x9a8>
 8005774:	9b07      	ldr	r3, [sp, #28]
 8005776:	2b02      	cmp	r3, #2
 8005778:	dc59      	bgt.n	800582e <_dtoa_r+0x936>
 800577a:	e091      	b.n	80058a0 <_dtoa_r+0x9a8>
 800577c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800577e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005782:	e758      	b.n	8005636 <_dtoa_r+0x73e>
 8005784:	9b04      	ldr	r3, [sp, #16]
 8005786:	1e5e      	subs	r6, r3, #1
 8005788:	9b08      	ldr	r3, [sp, #32]
 800578a:	42b3      	cmp	r3, r6
 800578c:	bfbf      	itttt	lt
 800578e:	9b08      	ldrlt	r3, [sp, #32]
 8005790:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005792:	9608      	strlt	r6, [sp, #32]
 8005794:	1af3      	sublt	r3, r6, r3
 8005796:	bfb4      	ite	lt
 8005798:	18d2      	addlt	r2, r2, r3
 800579a:	1b9e      	subge	r6, r3, r6
 800579c:	9b04      	ldr	r3, [sp, #16]
 800579e:	bfbc      	itt	lt
 80057a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80057a2:	2600      	movlt	r6, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bfb7      	itett	lt
 80057a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80057ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80057b0:	1a9d      	sublt	r5, r3, r2
 80057b2:	2300      	movlt	r3, #0
 80057b4:	e741      	b.n	800563a <_dtoa_r+0x742>
 80057b6:	9e08      	ldr	r6, [sp, #32]
 80057b8:	9d05      	ldr	r5, [sp, #20]
 80057ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057bc:	e748      	b.n	8005650 <_dtoa_r+0x758>
 80057be:	9a08      	ldr	r2, [sp, #32]
 80057c0:	e770      	b.n	80056a4 <_dtoa_r+0x7ac>
 80057c2:	9b07      	ldr	r3, [sp, #28]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	dc19      	bgt.n	80057fc <_dtoa_r+0x904>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	b9bb      	cbnz	r3, 80057fc <_dtoa_r+0x904>
 80057cc:	9b03      	ldr	r3, [sp, #12]
 80057ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d2:	b99b      	cbnz	r3, 80057fc <_dtoa_r+0x904>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057da:	0d1b      	lsrs	r3, r3, #20
 80057dc:	051b      	lsls	r3, r3, #20
 80057de:	b183      	cbz	r3, 8005802 <_dtoa_r+0x90a>
 80057e0:	9b05      	ldr	r3, [sp, #20]
 80057e2:	3301      	adds	r3, #1
 80057e4:	9305      	str	r3, [sp, #20]
 80057e6:	9b06      	ldr	r3, [sp, #24]
 80057e8:	3301      	adds	r3, #1
 80057ea:	9306      	str	r3, [sp, #24]
 80057ec:	f04f 0801 	mov.w	r8, #1
 80057f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f47f af6f 	bne.w	80056d6 <_dtoa_r+0x7de>
 80057f8:	2001      	movs	r0, #1
 80057fa:	e774      	b.n	80056e6 <_dtoa_r+0x7ee>
 80057fc:	f04f 0800 	mov.w	r8, #0
 8005800:	e7f6      	b.n	80057f0 <_dtoa_r+0x8f8>
 8005802:	4698      	mov	r8, r3
 8005804:	e7f4      	b.n	80057f0 <_dtoa_r+0x8f8>
 8005806:	d082      	beq.n	800570e <_dtoa_r+0x816>
 8005808:	9a05      	ldr	r2, [sp, #20]
 800580a:	331c      	adds	r3, #28
 800580c:	441a      	add	r2, r3
 800580e:	9205      	str	r2, [sp, #20]
 8005810:	9a06      	ldr	r2, [sp, #24]
 8005812:	441a      	add	r2, r3
 8005814:	441d      	add	r5, r3
 8005816:	9206      	str	r2, [sp, #24]
 8005818:	e779      	b.n	800570e <_dtoa_r+0x816>
 800581a:	4603      	mov	r3, r0
 800581c:	e7f4      	b.n	8005808 <_dtoa_r+0x910>
 800581e:	9b04      	ldr	r3, [sp, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	dc37      	bgt.n	8005894 <_dtoa_r+0x99c>
 8005824:	9b07      	ldr	r3, [sp, #28]
 8005826:	2b02      	cmp	r3, #2
 8005828:	dd34      	ble.n	8005894 <_dtoa_r+0x99c>
 800582a:	9b04      	ldr	r3, [sp, #16]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	9b01      	ldr	r3, [sp, #4]
 8005830:	b963      	cbnz	r3, 800584c <_dtoa_r+0x954>
 8005832:	4631      	mov	r1, r6
 8005834:	2205      	movs	r2, #5
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fab2 	bl	8005da0 <__multadd>
 800583c:	4601      	mov	r1, r0
 800583e:	4606      	mov	r6, r0
 8005840:	4650      	mov	r0, sl
 8005842:	f000 fcc7 	bl	80061d4 <__mcmp>
 8005846:	2800      	cmp	r0, #0
 8005848:	f73f adbb 	bgt.w	80053c2 <_dtoa_r+0x4ca>
 800584c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800584e:	9d00      	ldr	r5, [sp, #0]
 8005850:	ea6f 0b03 	mvn.w	fp, r3
 8005854:	f04f 0800 	mov.w	r8, #0
 8005858:	4631      	mov	r1, r6
 800585a:	4620      	mov	r0, r4
 800585c:	f000 fa7e 	bl	8005d5c <_Bfree>
 8005860:	2f00      	cmp	r7, #0
 8005862:	f43f aeab 	beq.w	80055bc <_dtoa_r+0x6c4>
 8005866:	f1b8 0f00 	cmp.w	r8, #0
 800586a:	d005      	beq.n	8005878 <_dtoa_r+0x980>
 800586c:	45b8      	cmp	r8, r7
 800586e:	d003      	beq.n	8005878 <_dtoa_r+0x980>
 8005870:	4641      	mov	r1, r8
 8005872:	4620      	mov	r0, r4
 8005874:	f000 fa72 	bl	8005d5c <_Bfree>
 8005878:	4639      	mov	r1, r7
 800587a:	4620      	mov	r0, r4
 800587c:	f000 fa6e 	bl	8005d5c <_Bfree>
 8005880:	e69c      	b.n	80055bc <_dtoa_r+0x6c4>
 8005882:	2600      	movs	r6, #0
 8005884:	4637      	mov	r7, r6
 8005886:	e7e1      	b.n	800584c <_dtoa_r+0x954>
 8005888:	46bb      	mov	fp, r7
 800588a:	4637      	mov	r7, r6
 800588c:	e599      	b.n	80053c2 <_dtoa_r+0x4ca>
 800588e:	bf00      	nop
 8005890:	40240000 	.word	0x40240000
 8005894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80c8 	beq.w	8005a2c <_dtoa_r+0xb34>
 800589c:	9b04      	ldr	r3, [sp, #16]
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	dd05      	ble.n	80058b0 <_dtoa_r+0x9b8>
 80058a4:	4639      	mov	r1, r7
 80058a6:	462a      	mov	r2, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 fc27 	bl	80060fc <__lshift>
 80058ae:	4607      	mov	r7, r0
 80058b0:	f1b8 0f00 	cmp.w	r8, #0
 80058b4:	d05b      	beq.n	800596e <_dtoa_r+0xa76>
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 fa0f 	bl	8005cdc <_Balloc>
 80058be:	4605      	mov	r5, r0
 80058c0:	b928      	cbnz	r0, 80058ce <_dtoa_r+0x9d6>
 80058c2:	4b83      	ldr	r3, [pc, #524]	; (8005ad0 <_dtoa_r+0xbd8>)
 80058c4:	4602      	mov	r2, r0
 80058c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80058ca:	f7ff bb2e 	b.w	8004f2a <_dtoa_r+0x32>
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	3202      	adds	r2, #2
 80058d2:	0092      	lsls	r2, r2, #2
 80058d4:	f107 010c 	add.w	r1, r7, #12
 80058d8:	300c      	adds	r0, #12
 80058da:	f000 ffab 	bl	8006834 <memcpy>
 80058de:	2201      	movs	r2, #1
 80058e0:	4629      	mov	r1, r5
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 fc0a 	bl	80060fc <__lshift>
 80058e8:	9b00      	ldr	r3, [sp, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	9304      	str	r3, [sp, #16]
 80058ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058f2:	4413      	add	r3, r2
 80058f4:	9308      	str	r3, [sp, #32]
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	46b8      	mov	r8, r7
 80058fe:	9306      	str	r3, [sp, #24]
 8005900:	4607      	mov	r7, r0
 8005902:	9b04      	ldr	r3, [sp, #16]
 8005904:	4631      	mov	r1, r6
 8005906:	3b01      	subs	r3, #1
 8005908:	4650      	mov	r0, sl
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	f7ff fa69 	bl	8004de2 <quorem>
 8005910:	4641      	mov	r1, r8
 8005912:	9002      	str	r0, [sp, #8]
 8005914:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005918:	4650      	mov	r0, sl
 800591a:	f000 fc5b 	bl	80061d4 <__mcmp>
 800591e:	463a      	mov	r2, r7
 8005920:	9005      	str	r0, [sp, #20]
 8005922:	4631      	mov	r1, r6
 8005924:	4620      	mov	r0, r4
 8005926:	f000 fc71 	bl	800620c <__mdiff>
 800592a:	68c2      	ldr	r2, [r0, #12]
 800592c:	4605      	mov	r5, r0
 800592e:	bb02      	cbnz	r2, 8005972 <_dtoa_r+0xa7a>
 8005930:	4601      	mov	r1, r0
 8005932:	4650      	mov	r0, sl
 8005934:	f000 fc4e 	bl	80061d4 <__mcmp>
 8005938:	4602      	mov	r2, r0
 800593a:	4629      	mov	r1, r5
 800593c:	4620      	mov	r0, r4
 800593e:	9209      	str	r2, [sp, #36]	; 0x24
 8005940:	f000 fa0c 	bl	8005d5c <_Bfree>
 8005944:	9b07      	ldr	r3, [sp, #28]
 8005946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005948:	9d04      	ldr	r5, [sp, #16]
 800594a:	ea43 0102 	orr.w	r1, r3, r2
 800594e:	9b06      	ldr	r3, [sp, #24]
 8005950:	4319      	orrs	r1, r3
 8005952:	d110      	bne.n	8005976 <_dtoa_r+0xa7e>
 8005954:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005958:	d029      	beq.n	80059ae <_dtoa_r+0xab6>
 800595a:	9b05      	ldr	r3, [sp, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	dd02      	ble.n	8005966 <_dtoa_r+0xa6e>
 8005960:	9b02      	ldr	r3, [sp, #8]
 8005962:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005966:	9b01      	ldr	r3, [sp, #4]
 8005968:	f883 9000 	strb.w	r9, [r3]
 800596c:	e774      	b.n	8005858 <_dtoa_r+0x960>
 800596e:	4638      	mov	r0, r7
 8005970:	e7ba      	b.n	80058e8 <_dtoa_r+0x9f0>
 8005972:	2201      	movs	r2, #1
 8005974:	e7e1      	b.n	800593a <_dtoa_r+0xa42>
 8005976:	9b05      	ldr	r3, [sp, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	db04      	blt.n	8005986 <_dtoa_r+0xa8e>
 800597c:	9907      	ldr	r1, [sp, #28]
 800597e:	430b      	orrs	r3, r1
 8005980:	9906      	ldr	r1, [sp, #24]
 8005982:	430b      	orrs	r3, r1
 8005984:	d120      	bne.n	80059c8 <_dtoa_r+0xad0>
 8005986:	2a00      	cmp	r2, #0
 8005988:	dded      	ble.n	8005966 <_dtoa_r+0xa6e>
 800598a:	4651      	mov	r1, sl
 800598c:	2201      	movs	r2, #1
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fbb4 	bl	80060fc <__lshift>
 8005994:	4631      	mov	r1, r6
 8005996:	4682      	mov	sl, r0
 8005998:	f000 fc1c 	bl	80061d4 <__mcmp>
 800599c:	2800      	cmp	r0, #0
 800599e:	dc03      	bgt.n	80059a8 <_dtoa_r+0xab0>
 80059a0:	d1e1      	bne.n	8005966 <_dtoa_r+0xa6e>
 80059a2:	f019 0f01 	tst.w	r9, #1
 80059a6:	d0de      	beq.n	8005966 <_dtoa_r+0xa6e>
 80059a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059ac:	d1d8      	bne.n	8005960 <_dtoa_r+0xa68>
 80059ae:	9a01      	ldr	r2, [sp, #4]
 80059b0:	2339      	movs	r3, #57	; 0x39
 80059b2:	7013      	strb	r3, [r2, #0]
 80059b4:	462b      	mov	r3, r5
 80059b6:	461d      	mov	r5, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059be:	2a39      	cmp	r2, #57	; 0x39
 80059c0:	d06c      	beq.n	8005a9c <_dtoa_r+0xba4>
 80059c2:	3201      	adds	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e747      	b.n	8005858 <_dtoa_r+0x960>
 80059c8:	2a00      	cmp	r2, #0
 80059ca:	dd07      	ble.n	80059dc <_dtoa_r+0xae4>
 80059cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059d0:	d0ed      	beq.n	80059ae <_dtoa_r+0xab6>
 80059d2:	9a01      	ldr	r2, [sp, #4]
 80059d4:	f109 0301 	add.w	r3, r9, #1
 80059d8:	7013      	strb	r3, [r2, #0]
 80059da:	e73d      	b.n	8005858 <_dtoa_r+0x960>
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	9a08      	ldr	r2, [sp, #32]
 80059e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d043      	beq.n	8005a70 <_dtoa_r+0xb78>
 80059e8:	4651      	mov	r1, sl
 80059ea:	2300      	movs	r3, #0
 80059ec:	220a      	movs	r2, #10
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 f9d6 	bl	8005da0 <__multadd>
 80059f4:	45b8      	cmp	r8, r7
 80059f6:	4682      	mov	sl, r0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	f04f 020a 	mov.w	r2, #10
 8005a00:	4641      	mov	r1, r8
 8005a02:	4620      	mov	r0, r4
 8005a04:	d107      	bne.n	8005a16 <_dtoa_r+0xb1e>
 8005a06:	f000 f9cb 	bl	8005da0 <__multadd>
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	9b04      	ldr	r3, [sp, #16]
 8005a10:	3301      	adds	r3, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	e775      	b.n	8005902 <_dtoa_r+0xa0a>
 8005a16:	f000 f9c3 	bl	8005da0 <__multadd>
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	4680      	mov	r8, r0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	220a      	movs	r2, #10
 8005a22:	4620      	mov	r0, r4
 8005a24:	f000 f9bc 	bl	8005da0 <__multadd>
 8005a28:	4607      	mov	r7, r0
 8005a2a:	e7f0      	b.n	8005a0e <_dtoa_r+0xb16>
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	9301      	str	r3, [sp, #4]
 8005a30:	9d00      	ldr	r5, [sp, #0]
 8005a32:	4631      	mov	r1, r6
 8005a34:	4650      	mov	r0, sl
 8005a36:	f7ff f9d4 	bl	8004de2 <quorem>
 8005a3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a3e:	9b00      	ldr	r3, [sp, #0]
 8005a40:	f805 9b01 	strb.w	r9, [r5], #1
 8005a44:	1aea      	subs	r2, r5, r3
 8005a46:	9b01      	ldr	r3, [sp, #4]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	dd07      	ble.n	8005a5c <_dtoa_r+0xb64>
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	2300      	movs	r3, #0
 8005a50:	220a      	movs	r2, #10
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 f9a4 	bl	8005da0 <__multadd>
 8005a58:	4682      	mov	sl, r0
 8005a5a:	e7ea      	b.n	8005a32 <_dtoa_r+0xb3a>
 8005a5c:	9b01      	ldr	r3, [sp, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bfc8      	it	gt
 8005a62:	461d      	movgt	r5, r3
 8005a64:	9b00      	ldr	r3, [sp, #0]
 8005a66:	bfd8      	it	le
 8005a68:	2501      	movle	r5, #1
 8005a6a:	441d      	add	r5, r3
 8005a6c:	f04f 0800 	mov.w	r8, #0
 8005a70:	4651      	mov	r1, sl
 8005a72:	2201      	movs	r2, #1
 8005a74:	4620      	mov	r0, r4
 8005a76:	f000 fb41 	bl	80060fc <__lshift>
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	f000 fba9 	bl	80061d4 <__mcmp>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	dc96      	bgt.n	80059b4 <_dtoa_r+0xabc>
 8005a86:	d102      	bne.n	8005a8e <_dtoa_r+0xb96>
 8005a88:	f019 0f01 	tst.w	r9, #1
 8005a8c:	d192      	bne.n	80059b4 <_dtoa_r+0xabc>
 8005a8e:	462b      	mov	r3, r5
 8005a90:	461d      	mov	r5, r3
 8005a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a96:	2a30      	cmp	r2, #48	; 0x30
 8005a98:	d0fa      	beq.n	8005a90 <_dtoa_r+0xb98>
 8005a9a:	e6dd      	b.n	8005858 <_dtoa_r+0x960>
 8005a9c:	9a00      	ldr	r2, [sp, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d189      	bne.n	80059b6 <_dtoa_r+0xabe>
 8005aa2:	f10b 0b01 	add.w	fp, fp, #1
 8005aa6:	2331      	movs	r3, #49	; 0x31
 8005aa8:	e796      	b.n	80059d8 <_dtoa_r+0xae0>
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <_dtoa_r+0xbdc>)
 8005aac:	f7ff ba99 	b.w	8004fe2 <_dtoa_r+0xea>
 8005ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f47f aa6d 	bne.w	8004f92 <_dtoa_r+0x9a>
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <_dtoa_r+0xbe0>)
 8005aba:	f7ff ba92 	b.w	8004fe2 <_dtoa_r+0xea>
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	dcb5      	bgt.n	8005a30 <_dtoa_r+0xb38>
 8005ac4:	9b07      	ldr	r3, [sp, #28]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	f73f aeb1 	bgt.w	800582e <_dtoa_r+0x936>
 8005acc:	e7b0      	b.n	8005a30 <_dtoa_r+0xb38>
 8005ace:	bf00      	nop
 8005ad0:	08007002 	.word	0x08007002
 8005ad4:	08006f62 	.word	0x08006f62
 8005ad8:	08006f86 	.word	0x08006f86

08005adc <_free_r>:
 8005adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ade:	2900      	cmp	r1, #0
 8005ae0:	d044      	beq.n	8005b6c <_free_r+0x90>
 8005ae2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae6:	9001      	str	r0, [sp, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f1a1 0404 	sub.w	r4, r1, #4
 8005aee:	bfb8      	it	lt
 8005af0:	18e4      	addlt	r4, r4, r3
 8005af2:	f000 f8e7 	bl	8005cc4 <__malloc_lock>
 8005af6:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <_free_r+0x94>)
 8005af8:	9801      	ldr	r0, [sp, #4]
 8005afa:	6813      	ldr	r3, [r2, #0]
 8005afc:	b933      	cbnz	r3, 8005b0c <_free_r+0x30>
 8005afe:	6063      	str	r3, [r4, #4]
 8005b00:	6014      	str	r4, [r2, #0]
 8005b02:	b003      	add	sp, #12
 8005b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b08:	f000 b8e2 	b.w	8005cd0 <__malloc_unlock>
 8005b0c:	42a3      	cmp	r3, r4
 8005b0e:	d908      	bls.n	8005b22 <_free_r+0x46>
 8005b10:	6825      	ldr	r5, [r4, #0]
 8005b12:	1961      	adds	r1, r4, r5
 8005b14:	428b      	cmp	r3, r1
 8005b16:	bf01      	itttt	eq
 8005b18:	6819      	ldreq	r1, [r3, #0]
 8005b1a:	685b      	ldreq	r3, [r3, #4]
 8005b1c:	1949      	addeq	r1, r1, r5
 8005b1e:	6021      	streq	r1, [r4, #0]
 8005b20:	e7ed      	b.n	8005afe <_free_r+0x22>
 8005b22:	461a      	mov	r2, r3
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	b10b      	cbz	r3, 8005b2c <_free_r+0x50>
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	d9fa      	bls.n	8005b22 <_free_r+0x46>
 8005b2c:	6811      	ldr	r1, [r2, #0]
 8005b2e:	1855      	adds	r5, r2, r1
 8005b30:	42a5      	cmp	r5, r4
 8005b32:	d10b      	bne.n	8005b4c <_free_r+0x70>
 8005b34:	6824      	ldr	r4, [r4, #0]
 8005b36:	4421      	add	r1, r4
 8005b38:	1854      	adds	r4, r2, r1
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	d1e0      	bne.n	8005b02 <_free_r+0x26>
 8005b40:	681c      	ldr	r4, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	6053      	str	r3, [r2, #4]
 8005b46:	440c      	add	r4, r1
 8005b48:	6014      	str	r4, [r2, #0]
 8005b4a:	e7da      	b.n	8005b02 <_free_r+0x26>
 8005b4c:	d902      	bls.n	8005b54 <_free_r+0x78>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	6003      	str	r3, [r0, #0]
 8005b52:	e7d6      	b.n	8005b02 <_free_r+0x26>
 8005b54:	6825      	ldr	r5, [r4, #0]
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	bf04      	itt	eq
 8005b5c:	6819      	ldreq	r1, [r3, #0]
 8005b5e:	685b      	ldreq	r3, [r3, #4]
 8005b60:	6063      	str	r3, [r4, #4]
 8005b62:	bf04      	itt	eq
 8005b64:	1949      	addeq	r1, r1, r5
 8005b66:	6021      	streq	r1, [r4, #0]
 8005b68:	6054      	str	r4, [r2, #4]
 8005b6a:	e7ca      	b.n	8005b02 <_free_r+0x26>
 8005b6c:	b003      	add	sp, #12
 8005b6e:	bd30      	pop	{r4, r5, pc}
 8005b70:	200005cc 	.word	0x200005cc

08005b74 <malloc>:
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <malloc+0xc>)
 8005b76:	4601      	mov	r1, r0
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	f000 b823 	b.w	8005bc4 <_malloc_r>
 8005b7e:	bf00      	nop
 8005b80:	2000008c 	.word	0x2000008c

08005b84 <sbrk_aligned>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	4e0e      	ldr	r6, [pc, #56]	; (8005bc0 <sbrk_aligned+0x3c>)
 8005b88:	460c      	mov	r4, r1
 8005b8a:	6831      	ldr	r1, [r6, #0]
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	b911      	cbnz	r1, 8005b96 <sbrk_aligned+0x12>
 8005b90:	f000 fe40 	bl	8006814 <_sbrk_r>
 8005b94:	6030      	str	r0, [r6, #0]
 8005b96:	4621      	mov	r1, r4
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f000 fe3b 	bl	8006814 <_sbrk_r>
 8005b9e:	1c43      	adds	r3, r0, #1
 8005ba0:	d00a      	beq.n	8005bb8 <sbrk_aligned+0x34>
 8005ba2:	1cc4      	adds	r4, r0, #3
 8005ba4:	f024 0403 	bic.w	r4, r4, #3
 8005ba8:	42a0      	cmp	r0, r4
 8005baa:	d007      	beq.n	8005bbc <sbrk_aligned+0x38>
 8005bac:	1a21      	subs	r1, r4, r0
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 fe30 	bl	8006814 <_sbrk_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d101      	bne.n	8005bbc <sbrk_aligned+0x38>
 8005bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	200005d0 	.word	0x200005d0

08005bc4 <_malloc_r>:
 8005bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc8:	1ccd      	adds	r5, r1, #3
 8005bca:	f025 0503 	bic.w	r5, r5, #3
 8005bce:	3508      	adds	r5, #8
 8005bd0:	2d0c      	cmp	r5, #12
 8005bd2:	bf38      	it	cc
 8005bd4:	250c      	movcc	r5, #12
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	4607      	mov	r7, r0
 8005bda:	db01      	blt.n	8005be0 <_malloc_r+0x1c>
 8005bdc:	42a9      	cmp	r1, r5
 8005bde:	d905      	bls.n	8005bec <_malloc_r+0x28>
 8005be0:	230c      	movs	r3, #12
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	2600      	movs	r6, #0
 8005be6:	4630      	mov	r0, r6
 8005be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cc0 <_malloc_r+0xfc>
 8005bf0:	f000 f868 	bl	8005cc4 <__malloc_lock>
 8005bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf8:	461c      	mov	r4, r3
 8005bfa:	bb5c      	cbnz	r4, 8005c54 <_malloc_r+0x90>
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	4638      	mov	r0, r7
 8005c00:	f7ff ffc0 	bl	8005b84 <sbrk_aligned>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	4604      	mov	r4, r0
 8005c08:	d155      	bne.n	8005cb6 <_malloc_r+0xf2>
 8005c0a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c0e:	4626      	mov	r6, r4
 8005c10:	2e00      	cmp	r6, #0
 8005c12:	d145      	bne.n	8005ca0 <_malloc_r+0xdc>
 8005c14:	2c00      	cmp	r4, #0
 8005c16:	d048      	beq.n	8005caa <_malloc_r+0xe6>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	eb04 0903 	add.w	r9, r4, r3
 8005c22:	f000 fdf7 	bl	8006814 <_sbrk_r>
 8005c26:	4581      	cmp	r9, r0
 8005c28:	d13f      	bne.n	8005caa <_malloc_r+0xe6>
 8005c2a:	6821      	ldr	r1, [r4, #0]
 8005c2c:	1a6d      	subs	r5, r5, r1
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff ffa7 	bl	8005b84 <sbrk_aligned>
 8005c36:	3001      	adds	r0, #1
 8005c38:	d037      	beq.n	8005caa <_malloc_r+0xe6>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	442b      	add	r3, r5
 8005c3e:	6023      	str	r3, [r4, #0]
 8005c40:	f8d8 3000 	ldr.w	r3, [r8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d038      	beq.n	8005cba <_malloc_r+0xf6>
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	42a2      	cmp	r2, r4
 8005c4c:	d12b      	bne.n	8005ca6 <_malloc_r+0xe2>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	e00f      	b.n	8005c74 <_malloc_r+0xb0>
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	1b52      	subs	r2, r2, r5
 8005c58:	d41f      	bmi.n	8005c9a <_malloc_r+0xd6>
 8005c5a:	2a0b      	cmp	r2, #11
 8005c5c:	d917      	bls.n	8005c8e <_malloc_r+0xca>
 8005c5e:	1961      	adds	r1, r4, r5
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	6025      	str	r5, [r4, #0]
 8005c64:	bf18      	it	ne
 8005c66:	6059      	strne	r1, [r3, #4]
 8005c68:	6863      	ldr	r3, [r4, #4]
 8005c6a:	bf08      	it	eq
 8005c6c:	f8c8 1000 	streq.w	r1, [r8]
 8005c70:	5162      	str	r2, [r4, r5]
 8005c72:	604b      	str	r3, [r1, #4]
 8005c74:	4638      	mov	r0, r7
 8005c76:	f104 060b 	add.w	r6, r4, #11
 8005c7a:	f000 f829 	bl	8005cd0 <__malloc_unlock>
 8005c7e:	f026 0607 	bic.w	r6, r6, #7
 8005c82:	1d23      	adds	r3, r4, #4
 8005c84:	1af2      	subs	r2, r6, r3
 8005c86:	d0ae      	beq.n	8005be6 <_malloc_r+0x22>
 8005c88:	1b9b      	subs	r3, r3, r6
 8005c8a:	50a3      	str	r3, [r4, r2]
 8005c8c:	e7ab      	b.n	8005be6 <_malloc_r+0x22>
 8005c8e:	42a3      	cmp	r3, r4
 8005c90:	6862      	ldr	r2, [r4, #4]
 8005c92:	d1dd      	bne.n	8005c50 <_malloc_r+0x8c>
 8005c94:	f8c8 2000 	str.w	r2, [r8]
 8005c98:	e7ec      	b.n	8005c74 <_malloc_r+0xb0>
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	6864      	ldr	r4, [r4, #4]
 8005c9e:	e7ac      	b.n	8005bfa <_malloc_r+0x36>
 8005ca0:	4634      	mov	r4, r6
 8005ca2:	6876      	ldr	r6, [r6, #4]
 8005ca4:	e7b4      	b.n	8005c10 <_malloc_r+0x4c>
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	e7cc      	b.n	8005c44 <_malloc_r+0x80>
 8005caa:	230c      	movs	r3, #12
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4638      	mov	r0, r7
 8005cb0:	f000 f80e 	bl	8005cd0 <__malloc_unlock>
 8005cb4:	e797      	b.n	8005be6 <_malloc_r+0x22>
 8005cb6:	6025      	str	r5, [r4, #0]
 8005cb8:	e7dc      	b.n	8005c74 <_malloc_r+0xb0>
 8005cba:	605b      	str	r3, [r3, #4]
 8005cbc:	deff      	udf	#255	; 0xff
 8005cbe:	bf00      	nop
 8005cc0:	200005cc 	.word	0x200005cc

08005cc4 <__malloc_lock>:
 8005cc4:	4801      	ldr	r0, [pc, #4]	; (8005ccc <__malloc_lock+0x8>)
 8005cc6:	f7ff b88a 	b.w	8004dde <__retarget_lock_acquire_recursive>
 8005cca:	bf00      	nop
 8005ccc:	200005c8 	.word	0x200005c8

08005cd0 <__malloc_unlock>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	; (8005cd8 <__malloc_unlock+0x8>)
 8005cd2:	f7ff b885 	b.w	8004de0 <__retarget_lock_release_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	200005c8 	.word	0x200005c8

08005cdc <_Balloc>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	69c6      	ldr	r6, [r0, #28]
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	b976      	cbnz	r6, 8005d04 <_Balloc+0x28>
 8005ce6:	2010      	movs	r0, #16
 8005ce8:	f7ff ff44 	bl	8005b74 <malloc>
 8005cec:	4602      	mov	r2, r0
 8005cee:	61e0      	str	r0, [r4, #28]
 8005cf0:	b920      	cbnz	r0, 8005cfc <_Balloc+0x20>
 8005cf2:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <_Balloc+0x78>)
 8005cf4:	4818      	ldr	r0, [pc, #96]	; (8005d58 <_Balloc+0x7c>)
 8005cf6:	216b      	movs	r1, #107	; 0x6b
 8005cf8:	f000 fdaa 	bl	8006850 <__assert_func>
 8005cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d00:	6006      	str	r6, [r0, #0]
 8005d02:	60c6      	str	r6, [r0, #12]
 8005d04:	69e6      	ldr	r6, [r4, #28]
 8005d06:	68f3      	ldr	r3, [r6, #12]
 8005d08:	b183      	cbz	r3, 8005d2c <_Balloc+0x50>
 8005d0a:	69e3      	ldr	r3, [r4, #28]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d12:	b9b8      	cbnz	r0, 8005d44 <_Balloc+0x68>
 8005d14:	2101      	movs	r1, #1
 8005d16:	fa01 f605 	lsl.w	r6, r1, r5
 8005d1a:	1d72      	adds	r2, r6, #5
 8005d1c:	0092      	lsls	r2, r2, #2
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f000 fdb4 	bl	800688c <_calloc_r>
 8005d24:	b160      	cbz	r0, 8005d40 <_Balloc+0x64>
 8005d26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d2a:	e00e      	b.n	8005d4a <_Balloc+0x6e>
 8005d2c:	2221      	movs	r2, #33	; 0x21
 8005d2e:	2104      	movs	r1, #4
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fdab 	bl	800688c <_calloc_r>
 8005d36:	69e3      	ldr	r3, [r4, #28]
 8005d38:	60f0      	str	r0, [r6, #12]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e4      	bne.n	8005d0a <_Balloc+0x2e>
 8005d40:	2000      	movs	r0, #0
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	6802      	ldr	r2, [r0, #0]
 8005d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d50:	e7f7      	b.n	8005d42 <_Balloc+0x66>
 8005d52:	bf00      	nop
 8005d54:	08006f93 	.word	0x08006f93
 8005d58:	08007013 	.word	0x08007013

08005d5c <_Bfree>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	69c6      	ldr	r6, [r0, #28]
 8005d60:	4605      	mov	r5, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	b976      	cbnz	r6, 8005d84 <_Bfree+0x28>
 8005d66:	2010      	movs	r0, #16
 8005d68:	f7ff ff04 	bl	8005b74 <malloc>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	61e8      	str	r0, [r5, #28]
 8005d70:	b920      	cbnz	r0, 8005d7c <_Bfree+0x20>
 8005d72:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <_Bfree+0x3c>)
 8005d74:	4809      	ldr	r0, [pc, #36]	; (8005d9c <_Bfree+0x40>)
 8005d76:	218f      	movs	r1, #143	; 0x8f
 8005d78:	f000 fd6a 	bl	8006850 <__assert_func>
 8005d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d80:	6006      	str	r6, [r0, #0]
 8005d82:	60c6      	str	r6, [r0, #12]
 8005d84:	b13c      	cbz	r4, 8005d96 <_Bfree+0x3a>
 8005d86:	69eb      	ldr	r3, [r5, #28]
 8005d88:	6862      	ldr	r2, [r4, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d90:	6021      	str	r1, [r4, #0]
 8005d92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	08006f93 	.word	0x08006f93
 8005d9c:	08007013 	.word	0x08007013

08005da0 <__multadd>:
 8005da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da4:	690d      	ldr	r5, [r1, #16]
 8005da6:	4607      	mov	r7, r0
 8005da8:	460c      	mov	r4, r1
 8005daa:	461e      	mov	r6, r3
 8005dac:	f101 0c14 	add.w	ip, r1, #20
 8005db0:	2000      	movs	r0, #0
 8005db2:	f8dc 3000 	ldr.w	r3, [ip]
 8005db6:	b299      	uxth	r1, r3
 8005db8:	fb02 6101 	mla	r1, r2, r1, r6
 8005dbc:	0c1e      	lsrs	r6, r3, #16
 8005dbe:	0c0b      	lsrs	r3, r1, #16
 8005dc0:	fb02 3306 	mla	r3, r2, r6, r3
 8005dc4:	b289      	uxth	r1, r1
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dcc:	4285      	cmp	r5, r0
 8005dce:	f84c 1b04 	str.w	r1, [ip], #4
 8005dd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005dd6:	dcec      	bgt.n	8005db2 <__multadd+0x12>
 8005dd8:	b30e      	cbz	r6, 8005e1e <__multadd+0x7e>
 8005dda:	68a3      	ldr	r3, [r4, #8]
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	dc19      	bgt.n	8005e14 <__multadd+0x74>
 8005de0:	6861      	ldr	r1, [r4, #4]
 8005de2:	4638      	mov	r0, r7
 8005de4:	3101      	adds	r1, #1
 8005de6:	f7ff ff79 	bl	8005cdc <_Balloc>
 8005dea:	4680      	mov	r8, r0
 8005dec:	b928      	cbnz	r0, 8005dfa <__multadd+0x5a>
 8005dee:	4602      	mov	r2, r0
 8005df0:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <__multadd+0x84>)
 8005df2:	480d      	ldr	r0, [pc, #52]	; (8005e28 <__multadd+0x88>)
 8005df4:	21ba      	movs	r1, #186	; 0xba
 8005df6:	f000 fd2b 	bl	8006850 <__assert_func>
 8005dfa:	6922      	ldr	r2, [r4, #16]
 8005dfc:	3202      	adds	r2, #2
 8005dfe:	f104 010c 	add.w	r1, r4, #12
 8005e02:	0092      	lsls	r2, r2, #2
 8005e04:	300c      	adds	r0, #12
 8005e06:	f000 fd15 	bl	8006834 <memcpy>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f7ff ffa5 	bl	8005d5c <_Bfree>
 8005e12:	4644      	mov	r4, r8
 8005e14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e18:	3501      	adds	r5, #1
 8005e1a:	615e      	str	r6, [r3, #20]
 8005e1c:	6125      	str	r5, [r4, #16]
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e24:	08007002 	.word	0x08007002
 8005e28:	08007013 	.word	0x08007013

08005e2c <__hi0bits>:
 8005e2c:	0c03      	lsrs	r3, r0, #16
 8005e2e:	041b      	lsls	r3, r3, #16
 8005e30:	b9d3      	cbnz	r3, 8005e68 <__hi0bits+0x3c>
 8005e32:	0400      	lsls	r0, r0, #16
 8005e34:	2310      	movs	r3, #16
 8005e36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e3a:	bf04      	itt	eq
 8005e3c:	0200      	lsleq	r0, r0, #8
 8005e3e:	3308      	addeq	r3, #8
 8005e40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e44:	bf04      	itt	eq
 8005e46:	0100      	lsleq	r0, r0, #4
 8005e48:	3304      	addeq	r3, #4
 8005e4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e4e:	bf04      	itt	eq
 8005e50:	0080      	lsleq	r0, r0, #2
 8005e52:	3302      	addeq	r3, #2
 8005e54:	2800      	cmp	r0, #0
 8005e56:	db05      	blt.n	8005e64 <__hi0bits+0x38>
 8005e58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e5c:	f103 0301 	add.w	r3, r3, #1
 8005e60:	bf08      	it	eq
 8005e62:	2320      	moveq	r3, #32
 8005e64:	4618      	mov	r0, r3
 8005e66:	4770      	bx	lr
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e7e4      	b.n	8005e36 <__hi0bits+0xa>

08005e6c <__lo0bits>:
 8005e6c:	6803      	ldr	r3, [r0, #0]
 8005e6e:	f013 0207 	ands.w	r2, r3, #7
 8005e72:	d00c      	beq.n	8005e8e <__lo0bits+0x22>
 8005e74:	07d9      	lsls	r1, r3, #31
 8005e76:	d422      	bmi.n	8005ebe <__lo0bits+0x52>
 8005e78:	079a      	lsls	r2, r3, #30
 8005e7a:	bf49      	itett	mi
 8005e7c:	085b      	lsrmi	r3, r3, #1
 8005e7e:	089b      	lsrpl	r3, r3, #2
 8005e80:	6003      	strmi	r3, [r0, #0]
 8005e82:	2201      	movmi	r2, #1
 8005e84:	bf5c      	itt	pl
 8005e86:	6003      	strpl	r3, [r0, #0]
 8005e88:	2202      	movpl	r2, #2
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4770      	bx	lr
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	b909      	cbnz	r1, 8005e96 <__lo0bits+0x2a>
 8005e92:	0c1b      	lsrs	r3, r3, #16
 8005e94:	2210      	movs	r2, #16
 8005e96:	b2d9      	uxtb	r1, r3
 8005e98:	b909      	cbnz	r1, 8005e9e <__lo0bits+0x32>
 8005e9a:	3208      	adds	r2, #8
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	0719      	lsls	r1, r3, #28
 8005ea0:	bf04      	itt	eq
 8005ea2:	091b      	lsreq	r3, r3, #4
 8005ea4:	3204      	addeq	r2, #4
 8005ea6:	0799      	lsls	r1, r3, #30
 8005ea8:	bf04      	itt	eq
 8005eaa:	089b      	lsreq	r3, r3, #2
 8005eac:	3202      	addeq	r2, #2
 8005eae:	07d9      	lsls	r1, r3, #31
 8005eb0:	d403      	bmi.n	8005eba <__lo0bits+0x4e>
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	f102 0201 	add.w	r2, r2, #1
 8005eb8:	d003      	beq.n	8005ec2 <__lo0bits+0x56>
 8005eba:	6003      	str	r3, [r0, #0]
 8005ebc:	e7e5      	b.n	8005e8a <__lo0bits+0x1e>
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	e7e3      	b.n	8005e8a <__lo0bits+0x1e>
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	e7e1      	b.n	8005e8a <__lo0bits+0x1e>
	...

08005ec8 <__i2b>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	460c      	mov	r4, r1
 8005ecc:	2101      	movs	r1, #1
 8005ece:	f7ff ff05 	bl	8005cdc <_Balloc>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	b928      	cbnz	r0, 8005ee2 <__i2b+0x1a>
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <__i2b+0x24>)
 8005ed8:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <__i2b+0x28>)
 8005eda:	f240 1145 	movw	r1, #325	; 0x145
 8005ede:	f000 fcb7 	bl	8006850 <__assert_func>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	6144      	str	r4, [r0, #20]
 8005ee6:	6103      	str	r3, [r0, #16]
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	08007002 	.word	0x08007002
 8005ef0:	08007013 	.word	0x08007013

08005ef4 <__multiply>:
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	4691      	mov	r9, r2
 8005efa:	690a      	ldr	r2, [r1, #16]
 8005efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	bfb8      	it	lt
 8005f04:	460b      	movlt	r3, r1
 8005f06:	460c      	mov	r4, r1
 8005f08:	bfbc      	itt	lt
 8005f0a:	464c      	movlt	r4, r9
 8005f0c:	4699      	movlt	r9, r3
 8005f0e:	6927      	ldr	r7, [r4, #16]
 8005f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	6861      	ldr	r1, [r4, #4]
 8005f18:	eb07 060a 	add.w	r6, r7, sl
 8005f1c:	42b3      	cmp	r3, r6
 8005f1e:	b085      	sub	sp, #20
 8005f20:	bfb8      	it	lt
 8005f22:	3101      	addlt	r1, #1
 8005f24:	f7ff feda 	bl	8005cdc <_Balloc>
 8005f28:	b930      	cbnz	r0, 8005f38 <__multiply+0x44>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	4b44      	ldr	r3, [pc, #272]	; (8006040 <__multiply+0x14c>)
 8005f2e:	4845      	ldr	r0, [pc, #276]	; (8006044 <__multiply+0x150>)
 8005f30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f34:	f000 fc8c 	bl	8006850 <__assert_func>
 8005f38:	f100 0514 	add.w	r5, r0, #20
 8005f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f40:	462b      	mov	r3, r5
 8005f42:	2200      	movs	r2, #0
 8005f44:	4543      	cmp	r3, r8
 8005f46:	d321      	bcc.n	8005f8c <__multiply+0x98>
 8005f48:	f104 0314 	add.w	r3, r4, #20
 8005f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f50:	f109 0314 	add.w	r3, r9, #20
 8005f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f58:	9202      	str	r2, [sp, #8]
 8005f5a:	1b3a      	subs	r2, r7, r4
 8005f5c:	3a15      	subs	r2, #21
 8005f5e:	f022 0203 	bic.w	r2, r2, #3
 8005f62:	3204      	adds	r2, #4
 8005f64:	f104 0115 	add.w	r1, r4, #21
 8005f68:	428f      	cmp	r7, r1
 8005f6a:	bf38      	it	cc
 8005f6c:	2204      	movcc	r2, #4
 8005f6e:	9201      	str	r2, [sp, #4]
 8005f70:	9a02      	ldr	r2, [sp, #8]
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d80c      	bhi.n	8005f92 <__multiply+0x9e>
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	dd03      	ble.n	8005f84 <__multiply+0x90>
 8005f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05b      	beq.n	800603c <__multiply+0x148>
 8005f84:	6106      	str	r6, [r0, #16]
 8005f86:	b005      	add	sp, #20
 8005f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8c:	f843 2b04 	str.w	r2, [r3], #4
 8005f90:	e7d8      	b.n	8005f44 <__multiply+0x50>
 8005f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f96:	f1ba 0f00 	cmp.w	sl, #0
 8005f9a:	d024      	beq.n	8005fe6 <__multiply+0xf2>
 8005f9c:	f104 0e14 	add.w	lr, r4, #20
 8005fa0:	46a9      	mov	r9, r5
 8005fa2:	f04f 0c00 	mov.w	ip, #0
 8005fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005faa:	f8d9 1000 	ldr.w	r1, [r9]
 8005fae:	fa1f fb82 	uxth.w	fp, r2
 8005fb2:	b289      	uxth	r1, r1
 8005fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8005fc0:	4461      	add	r1, ip
 8005fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fce:	b289      	uxth	r1, r1
 8005fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fd4:	4577      	cmp	r7, lr
 8005fd6:	f849 1b04 	str.w	r1, [r9], #4
 8005fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fde:	d8e2      	bhi.n	8005fa6 <__multiply+0xb2>
 8005fe0:	9a01      	ldr	r2, [sp, #4]
 8005fe2:	f845 c002 	str.w	ip, [r5, r2]
 8005fe6:	9a03      	ldr	r2, [sp, #12]
 8005fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fec:	3304      	adds	r3, #4
 8005fee:	f1b9 0f00 	cmp.w	r9, #0
 8005ff2:	d021      	beq.n	8006038 <__multiply+0x144>
 8005ff4:	6829      	ldr	r1, [r5, #0]
 8005ff6:	f104 0c14 	add.w	ip, r4, #20
 8005ffa:	46ae      	mov	lr, r5
 8005ffc:	f04f 0a00 	mov.w	sl, #0
 8006000:	f8bc b000 	ldrh.w	fp, [ip]
 8006004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006008:	fb09 220b 	mla	r2, r9, fp, r2
 800600c:	4452      	add	r2, sl
 800600e:	b289      	uxth	r1, r1
 8006010:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006014:	f84e 1b04 	str.w	r1, [lr], #4
 8006018:	f85c 1b04 	ldr.w	r1, [ip], #4
 800601c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006020:	f8be 1000 	ldrh.w	r1, [lr]
 8006024:	fb09 110a 	mla	r1, r9, sl, r1
 8006028:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800602c:	4567      	cmp	r7, ip
 800602e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006032:	d8e5      	bhi.n	8006000 <__multiply+0x10c>
 8006034:	9a01      	ldr	r2, [sp, #4]
 8006036:	50a9      	str	r1, [r5, r2]
 8006038:	3504      	adds	r5, #4
 800603a:	e799      	b.n	8005f70 <__multiply+0x7c>
 800603c:	3e01      	subs	r6, #1
 800603e:	e79b      	b.n	8005f78 <__multiply+0x84>
 8006040:	08007002 	.word	0x08007002
 8006044:	08007013 	.word	0x08007013

08006048 <__pow5mult>:
 8006048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800604c:	4615      	mov	r5, r2
 800604e:	f012 0203 	ands.w	r2, r2, #3
 8006052:	4606      	mov	r6, r0
 8006054:	460f      	mov	r7, r1
 8006056:	d007      	beq.n	8006068 <__pow5mult+0x20>
 8006058:	4c25      	ldr	r4, [pc, #148]	; (80060f0 <__pow5mult+0xa8>)
 800605a:	3a01      	subs	r2, #1
 800605c:	2300      	movs	r3, #0
 800605e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006062:	f7ff fe9d 	bl	8005da0 <__multadd>
 8006066:	4607      	mov	r7, r0
 8006068:	10ad      	asrs	r5, r5, #2
 800606a:	d03d      	beq.n	80060e8 <__pow5mult+0xa0>
 800606c:	69f4      	ldr	r4, [r6, #28]
 800606e:	b97c      	cbnz	r4, 8006090 <__pow5mult+0x48>
 8006070:	2010      	movs	r0, #16
 8006072:	f7ff fd7f 	bl	8005b74 <malloc>
 8006076:	4602      	mov	r2, r0
 8006078:	61f0      	str	r0, [r6, #28]
 800607a:	b928      	cbnz	r0, 8006088 <__pow5mult+0x40>
 800607c:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <__pow5mult+0xac>)
 800607e:	481e      	ldr	r0, [pc, #120]	; (80060f8 <__pow5mult+0xb0>)
 8006080:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006084:	f000 fbe4 	bl	8006850 <__assert_func>
 8006088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800608c:	6004      	str	r4, [r0, #0]
 800608e:	60c4      	str	r4, [r0, #12]
 8006090:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006098:	b94c      	cbnz	r4, 80060ae <__pow5mult+0x66>
 800609a:	f240 2171 	movw	r1, #625	; 0x271
 800609e:	4630      	mov	r0, r6
 80060a0:	f7ff ff12 	bl	8005ec8 <__i2b>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80060aa:	4604      	mov	r4, r0
 80060ac:	6003      	str	r3, [r0, #0]
 80060ae:	f04f 0900 	mov.w	r9, #0
 80060b2:	07eb      	lsls	r3, r5, #31
 80060b4:	d50a      	bpl.n	80060cc <__pow5mult+0x84>
 80060b6:	4639      	mov	r1, r7
 80060b8:	4622      	mov	r2, r4
 80060ba:	4630      	mov	r0, r6
 80060bc:	f7ff ff1a 	bl	8005ef4 <__multiply>
 80060c0:	4639      	mov	r1, r7
 80060c2:	4680      	mov	r8, r0
 80060c4:	4630      	mov	r0, r6
 80060c6:	f7ff fe49 	bl	8005d5c <_Bfree>
 80060ca:	4647      	mov	r7, r8
 80060cc:	106d      	asrs	r5, r5, #1
 80060ce:	d00b      	beq.n	80060e8 <__pow5mult+0xa0>
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	b938      	cbnz	r0, 80060e4 <__pow5mult+0x9c>
 80060d4:	4622      	mov	r2, r4
 80060d6:	4621      	mov	r1, r4
 80060d8:	4630      	mov	r0, r6
 80060da:	f7ff ff0b 	bl	8005ef4 <__multiply>
 80060de:	6020      	str	r0, [r4, #0]
 80060e0:	f8c0 9000 	str.w	r9, [r0]
 80060e4:	4604      	mov	r4, r0
 80060e6:	e7e4      	b.n	80060b2 <__pow5mult+0x6a>
 80060e8:	4638      	mov	r0, r7
 80060ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ee:	bf00      	nop
 80060f0:	08007160 	.word	0x08007160
 80060f4:	08006f93 	.word	0x08006f93
 80060f8:	08007013 	.word	0x08007013

080060fc <__lshift>:
 80060fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	460c      	mov	r4, r1
 8006102:	6849      	ldr	r1, [r1, #4]
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	4607      	mov	r7, r0
 800610e:	4691      	mov	r9, r2
 8006110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006114:	f108 0601 	add.w	r6, r8, #1
 8006118:	42b3      	cmp	r3, r6
 800611a:	db0b      	blt.n	8006134 <__lshift+0x38>
 800611c:	4638      	mov	r0, r7
 800611e:	f7ff fddd 	bl	8005cdc <_Balloc>
 8006122:	4605      	mov	r5, r0
 8006124:	b948      	cbnz	r0, 800613a <__lshift+0x3e>
 8006126:	4602      	mov	r2, r0
 8006128:	4b28      	ldr	r3, [pc, #160]	; (80061cc <__lshift+0xd0>)
 800612a:	4829      	ldr	r0, [pc, #164]	; (80061d0 <__lshift+0xd4>)
 800612c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006130:	f000 fb8e 	bl	8006850 <__assert_func>
 8006134:	3101      	adds	r1, #1
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	e7ee      	b.n	8006118 <__lshift+0x1c>
 800613a:	2300      	movs	r3, #0
 800613c:	f100 0114 	add.w	r1, r0, #20
 8006140:	f100 0210 	add.w	r2, r0, #16
 8006144:	4618      	mov	r0, r3
 8006146:	4553      	cmp	r3, sl
 8006148:	db33      	blt.n	80061b2 <__lshift+0xb6>
 800614a:	6920      	ldr	r0, [r4, #16]
 800614c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006150:	f104 0314 	add.w	r3, r4, #20
 8006154:	f019 091f 	ands.w	r9, r9, #31
 8006158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800615c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006160:	d02b      	beq.n	80061ba <__lshift+0xbe>
 8006162:	f1c9 0e20 	rsb	lr, r9, #32
 8006166:	468a      	mov	sl, r1
 8006168:	2200      	movs	r2, #0
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	fa00 f009 	lsl.w	r0, r0, r9
 8006170:	4310      	orrs	r0, r2
 8006172:	f84a 0b04 	str.w	r0, [sl], #4
 8006176:	f853 2b04 	ldr.w	r2, [r3], #4
 800617a:	459c      	cmp	ip, r3
 800617c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006180:	d8f3      	bhi.n	800616a <__lshift+0x6e>
 8006182:	ebac 0304 	sub.w	r3, ip, r4
 8006186:	3b15      	subs	r3, #21
 8006188:	f023 0303 	bic.w	r3, r3, #3
 800618c:	3304      	adds	r3, #4
 800618e:	f104 0015 	add.w	r0, r4, #21
 8006192:	4584      	cmp	ip, r0
 8006194:	bf38      	it	cc
 8006196:	2304      	movcc	r3, #4
 8006198:	50ca      	str	r2, [r1, r3]
 800619a:	b10a      	cbz	r2, 80061a0 <__lshift+0xa4>
 800619c:	f108 0602 	add.w	r6, r8, #2
 80061a0:	3e01      	subs	r6, #1
 80061a2:	4638      	mov	r0, r7
 80061a4:	612e      	str	r6, [r5, #16]
 80061a6:	4621      	mov	r1, r4
 80061a8:	f7ff fdd8 	bl	8005d5c <_Bfree>
 80061ac:	4628      	mov	r0, r5
 80061ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80061b6:	3301      	adds	r3, #1
 80061b8:	e7c5      	b.n	8006146 <__lshift+0x4a>
 80061ba:	3904      	subs	r1, #4
 80061bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80061c4:	459c      	cmp	ip, r3
 80061c6:	d8f9      	bhi.n	80061bc <__lshift+0xc0>
 80061c8:	e7ea      	b.n	80061a0 <__lshift+0xa4>
 80061ca:	bf00      	nop
 80061cc:	08007002 	.word	0x08007002
 80061d0:	08007013 	.word	0x08007013

080061d4 <__mcmp>:
 80061d4:	b530      	push	{r4, r5, lr}
 80061d6:	6902      	ldr	r2, [r0, #16]
 80061d8:	690c      	ldr	r4, [r1, #16]
 80061da:	1b12      	subs	r2, r2, r4
 80061dc:	d10e      	bne.n	80061fc <__mcmp+0x28>
 80061de:	f100 0314 	add.w	r3, r0, #20
 80061e2:	3114      	adds	r1, #20
 80061e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80061e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80061ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80061f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80061f4:	42a5      	cmp	r5, r4
 80061f6:	d003      	beq.n	8006200 <__mcmp+0x2c>
 80061f8:	d305      	bcc.n	8006206 <__mcmp+0x32>
 80061fa:	2201      	movs	r2, #1
 80061fc:	4610      	mov	r0, r2
 80061fe:	bd30      	pop	{r4, r5, pc}
 8006200:	4283      	cmp	r3, r0
 8006202:	d3f3      	bcc.n	80061ec <__mcmp+0x18>
 8006204:	e7fa      	b.n	80061fc <__mcmp+0x28>
 8006206:	f04f 32ff 	mov.w	r2, #4294967295
 800620a:	e7f7      	b.n	80061fc <__mcmp+0x28>

0800620c <__mdiff>:
 800620c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	460c      	mov	r4, r1
 8006212:	4606      	mov	r6, r0
 8006214:	4611      	mov	r1, r2
 8006216:	4620      	mov	r0, r4
 8006218:	4690      	mov	r8, r2
 800621a:	f7ff ffdb 	bl	80061d4 <__mcmp>
 800621e:	1e05      	subs	r5, r0, #0
 8006220:	d110      	bne.n	8006244 <__mdiff+0x38>
 8006222:	4629      	mov	r1, r5
 8006224:	4630      	mov	r0, r6
 8006226:	f7ff fd59 	bl	8005cdc <_Balloc>
 800622a:	b930      	cbnz	r0, 800623a <__mdiff+0x2e>
 800622c:	4b3a      	ldr	r3, [pc, #232]	; (8006318 <__mdiff+0x10c>)
 800622e:	4602      	mov	r2, r0
 8006230:	f240 2137 	movw	r1, #567	; 0x237
 8006234:	4839      	ldr	r0, [pc, #228]	; (800631c <__mdiff+0x110>)
 8006236:	f000 fb0b 	bl	8006850 <__assert_func>
 800623a:	2301      	movs	r3, #1
 800623c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	bfa4      	itt	ge
 8006246:	4643      	movge	r3, r8
 8006248:	46a0      	movge	r8, r4
 800624a:	4630      	mov	r0, r6
 800624c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006250:	bfa6      	itte	ge
 8006252:	461c      	movge	r4, r3
 8006254:	2500      	movge	r5, #0
 8006256:	2501      	movlt	r5, #1
 8006258:	f7ff fd40 	bl	8005cdc <_Balloc>
 800625c:	b920      	cbnz	r0, 8006268 <__mdiff+0x5c>
 800625e:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <__mdiff+0x10c>)
 8006260:	4602      	mov	r2, r0
 8006262:	f240 2145 	movw	r1, #581	; 0x245
 8006266:	e7e5      	b.n	8006234 <__mdiff+0x28>
 8006268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800626c:	6926      	ldr	r6, [r4, #16]
 800626e:	60c5      	str	r5, [r0, #12]
 8006270:	f104 0914 	add.w	r9, r4, #20
 8006274:	f108 0514 	add.w	r5, r8, #20
 8006278:	f100 0e14 	add.w	lr, r0, #20
 800627c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006284:	f108 0210 	add.w	r2, r8, #16
 8006288:	46f2      	mov	sl, lr
 800628a:	2100      	movs	r1, #0
 800628c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006294:	fa11 f88b 	uxtah	r8, r1, fp
 8006298:	b299      	uxth	r1, r3
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	eba8 0801 	sub.w	r8, r8, r1
 80062a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062a8:	fa1f f888 	uxth.w	r8, r8
 80062ac:	1419      	asrs	r1, r3, #16
 80062ae:	454e      	cmp	r6, r9
 80062b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062b4:	f84a 3b04 	str.w	r3, [sl], #4
 80062b8:	d8e8      	bhi.n	800628c <__mdiff+0x80>
 80062ba:	1b33      	subs	r3, r6, r4
 80062bc:	3b15      	subs	r3, #21
 80062be:	f023 0303 	bic.w	r3, r3, #3
 80062c2:	3304      	adds	r3, #4
 80062c4:	3415      	adds	r4, #21
 80062c6:	42a6      	cmp	r6, r4
 80062c8:	bf38      	it	cc
 80062ca:	2304      	movcc	r3, #4
 80062cc:	441d      	add	r5, r3
 80062ce:	4473      	add	r3, lr
 80062d0:	469e      	mov	lr, r3
 80062d2:	462e      	mov	r6, r5
 80062d4:	4566      	cmp	r6, ip
 80062d6:	d30e      	bcc.n	80062f6 <__mdiff+0xea>
 80062d8:	f10c 0203 	add.w	r2, ip, #3
 80062dc:	1b52      	subs	r2, r2, r5
 80062de:	f022 0203 	bic.w	r2, r2, #3
 80062e2:	3d03      	subs	r5, #3
 80062e4:	45ac      	cmp	ip, r5
 80062e6:	bf38      	it	cc
 80062e8:	2200      	movcc	r2, #0
 80062ea:	4413      	add	r3, r2
 80062ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80062f0:	b17a      	cbz	r2, 8006312 <__mdiff+0x106>
 80062f2:	6107      	str	r7, [r0, #16]
 80062f4:	e7a4      	b.n	8006240 <__mdiff+0x34>
 80062f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80062fa:	fa11 f288 	uxtah	r2, r1, r8
 80062fe:	1414      	asrs	r4, r2, #16
 8006300:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006304:	b292      	uxth	r2, r2
 8006306:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800630a:	f84e 2b04 	str.w	r2, [lr], #4
 800630e:	1421      	asrs	r1, r4, #16
 8006310:	e7e0      	b.n	80062d4 <__mdiff+0xc8>
 8006312:	3f01      	subs	r7, #1
 8006314:	e7ea      	b.n	80062ec <__mdiff+0xe0>
 8006316:	bf00      	nop
 8006318:	08007002 	.word	0x08007002
 800631c:	08007013 	.word	0x08007013

08006320 <__d2b>:
 8006320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006324:	460f      	mov	r7, r1
 8006326:	2101      	movs	r1, #1
 8006328:	ec59 8b10 	vmov	r8, r9, d0
 800632c:	4616      	mov	r6, r2
 800632e:	f7ff fcd5 	bl	8005cdc <_Balloc>
 8006332:	4604      	mov	r4, r0
 8006334:	b930      	cbnz	r0, 8006344 <__d2b+0x24>
 8006336:	4602      	mov	r2, r0
 8006338:	4b24      	ldr	r3, [pc, #144]	; (80063cc <__d2b+0xac>)
 800633a:	4825      	ldr	r0, [pc, #148]	; (80063d0 <__d2b+0xb0>)
 800633c:	f240 310f 	movw	r1, #783	; 0x30f
 8006340:	f000 fa86 	bl	8006850 <__assert_func>
 8006344:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800634c:	bb2d      	cbnz	r5, 800639a <__d2b+0x7a>
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	f1b8 0300 	subs.w	r3, r8, #0
 8006354:	d026      	beq.n	80063a4 <__d2b+0x84>
 8006356:	4668      	mov	r0, sp
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	f7ff fd87 	bl	8005e6c <__lo0bits>
 800635e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006362:	b1e8      	cbz	r0, 80063a0 <__d2b+0x80>
 8006364:	f1c0 0320 	rsb	r3, r0, #32
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	430b      	orrs	r3, r1
 800636e:	40c2      	lsrs	r2, r0
 8006370:	6163      	str	r3, [r4, #20]
 8006372:	9201      	str	r2, [sp, #4]
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	61a3      	str	r3, [r4, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	bf14      	ite	ne
 800637c:	2202      	movne	r2, #2
 800637e:	2201      	moveq	r2, #1
 8006380:	6122      	str	r2, [r4, #16]
 8006382:	b1bd      	cbz	r5, 80063b4 <__d2b+0x94>
 8006384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006388:	4405      	add	r5, r0
 800638a:	603d      	str	r5, [r7, #0]
 800638c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006390:	6030      	str	r0, [r6, #0]
 8006392:	4620      	mov	r0, r4
 8006394:	b003      	add	sp, #12
 8006396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800639a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800639e:	e7d6      	b.n	800634e <__d2b+0x2e>
 80063a0:	6161      	str	r1, [r4, #20]
 80063a2:	e7e7      	b.n	8006374 <__d2b+0x54>
 80063a4:	a801      	add	r0, sp, #4
 80063a6:	f7ff fd61 	bl	8005e6c <__lo0bits>
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	6163      	str	r3, [r4, #20]
 80063ae:	3020      	adds	r0, #32
 80063b0:	2201      	movs	r2, #1
 80063b2:	e7e5      	b.n	8006380 <__d2b+0x60>
 80063b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063bc:	6038      	str	r0, [r7, #0]
 80063be:	6918      	ldr	r0, [r3, #16]
 80063c0:	f7ff fd34 	bl	8005e2c <__hi0bits>
 80063c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063c8:	e7e2      	b.n	8006390 <__d2b+0x70>
 80063ca:	bf00      	nop
 80063cc:	08007002 	.word	0x08007002
 80063d0:	08007013 	.word	0x08007013

080063d4 <__ssputs_r>:
 80063d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	688e      	ldr	r6, [r1, #8]
 80063da:	461f      	mov	r7, r3
 80063dc:	42be      	cmp	r6, r7
 80063de:	680b      	ldr	r3, [r1, #0]
 80063e0:	4682      	mov	sl, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	4690      	mov	r8, r2
 80063e6:	d82c      	bhi.n	8006442 <__ssputs_r+0x6e>
 80063e8:	898a      	ldrh	r2, [r1, #12]
 80063ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ee:	d026      	beq.n	800643e <__ssputs_r+0x6a>
 80063f0:	6965      	ldr	r5, [r4, #20]
 80063f2:	6909      	ldr	r1, [r1, #16]
 80063f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063f8:	eba3 0901 	sub.w	r9, r3, r1
 80063fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006400:	1c7b      	adds	r3, r7, #1
 8006402:	444b      	add	r3, r9
 8006404:	106d      	asrs	r5, r5, #1
 8006406:	429d      	cmp	r5, r3
 8006408:	bf38      	it	cc
 800640a:	461d      	movcc	r5, r3
 800640c:	0553      	lsls	r3, r2, #21
 800640e:	d527      	bpl.n	8006460 <__ssputs_r+0x8c>
 8006410:	4629      	mov	r1, r5
 8006412:	f7ff fbd7 	bl	8005bc4 <_malloc_r>
 8006416:	4606      	mov	r6, r0
 8006418:	b360      	cbz	r0, 8006474 <__ssputs_r+0xa0>
 800641a:	6921      	ldr	r1, [r4, #16]
 800641c:	464a      	mov	r2, r9
 800641e:	f000 fa09 	bl	8006834 <memcpy>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	6126      	str	r6, [r4, #16]
 8006430:	6165      	str	r5, [r4, #20]
 8006432:	444e      	add	r6, r9
 8006434:	eba5 0509 	sub.w	r5, r5, r9
 8006438:	6026      	str	r6, [r4, #0]
 800643a:	60a5      	str	r5, [r4, #8]
 800643c:	463e      	mov	r6, r7
 800643e:	42be      	cmp	r6, r7
 8006440:	d900      	bls.n	8006444 <__ssputs_r+0x70>
 8006442:	463e      	mov	r6, r7
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	4632      	mov	r2, r6
 8006448:	4641      	mov	r1, r8
 800644a:	f000 f9c9 	bl	80067e0 <memmove>
 800644e:	68a3      	ldr	r3, [r4, #8]
 8006450:	1b9b      	subs	r3, r3, r6
 8006452:	60a3      	str	r3, [r4, #8]
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	4433      	add	r3, r6
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	2000      	movs	r0, #0
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	462a      	mov	r2, r5
 8006462:	f000 fa3b 	bl	80068dc <_realloc_r>
 8006466:	4606      	mov	r6, r0
 8006468:	2800      	cmp	r0, #0
 800646a:	d1e0      	bne.n	800642e <__ssputs_r+0x5a>
 800646c:	6921      	ldr	r1, [r4, #16]
 800646e:	4650      	mov	r0, sl
 8006470:	f7ff fb34 	bl	8005adc <_free_r>
 8006474:	230c      	movs	r3, #12
 8006476:	f8ca 3000 	str.w	r3, [sl]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	f04f 30ff 	mov.w	r0, #4294967295
 8006486:	e7e9      	b.n	800645c <__ssputs_r+0x88>

08006488 <_svfiprintf_r>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	4698      	mov	r8, r3
 800648e:	898b      	ldrh	r3, [r1, #12]
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	b09d      	sub	sp, #116	; 0x74
 8006494:	4607      	mov	r7, r0
 8006496:	460d      	mov	r5, r1
 8006498:	4614      	mov	r4, r2
 800649a:	d50e      	bpl.n	80064ba <_svfiprintf_r+0x32>
 800649c:	690b      	ldr	r3, [r1, #16]
 800649e:	b963      	cbnz	r3, 80064ba <_svfiprintf_r+0x32>
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	f7ff fb8f 	bl	8005bc4 <_malloc_r>
 80064a6:	6028      	str	r0, [r5, #0]
 80064a8:	6128      	str	r0, [r5, #16]
 80064aa:	b920      	cbnz	r0, 80064b6 <_svfiprintf_r+0x2e>
 80064ac:	230c      	movs	r3, #12
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	f04f 30ff 	mov.w	r0, #4294967295
 80064b4:	e0d0      	b.n	8006658 <_svfiprintf_r+0x1d0>
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	616b      	str	r3, [r5, #20]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9309      	str	r3, [sp, #36]	; 0x24
 80064be:	2320      	movs	r3, #32
 80064c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c8:	2330      	movs	r3, #48	; 0x30
 80064ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006670 <_svfiprintf_r+0x1e8>
 80064ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d2:	f04f 0901 	mov.w	r9, #1
 80064d6:	4623      	mov	r3, r4
 80064d8:	469a      	mov	sl, r3
 80064da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064de:	b10a      	cbz	r2, 80064e4 <_svfiprintf_r+0x5c>
 80064e0:	2a25      	cmp	r2, #37	; 0x25
 80064e2:	d1f9      	bne.n	80064d8 <_svfiprintf_r+0x50>
 80064e4:	ebba 0b04 	subs.w	fp, sl, r4
 80064e8:	d00b      	beq.n	8006502 <_svfiprintf_r+0x7a>
 80064ea:	465b      	mov	r3, fp
 80064ec:	4622      	mov	r2, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff ff6f 	bl	80063d4 <__ssputs_r>
 80064f6:	3001      	adds	r0, #1
 80064f8:	f000 80a9 	beq.w	800664e <_svfiprintf_r+0x1c6>
 80064fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064fe:	445a      	add	r2, fp
 8006500:	9209      	str	r2, [sp, #36]	; 0x24
 8006502:	f89a 3000 	ldrb.w	r3, [sl]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80a1 	beq.w	800664e <_svfiprintf_r+0x1c6>
 800650c:	2300      	movs	r3, #0
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006516:	f10a 0a01 	add.w	sl, sl, #1
 800651a:	9304      	str	r3, [sp, #16]
 800651c:	9307      	str	r3, [sp, #28]
 800651e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006522:	931a      	str	r3, [sp, #104]	; 0x68
 8006524:	4654      	mov	r4, sl
 8006526:	2205      	movs	r2, #5
 8006528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652c:	4850      	ldr	r0, [pc, #320]	; (8006670 <_svfiprintf_r+0x1e8>)
 800652e:	f7f9 fe77 	bl	8000220 <memchr>
 8006532:	9a04      	ldr	r2, [sp, #16]
 8006534:	b9d8      	cbnz	r0, 800656e <_svfiprintf_r+0xe6>
 8006536:	06d0      	lsls	r0, r2, #27
 8006538:	bf44      	itt	mi
 800653a:	2320      	movmi	r3, #32
 800653c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006540:	0711      	lsls	r1, r2, #28
 8006542:	bf44      	itt	mi
 8006544:	232b      	movmi	r3, #43	; 0x2b
 8006546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654a:	f89a 3000 	ldrb.w	r3, [sl]
 800654e:	2b2a      	cmp	r3, #42	; 0x2a
 8006550:	d015      	beq.n	800657e <_svfiprintf_r+0xf6>
 8006552:	9a07      	ldr	r2, [sp, #28]
 8006554:	4654      	mov	r4, sl
 8006556:	2000      	movs	r0, #0
 8006558:	f04f 0c0a 	mov.w	ip, #10
 800655c:	4621      	mov	r1, r4
 800655e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006562:	3b30      	subs	r3, #48	; 0x30
 8006564:	2b09      	cmp	r3, #9
 8006566:	d94d      	bls.n	8006604 <_svfiprintf_r+0x17c>
 8006568:	b1b0      	cbz	r0, 8006598 <_svfiprintf_r+0x110>
 800656a:	9207      	str	r2, [sp, #28]
 800656c:	e014      	b.n	8006598 <_svfiprintf_r+0x110>
 800656e:	eba0 0308 	sub.w	r3, r0, r8
 8006572:	fa09 f303 	lsl.w	r3, r9, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	9304      	str	r3, [sp, #16]
 800657a:	46a2      	mov	sl, r4
 800657c:	e7d2      	b.n	8006524 <_svfiprintf_r+0x9c>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	1d19      	adds	r1, r3, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	9103      	str	r1, [sp, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	bfbb      	ittet	lt
 800658a:	425b      	neglt	r3, r3
 800658c:	f042 0202 	orrlt.w	r2, r2, #2
 8006590:	9307      	strge	r3, [sp, #28]
 8006592:	9307      	strlt	r3, [sp, #28]
 8006594:	bfb8      	it	lt
 8006596:	9204      	strlt	r2, [sp, #16]
 8006598:	7823      	ldrb	r3, [r4, #0]
 800659a:	2b2e      	cmp	r3, #46	; 0x2e
 800659c:	d10c      	bne.n	80065b8 <_svfiprintf_r+0x130>
 800659e:	7863      	ldrb	r3, [r4, #1]
 80065a0:	2b2a      	cmp	r3, #42	; 0x2a
 80065a2:	d134      	bne.n	800660e <_svfiprintf_r+0x186>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	1d1a      	adds	r2, r3, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	9203      	str	r2, [sp, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfb8      	it	lt
 80065b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b4:	3402      	adds	r4, #2
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006680 <_svfiprintf_r+0x1f8>
 80065bc:	7821      	ldrb	r1, [r4, #0]
 80065be:	2203      	movs	r2, #3
 80065c0:	4650      	mov	r0, sl
 80065c2:	f7f9 fe2d 	bl	8000220 <memchr>
 80065c6:	b138      	cbz	r0, 80065d8 <_svfiprintf_r+0x150>
 80065c8:	9b04      	ldr	r3, [sp, #16]
 80065ca:	eba0 000a 	sub.w	r0, r0, sl
 80065ce:	2240      	movs	r2, #64	; 0x40
 80065d0:	4082      	lsls	r2, r0
 80065d2:	4313      	orrs	r3, r2
 80065d4:	3401      	adds	r4, #1
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065dc:	4825      	ldr	r0, [pc, #148]	; (8006674 <_svfiprintf_r+0x1ec>)
 80065de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e2:	2206      	movs	r2, #6
 80065e4:	f7f9 fe1c 	bl	8000220 <memchr>
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d038      	beq.n	800665e <_svfiprintf_r+0x1d6>
 80065ec:	4b22      	ldr	r3, [pc, #136]	; (8006678 <_svfiprintf_r+0x1f0>)
 80065ee:	bb1b      	cbnz	r3, 8006638 <_svfiprintf_r+0x1b0>
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	3307      	adds	r3, #7
 80065f4:	f023 0307 	bic.w	r3, r3, #7
 80065f8:	3308      	adds	r3, #8
 80065fa:	9303      	str	r3, [sp, #12]
 80065fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fe:	4433      	add	r3, r6
 8006600:	9309      	str	r3, [sp, #36]	; 0x24
 8006602:	e768      	b.n	80064d6 <_svfiprintf_r+0x4e>
 8006604:	fb0c 3202 	mla	r2, ip, r2, r3
 8006608:	460c      	mov	r4, r1
 800660a:	2001      	movs	r0, #1
 800660c:	e7a6      	b.n	800655c <_svfiprintf_r+0xd4>
 800660e:	2300      	movs	r3, #0
 8006610:	3401      	adds	r4, #1
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	4619      	mov	r1, r3
 8006616:	f04f 0c0a 	mov.w	ip, #10
 800661a:	4620      	mov	r0, r4
 800661c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006620:	3a30      	subs	r2, #48	; 0x30
 8006622:	2a09      	cmp	r2, #9
 8006624:	d903      	bls.n	800662e <_svfiprintf_r+0x1a6>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0c6      	beq.n	80065b8 <_svfiprintf_r+0x130>
 800662a:	9105      	str	r1, [sp, #20]
 800662c:	e7c4      	b.n	80065b8 <_svfiprintf_r+0x130>
 800662e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006632:	4604      	mov	r4, r0
 8006634:	2301      	movs	r3, #1
 8006636:	e7f0      	b.n	800661a <_svfiprintf_r+0x192>
 8006638:	ab03      	add	r3, sp, #12
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	462a      	mov	r2, r5
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <_svfiprintf_r+0x1f4>)
 8006640:	a904      	add	r1, sp, #16
 8006642:	4638      	mov	r0, r7
 8006644:	f7fd fe62 	bl	800430c <_printf_float>
 8006648:	1c42      	adds	r2, r0, #1
 800664a:	4606      	mov	r6, r0
 800664c:	d1d6      	bne.n	80065fc <_svfiprintf_r+0x174>
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	065b      	lsls	r3, r3, #25
 8006652:	f53f af2d 	bmi.w	80064b0 <_svfiprintf_r+0x28>
 8006656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006658:	b01d      	add	sp, #116	; 0x74
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	ab03      	add	r3, sp, #12
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	462a      	mov	r2, r5
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <_svfiprintf_r+0x1f4>)
 8006666:	a904      	add	r1, sp, #16
 8006668:	4638      	mov	r0, r7
 800666a:	f7fe f8f3 	bl	8004854 <_printf_i>
 800666e:	e7eb      	b.n	8006648 <_svfiprintf_r+0x1c0>
 8006670:	0800716c 	.word	0x0800716c
 8006674:	08007176 	.word	0x08007176
 8006678:	0800430d 	.word	0x0800430d
 800667c:	080063d5 	.word	0x080063d5
 8006680:	08007172 	.word	0x08007172

08006684 <__sflush_r>:
 8006684:	898a      	ldrh	r2, [r1, #12]
 8006686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668a:	4605      	mov	r5, r0
 800668c:	0710      	lsls	r0, r2, #28
 800668e:	460c      	mov	r4, r1
 8006690:	d458      	bmi.n	8006744 <__sflush_r+0xc0>
 8006692:	684b      	ldr	r3, [r1, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	dc05      	bgt.n	80066a4 <__sflush_r+0x20>
 8006698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	dc02      	bgt.n	80066a4 <__sflush_r+0x20>
 800669e:	2000      	movs	r0, #0
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066a6:	2e00      	cmp	r6, #0
 80066a8:	d0f9      	beq.n	800669e <__sflush_r+0x1a>
 80066aa:	2300      	movs	r3, #0
 80066ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b0:	682f      	ldr	r7, [r5, #0]
 80066b2:	6a21      	ldr	r1, [r4, #32]
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	d032      	beq.n	800671e <__sflush_r+0x9a>
 80066b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	075a      	lsls	r2, r3, #29
 80066be:	d505      	bpl.n	80066cc <__sflush_r+0x48>
 80066c0:	6863      	ldr	r3, [r4, #4]
 80066c2:	1ac0      	subs	r0, r0, r3
 80066c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066c6:	b10b      	cbz	r3, 80066cc <__sflush_r+0x48>
 80066c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ca:	1ac0      	subs	r0, r0, r3
 80066cc:	2300      	movs	r3, #0
 80066ce:	4602      	mov	r2, r0
 80066d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d2:	6a21      	ldr	r1, [r4, #32]
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b0      	blx	r6
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	d106      	bne.n	80066ec <__sflush_r+0x68>
 80066de:	6829      	ldr	r1, [r5, #0]
 80066e0:	291d      	cmp	r1, #29
 80066e2:	d82b      	bhi.n	800673c <__sflush_r+0xb8>
 80066e4:	4a29      	ldr	r2, [pc, #164]	; (800678c <__sflush_r+0x108>)
 80066e6:	410a      	asrs	r2, r1
 80066e8:	07d6      	lsls	r6, r2, #31
 80066ea:	d427      	bmi.n	800673c <__sflush_r+0xb8>
 80066ec:	2200      	movs	r2, #0
 80066ee:	6062      	str	r2, [r4, #4]
 80066f0:	04d9      	lsls	r1, r3, #19
 80066f2:	6922      	ldr	r2, [r4, #16]
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	d504      	bpl.n	8006702 <__sflush_r+0x7e>
 80066f8:	1c42      	adds	r2, r0, #1
 80066fa:	d101      	bne.n	8006700 <__sflush_r+0x7c>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	b903      	cbnz	r3, 8006702 <__sflush_r+0x7e>
 8006700:	6560      	str	r0, [r4, #84]	; 0x54
 8006702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006704:	602f      	str	r7, [r5, #0]
 8006706:	2900      	cmp	r1, #0
 8006708:	d0c9      	beq.n	800669e <__sflush_r+0x1a>
 800670a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670e:	4299      	cmp	r1, r3
 8006710:	d002      	beq.n	8006718 <__sflush_r+0x94>
 8006712:	4628      	mov	r0, r5
 8006714:	f7ff f9e2 	bl	8005adc <_free_r>
 8006718:	2000      	movs	r0, #0
 800671a:	6360      	str	r0, [r4, #52]	; 0x34
 800671c:	e7c0      	b.n	80066a0 <__sflush_r+0x1c>
 800671e:	2301      	movs	r3, #1
 8006720:	4628      	mov	r0, r5
 8006722:	47b0      	blx	r6
 8006724:	1c41      	adds	r1, r0, #1
 8006726:	d1c8      	bne.n	80066ba <__sflush_r+0x36>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0c5      	beq.n	80066ba <__sflush_r+0x36>
 800672e:	2b1d      	cmp	r3, #29
 8006730:	d001      	beq.n	8006736 <__sflush_r+0xb2>
 8006732:	2b16      	cmp	r3, #22
 8006734:	d101      	bne.n	800673a <__sflush_r+0xb6>
 8006736:	602f      	str	r7, [r5, #0]
 8006738:	e7b1      	b.n	800669e <__sflush_r+0x1a>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	e7ad      	b.n	80066a0 <__sflush_r+0x1c>
 8006744:	690f      	ldr	r7, [r1, #16]
 8006746:	2f00      	cmp	r7, #0
 8006748:	d0a9      	beq.n	800669e <__sflush_r+0x1a>
 800674a:	0793      	lsls	r3, r2, #30
 800674c:	680e      	ldr	r6, [r1, #0]
 800674e:	bf08      	it	eq
 8006750:	694b      	ldreq	r3, [r1, #20]
 8006752:	600f      	str	r7, [r1, #0]
 8006754:	bf18      	it	ne
 8006756:	2300      	movne	r3, #0
 8006758:	eba6 0807 	sub.w	r8, r6, r7
 800675c:	608b      	str	r3, [r1, #8]
 800675e:	f1b8 0f00 	cmp.w	r8, #0
 8006762:	dd9c      	ble.n	800669e <__sflush_r+0x1a>
 8006764:	6a21      	ldr	r1, [r4, #32]
 8006766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006768:	4643      	mov	r3, r8
 800676a:	463a      	mov	r2, r7
 800676c:	4628      	mov	r0, r5
 800676e:	47b0      	blx	r6
 8006770:	2800      	cmp	r0, #0
 8006772:	dc06      	bgt.n	8006782 <__sflush_r+0xfe>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	f04f 30ff 	mov.w	r0, #4294967295
 8006780:	e78e      	b.n	80066a0 <__sflush_r+0x1c>
 8006782:	4407      	add	r7, r0
 8006784:	eba8 0800 	sub.w	r8, r8, r0
 8006788:	e7e9      	b.n	800675e <__sflush_r+0xda>
 800678a:	bf00      	nop
 800678c:	dfbffffe 	.word	0xdfbffffe

08006790 <_fflush_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	690b      	ldr	r3, [r1, #16]
 8006794:	4605      	mov	r5, r0
 8006796:	460c      	mov	r4, r1
 8006798:	b913      	cbnz	r3, 80067a0 <_fflush_r+0x10>
 800679a:	2500      	movs	r5, #0
 800679c:	4628      	mov	r0, r5
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	b118      	cbz	r0, 80067aa <_fflush_r+0x1a>
 80067a2:	6a03      	ldr	r3, [r0, #32]
 80067a4:	b90b      	cbnz	r3, 80067aa <_fflush_r+0x1a>
 80067a6:	f7fe fa03 	bl	8004bb0 <__sinit>
 80067aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f3      	beq.n	800679a <_fflush_r+0xa>
 80067b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067b4:	07d0      	lsls	r0, r2, #31
 80067b6:	d404      	bmi.n	80067c2 <_fflush_r+0x32>
 80067b8:	0599      	lsls	r1, r3, #22
 80067ba:	d402      	bmi.n	80067c2 <_fflush_r+0x32>
 80067bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067be:	f7fe fb0e 	bl	8004dde <__retarget_lock_acquire_recursive>
 80067c2:	4628      	mov	r0, r5
 80067c4:	4621      	mov	r1, r4
 80067c6:	f7ff ff5d 	bl	8006684 <__sflush_r>
 80067ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067cc:	07da      	lsls	r2, r3, #31
 80067ce:	4605      	mov	r5, r0
 80067d0:	d4e4      	bmi.n	800679c <_fflush_r+0xc>
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	059b      	lsls	r3, r3, #22
 80067d6:	d4e1      	bmi.n	800679c <_fflush_r+0xc>
 80067d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067da:	f7fe fb01 	bl	8004de0 <__retarget_lock_release_recursive>
 80067de:	e7dd      	b.n	800679c <_fflush_r+0xc>

080067e0 <memmove>:
 80067e0:	4288      	cmp	r0, r1
 80067e2:	b510      	push	{r4, lr}
 80067e4:	eb01 0402 	add.w	r4, r1, r2
 80067e8:	d902      	bls.n	80067f0 <memmove+0x10>
 80067ea:	4284      	cmp	r4, r0
 80067ec:	4623      	mov	r3, r4
 80067ee:	d807      	bhi.n	8006800 <memmove+0x20>
 80067f0:	1e43      	subs	r3, r0, #1
 80067f2:	42a1      	cmp	r1, r4
 80067f4:	d008      	beq.n	8006808 <memmove+0x28>
 80067f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067fe:	e7f8      	b.n	80067f2 <memmove+0x12>
 8006800:	4402      	add	r2, r0
 8006802:	4601      	mov	r1, r0
 8006804:	428a      	cmp	r2, r1
 8006806:	d100      	bne.n	800680a <memmove+0x2a>
 8006808:	bd10      	pop	{r4, pc}
 800680a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800680e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006812:	e7f7      	b.n	8006804 <memmove+0x24>

08006814 <_sbrk_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4d06      	ldr	r5, [pc, #24]	; (8006830 <_sbrk_r+0x1c>)
 8006818:	2300      	movs	r3, #0
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fa ff6e 	bl	8001700 <_sbrk>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_sbrk_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_sbrk_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	200005c4 	.word	0x200005c4

08006834 <memcpy>:
 8006834:	440a      	add	r2, r1
 8006836:	4291      	cmp	r1, r2
 8006838:	f100 33ff 	add.w	r3, r0, #4294967295
 800683c:	d100      	bne.n	8006840 <memcpy+0xc>
 800683e:	4770      	bx	lr
 8006840:	b510      	push	{r4, lr}
 8006842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800684a:	4291      	cmp	r1, r2
 800684c:	d1f9      	bne.n	8006842 <memcpy+0xe>
 800684e:	bd10      	pop	{r4, pc}

08006850 <__assert_func>:
 8006850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006852:	4614      	mov	r4, r2
 8006854:	461a      	mov	r2, r3
 8006856:	4b09      	ldr	r3, [pc, #36]	; (800687c <__assert_func+0x2c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4605      	mov	r5, r0
 800685c:	68d8      	ldr	r0, [r3, #12]
 800685e:	b14c      	cbz	r4, 8006874 <__assert_func+0x24>
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <__assert_func+0x30>)
 8006862:	9100      	str	r1, [sp, #0]
 8006864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006868:	4906      	ldr	r1, [pc, #24]	; (8006884 <__assert_func+0x34>)
 800686a:	462b      	mov	r3, r5
 800686c:	f000 f872 	bl	8006954 <fiprintf>
 8006870:	f000 f882 	bl	8006978 <abort>
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <__assert_func+0x38>)
 8006876:	461c      	mov	r4, r3
 8006878:	e7f3      	b.n	8006862 <__assert_func+0x12>
 800687a:	bf00      	nop
 800687c:	2000008c 	.word	0x2000008c
 8006880:	08007187 	.word	0x08007187
 8006884:	08007194 	.word	0x08007194
 8006888:	080071c2 	.word	0x080071c2

0800688c <_calloc_r>:
 800688c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800688e:	fba1 2402 	umull	r2, r4, r1, r2
 8006892:	b94c      	cbnz	r4, 80068a8 <_calloc_r+0x1c>
 8006894:	4611      	mov	r1, r2
 8006896:	9201      	str	r2, [sp, #4]
 8006898:	f7ff f994 	bl	8005bc4 <_malloc_r>
 800689c:	9a01      	ldr	r2, [sp, #4]
 800689e:	4605      	mov	r5, r0
 80068a0:	b930      	cbnz	r0, 80068b0 <_calloc_r+0x24>
 80068a2:	4628      	mov	r0, r5
 80068a4:	b003      	add	sp, #12
 80068a6:	bd30      	pop	{r4, r5, pc}
 80068a8:	220c      	movs	r2, #12
 80068aa:	6002      	str	r2, [r0, #0]
 80068ac:	2500      	movs	r5, #0
 80068ae:	e7f8      	b.n	80068a2 <_calloc_r+0x16>
 80068b0:	4621      	mov	r1, r4
 80068b2:	f7fe fa16 	bl	8004ce2 <memset>
 80068b6:	e7f4      	b.n	80068a2 <_calloc_r+0x16>

080068b8 <__ascii_mbtowc>:
 80068b8:	b082      	sub	sp, #8
 80068ba:	b901      	cbnz	r1, 80068be <__ascii_mbtowc+0x6>
 80068bc:	a901      	add	r1, sp, #4
 80068be:	b142      	cbz	r2, 80068d2 <__ascii_mbtowc+0x1a>
 80068c0:	b14b      	cbz	r3, 80068d6 <__ascii_mbtowc+0x1e>
 80068c2:	7813      	ldrb	r3, [r2, #0]
 80068c4:	600b      	str	r3, [r1, #0]
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	1e10      	subs	r0, r2, #0
 80068ca:	bf18      	it	ne
 80068cc:	2001      	movne	r0, #1
 80068ce:	b002      	add	sp, #8
 80068d0:	4770      	bx	lr
 80068d2:	4610      	mov	r0, r2
 80068d4:	e7fb      	b.n	80068ce <__ascii_mbtowc+0x16>
 80068d6:	f06f 0001 	mvn.w	r0, #1
 80068da:	e7f8      	b.n	80068ce <__ascii_mbtowc+0x16>

080068dc <_realloc_r>:
 80068dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e0:	4680      	mov	r8, r0
 80068e2:	4614      	mov	r4, r2
 80068e4:	460e      	mov	r6, r1
 80068e6:	b921      	cbnz	r1, 80068f2 <_realloc_r+0x16>
 80068e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ec:	4611      	mov	r1, r2
 80068ee:	f7ff b969 	b.w	8005bc4 <_malloc_r>
 80068f2:	b92a      	cbnz	r2, 8006900 <_realloc_r+0x24>
 80068f4:	f7ff f8f2 	bl	8005adc <_free_r>
 80068f8:	4625      	mov	r5, r4
 80068fa:	4628      	mov	r0, r5
 80068fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006900:	f000 f841 	bl	8006986 <_malloc_usable_size_r>
 8006904:	4284      	cmp	r4, r0
 8006906:	4607      	mov	r7, r0
 8006908:	d802      	bhi.n	8006910 <_realloc_r+0x34>
 800690a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800690e:	d812      	bhi.n	8006936 <_realloc_r+0x5a>
 8006910:	4621      	mov	r1, r4
 8006912:	4640      	mov	r0, r8
 8006914:	f7ff f956 	bl	8005bc4 <_malloc_r>
 8006918:	4605      	mov	r5, r0
 800691a:	2800      	cmp	r0, #0
 800691c:	d0ed      	beq.n	80068fa <_realloc_r+0x1e>
 800691e:	42bc      	cmp	r4, r7
 8006920:	4622      	mov	r2, r4
 8006922:	4631      	mov	r1, r6
 8006924:	bf28      	it	cs
 8006926:	463a      	movcs	r2, r7
 8006928:	f7ff ff84 	bl	8006834 <memcpy>
 800692c:	4631      	mov	r1, r6
 800692e:	4640      	mov	r0, r8
 8006930:	f7ff f8d4 	bl	8005adc <_free_r>
 8006934:	e7e1      	b.n	80068fa <_realloc_r+0x1e>
 8006936:	4635      	mov	r5, r6
 8006938:	e7df      	b.n	80068fa <_realloc_r+0x1e>

0800693a <__ascii_wctomb>:
 800693a:	b149      	cbz	r1, 8006950 <__ascii_wctomb+0x16>
 800693c:	2aff      	cmp	r2, #255	; 0xff
 800693e:	bf85      	ittet	hi
 8006940:	238a      	movhi	r3, #138	; 0x8a
 8006942:	6003      	strhi	r3, [r0, #0]
 8006944:	700a      	strbls	r2, [r1, #0]
 8006946:	f04f 30ff 	movhi.w	r0, #4294967295
 800694a:	bf98      	it	ls
 800694c:	2001      	movls	r0, #1
 800694e:	4770      	bx	lr
 8006950:	4608      	mov	r0, r1
 8006952:	4770      	bx	lr

08006954 <fiprintf>:
 8006954:	b40e      	push	{r1, r2, r3}
 8006956:	b503      	push	{r0, r1, lr}
 8006958:	4601      	mov	r1, r0
 800695a:	ab03      	add	r3, sp, #12
 800695c:	4805      	ldr	r0, [pc, #20]	; (8006974 <fiprintf+0x20>)
 800695e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	f000 f83f 	bl	80069e8 <_vfiprintf_r>
 800696a:	b002      	add	sp, #8
 800696c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006970:	b003      	add	sp, #12
 8006972:	4770      	bx	lr
 8006974:	2000008c 	.word	0x2000008c

08006978 <abort>:
 8006978:	b508      	push	{r3, lr}
 800697a:	2006      	movs	r0, #6
 800697c:	f000 fa0c 	bl	8006d98 <raise>
 8006980:	2001      	movs	r0, #1
 8006982:	f7fa fe8f 	bl	80016a4 <_exit>

08006986 <_malloc_usable_size_r>:
 8006986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800698a:	1f18      	subs	r0, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	bfbc      	itt	lt
 8006990:	580b      	ldrlt	r3, [r1, r0]
 8006992:	18c0      	addlt	r0, r0, r3
 8006994:	4770      	bx	lr

08006996 <__sfputc_r>:
 8006996:	6893      	ldr	r3, [r2, #8]
 8006998:	3b01      	subs	r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	b410      	push	{r4}
 800699e:	6093      	str	r3, [r2, #8]
 80069a0:	da08      	bge.n	80069b4 <__sfputc_r+0x1e>
 80069a2:	6994      	ldr	r4, [r2, #24]
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	db01      	blt.n	80069ac <__sfputc_r+0x16>
 80069a8:	290a      	cmp	r1, #10
 80069aa:	d103      	bne.n	80069b4 <__sfputc_r+0x1e>
 80069ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b0:	f000 b934 	b.w	8006c1c <__swbuf_r>
 80069b4:	6813      	ldr	r3, [r2, #0]
 80069b6:	1c58      	adds	r0, r3, #1
 80069b8:	6010      	str	r0, [r2, #0]
 80069ba:	7019      	strb	r1, [r3, #0]
 80069bc:	4608      	mov	r0, r1
 80069be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <__sfputs_r>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	4606      	mov	r6, r0
 80069c8:	460f      	mov	r7, r1
 80069ca:	4614      	mov	r4, r2
 80069cc:	18d5      	adds	r5, r2, r3
 80069ce:	42ac      	cmp	r4, r5
 80069d0:	d101      	bne.n	80069d6 <__sfputs_r+0x12>
 80069d2:	2000      	movs	r0, #0
 80069d4:	e007      	b.n	80069e6 <__sfputs_r+0x22>
 80069d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069da:	463a      	mov	r2, r7
 80069dc:	4630      	mov	r0, r6
 80069de:	f7ff ffda 	bl	8006996 <__sfputc_r>
 80069e2:	1c43      	adds	r3, r0, #1
 80069e4:	d1f3      	bne.n	80069ce <__sfputs_r+0xa>
 80069e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069e8 <_vfiprintf_r>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	460d      	mov	r5, r1
 80069ee:	b09d      	sub	sp, #116	; 0x74
 80069f0:	4614      	mov	r4, r2
 80069f2:	4698      	mov	r8, r3
 80069f4:	4606      	mov	r6, r0
 80069f6:	b118      	cbz	r0, 8006a00 <_vfiprintf_r+0x18>
 80069f8:	6a03      	ldr	r3, [r0, #32]
 80069fa:	b90b      	cbnz	r3, 8006a00 <_vfiprintf_r+0x18>
 80069fc:	f7fe f8d8 	bl	8004bb0 <__sinit>
 8006a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a02:	07d9      	lsls	r1, r3, #31
 8006a04:	d405      	bmi.n	8006a12 <_vfiprintf_r+0x2a>
 8006a06:	89ab      	ldrh	r3, [r5, #12]
 8006a08:	059a      	lsls	r2, r3, #22
 8006a0a:	d402      	bmi.n	8006a12 <_vfiprintf_r+0x2a>
 8006a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a0e:	f7fe f9e6 	bl	8004dde <__retarget_lock_acquire_recursive>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	071b      	lsls	r3, r3, #28
 8006a16:	d501      	bpl.n	8006a1c <_vfiprintf_r+0x34>
 8006a18:	692b      	ldr	r3, [r5, #16]
 8006a1a:	b99b      	cbnz	r3, 8006a44 <_vfiprintf_r+0x5c>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f000 f93a 	bl	8006c98 <__swsetup_r>
 8006a24:	b170      	cbz	r0, 8006a44 <_vfiprintf_r+0x5c>
 8006a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a28:	07dc      	lsls	r4, r3, #31
 8006a2a:	d504      	bpl.n	8006a36 <_vfiprintf_r+0x4e>
 8006a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a30:	b01d      	add	sp, #116	; 0x74
 8006a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a36:	89ab      	ldrh	r3, [r5, #12]
 8006a38:	0598      	lsls	r0, r3, #22
 8006a3a:	d4f7      	bmi.n	8006a2c <_vfiprintf_r+0x44>
 8006a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a3e:	f7fe f9cf 	bl	8004de0 <__retarget_lock_release_recursive>
 8006a42:	e7f3      	b.n	8006a2c <_vfiprintf_r+0x44>
 8006a44:	2300      	movs	r3, #0
 8006a46:	9309      	str	r3, [sp, #36]	; 0x24
 8006a48:	2320      	movs	r3, #32
 8006a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a52:	2330      	movs	r3, #48	; 0x30
 8006a54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006c08 <_vfiprintf_r+0x220>
 8006a58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a5c:	f04f 0901 	mov.w	r9, #1
 8006a60:	4623      	mov	r3, r4
 8006a62:	469a      	mov	sl, r3
 8006a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a68:	b10a      	cbz	r2, 8006a6e <_vfiprintf_r+0x86>
 8006a6a:	2a25      	cmp	r2, #37	; 0x25
 8006a6c:	d1f9      	bne.n	8006a62 <_vfiprintf_r+0x7a>
 8006a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a72:	d00b      	beq.n	8006a8c <_vfiprintf_r+0xa4>
 8006a74:	465b      	mov	r3, fp
 8006a76:	4622      	mov	r2, r4
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7ff ffa2 	bl	80069c4 <__sfputs_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	f000 80a9 	beq.w	8006bd8 <_vfiprintf_r+0x1f0>
 8006a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a88:	445a      	add	r2, fp
 8006a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80a1 	beq.w	8006bd8 <_vfiprintf_r+0x1f0>
 8006a96:	2300      	movs	r3, #0
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	9307      	str	r3, [sp, #28]
 8006aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aac:	931a      	str	r3, [sp, #104]	; 0x68
 8006aae:	4654      	mov	r4, sl
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab6:	4854      	ldr	r0, [pc, #336]	; (8006c08 <_vfiprintf_r+0x220>)
 8006ab8:	f7f9 fbb2 	bl	8000220 <memchr>
 8006abc:	9a04      	ldr	r2, [sp, #16]
 8006abe:	b9d8      	cbnz	r0, 8006af8 <_vfiprintf_r+0x110>
 8006ac0:	06d1      	lsls	r1, r2, #27
 8006ac2:	bf44      	itt	mi
 8006ac4:	2320      	movmi	r3, #32
 8006ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aca:	0713      	lsls	r3, r2, #28
 8006acc:	bf44      	itt	mi
 8006ace:	232b      	movmi	r3, #43	; 0x2b
 8006ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8006ada:	d015      	beq.n	8006b08 <_vfiprintf_r+0x120>
 8006adc:	9a07      	ldr	r2, [sp, #28]
 8006ade:	4654      	mov	r4, sl
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	f04f 0c0a 	mov.w	ip, #10
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aec:	3b30      	subs	r3, #48	; 0x30
 8006aee:	2b09      	cmp	r3, #9
 8006af0:	d94d      	bls.n	8006b8e <_vfiprintf_r+0x1a6>
 8006af2:	b1b0      	cbz	r0, 8006b22 <_vfiprintf_r+0x13a>
 8006af4:	9207      	str	r2, [sp, #28]
 8006af6:	e014      	b.n	8006b22 <_vfiprintf_r+0x13a>
 8006af8:	eba0 0308 	sub.w	r3, r0, r8
 8006afc:	fa09 f303 	lsl.w	r3, r9, r3
 8006b00:	4313      	orrs	r3, r2
 8006b02:	9304      	str	r3, [sp, #16]
 8006b04:	46a2      	mov	sl, r4
 8006b06:	e7d2      	b.n	8006aae <_vfiprintf_r+0xc6>
 8006b08:	9b03      	ldr	r3, [sp, #12]
 8006b0a:	1d19      	adds	r1, r3, #4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	9103      	str	r1, [sp, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bfbb      	ittet	lt
 8006b14:	425b      	neglt	r3, r3
 8006b16:	f042 0202 	orrlt.w	r2, r2, #2
 8006b1a:	9307      	strge	r3, [sp, #28]
 8006b1c:	9307      	strlt	r3, [sp, #28]
 8006b1e:	bfb8      	it	lt
 8006b20:	9204      	strlt	r2, [sp, #16]
 8006b22:	7823      	ldrb	r3, [r4, #0]
 8006b24:	2b2e      	cmp	r3, #46	; 0x2e
 8006b26:	d10c      	bne.n	8006b42 <_vfiprintf_r+0x15a>
 8006b28:	7863      	ldrb	r3, [r4, #1]
 8006b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b2c:	d134      	bne.n	8006b98 <_vfiprintf_r+0x1b0>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	9203      	str	r2, [sp, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bfb8      	it	lt
 8006b3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b3e:	3402      	adds	r4, #2
 8006b40:	9305      	str	r3, [sp, #20]
 8006b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006c18 <_vfiprintf_r+0x230>
 8006b46:	7821      	ldrb	r1, [r4, #0]
 8006b48:	2203      	movs	r2, #3
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	f7f9 fb68 	bl	8000220 <memchr>
 8006b50:	b138      	cbz	r0, 8006b62 <_vfiprintf_r+0x17a>
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	eba0 000a 	sub.w	r0, r0, sl
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	4082      	lsls	r2, r0
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	3401      	adds	r4, #1
 8006b60:	9304      	str	r3, [sp, #16]
 8006b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b66:	4829      	ldr	r0, [pc, #164]	; (8006c0c <_vfiprintf_r+0x224>)
 8006b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b6c:	2206      	movs	r2, #6
 8006b6e:	f7f9 fb57 	bl	8000220 <memchr>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d03f      	beq.n	8006bf6 <_vfiprintf_r+0x20e>
 8006b76:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <_vfiprintf_r+0x228>)
 8006b78:	bb1b      	cbnz	r3, 8006bc2 <_vfiprintf_r+0x1da>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	3307      	adds	r3, #7
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	3308      	adds	r3, #8
 8006b84:	9303      	str	r3, [sp, #12]
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	443b      	add	r3, r7
 8006b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8c:	e768      	b.n	8006a60 <_vfiprintf_r+0x78>
 8006b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b92:	460c      	mov	r4, r1
 8006b94:	2001      	movs	r0, #1
 8006b96:	e7a6      	b.n	8006ae6 <_vfiprintf_r+0xfe>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	3401      	adds	r4, #1
 8006b9c:	9305      	str	r3, [sp, #20]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	f04f 0c0a 	mov.w	ip, #10
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006baa:	3a30      	subs	r2, #48	; 0x30
 8006bac:	2a09      	cmp	r2, #9
 8006bae:	d903      	bls.n	8006bb8 <_vfiprintf_r+0x1d0>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0c6      	beq.n	8006b42 <_vfiprintf_r+0x15a>
 8006bb4:	9105      	str	r1, [sp, #20]
 8006bb6:	e7c4      	b.n	8006b42 <_vfiprintf_r+0x15a>
 8006bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e7f0      	b.n	8006ba4 <_vfiprintf_r+0x1bc>
 8006bc2:	ab03      	add	r3, sp, #12
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <_vfiprintf_r+0x22c>)
 8006bca:	a904      	add	r1, sp, #16
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f7fd fb9d 	bl	800430c <_printf_float>
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	1c78      	adds	r0, r7, #1
 8006bd6:	d1d6      	bne.n	8006b86 <_vfiprintf_r+0x19e>
 8006bd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bda:	07d9      	lsls	r1, r3, #31
 8006bdc:	d405      	bmi.n	8006bea <_vfiprintf_r+0x202>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	059a      	lsls	r2, r3, #22
 8006be2:	d402      	bmi.n	8006bea <_vfiprintf_r+0x202>
 8006be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006be6:	f7fe f8fb 	bl	8004de0 <__retarget_lock_release_recursive>
 8006bea:	89ab      	ldrh	r3, [r5, #12]
 8006bec:	065b      	lsls	r3, r3, #25
 8006bee:	f53f af1d 	bmi.w	8006a2c <_vfiprintf_r+0x44>
 8006bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bf4:	e71c      	b.n	8006a30 <_vfiprintf_r+0x48>
 8006bf6:	ab03      	add	r3, sp, #12
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	462a      	mov	r2, r5
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <_vfiprintf_r+0x22c>)
 8006bfe:	a904      	add	r1, sp, #16
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7fd fe27 	bl	8004854 <_printf_i>
 8006c06:	e7e4      	b.n	8006bd2 <_vfiprintf_r+0x1ea>
 8006c08:	0800716c 	.word	0x0800716c
 8006c0c:	08007176 	.word	0x08007176
 8006c10:	0800430d 	.word	0x0800430d
 8006c14:	080069c5 	.word	0x080069c5
 8006c18:	08007172 	.word	0x08007172

08006c1c <__swbuf_r>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	460e      	mov	r6, r1
 8006c20:	4614      	mov	r4, r2
 8006c22:	4605      	mov	r5, r0
 8006c24:	b118      	cbz	r0, 8006c2e <__swbuf_r+0x12>
 8006c26:	6a03      	ldr	r3, [r0, #32]
 8006c28:	b90b      	cbnz	r3, 8006c2e <__swbuf_r+0x12>
 8006c2a:	f7fd ffc1 	bl	8004bb0 <__sinit>
 8006c2e:	69a3      	ldr	r3, [r4, #24]
 8006c30:	60a3      	str	r3, [r4, #8]
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	071a      	lsls	r2, r3, #28
 8006c36:	d525      	bpl.n	8006c84 <__swbuf_r+0x68>
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	b31b      	cbz	r3, 8006c84 <__swbuf_r+0x68>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	6922      	ldr	r2, [r4, #16]
 8006c40:	1a98      	subs	r0, r3, r2
 8006c42:	6963      	ldr	r3, [r4, #20]
 8006c44:	b2f6      	uxtb	r6, r6
 8006c46:	4283      	cmp	r3, r0
 8006c48:	4637      	mov	r7, r6
 8006c4a:	dc04      	bgt.n	8006c56 <__swbuf_r+0x3a>
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7ff fd9e 	bl	8006790 <_fflush_r>
 8006c54:	b9e0      	cbnz	r0, 8006c90 <__swbuf_r+0x74>
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	60a3      	str	r3, [r4, #8]
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	6022      	str	r2, [r4, #0]
 8006c62:	701e      	strb	r6, [r3, #0]
 8006c64:	6962      	ldr	r2, [r4, #20]
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d004      	beq.n	8006c76 <__swbuf_r+0x5a>
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	07db      	lsls	r3, r3, #31
 8006c70:	d506      	bpl.n	8006c80 <__swbuf_r+0x64>
 8006c72:	2e0a      	cmp	r6, #10
 8006c74:	d104      	bne.n	8006c80 <__swbuf_r+0x64>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7ff fd89 	bl	8006790 <_fflush_r>
 8006c7e:	b938      	cbnz	r0, 8006c90 <__swbuf_r+0x74>
 8006c80:	4638      	mov	r0, r7
 8006c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c84:	4621      	mov	r1, r4
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f806 	bl	8006c98 <__swsetup_r>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d0d5      	beq.n	8006c3c <__swbuf_r+0x20>
 8006c90:	f04f 37ff 	mov.w	r7, #4294967295
 8006c94:	e7f4      	b.n	8006c80 <__swbuf_r+0x64>
	...

08006c98 <__swsetup_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <__swsetup_r+0xac>)
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	b118      	cbz	r0, 8006cac <__swsetup_r+0x14>
 8006ca4:	6a03      	ldr	r3, [r0, #32]
 8006ca6:	b90b      	cbnz	r3, 8006cac <__swsetup_r+0x14>
 8006ca8:	f7fd ff82 	bl	8004bb0 <__sinit>
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cb2:	0718      	lsls	r0, r3, #28
 8006cb4:	d422      	bmi.n	8006cfc <__swsetup_r+0x64>
 8006cb6:	06d9      	lsls	r1, r3, #27
 8006cb8:	d407      	bmi.n	8006cca <__swsetup_r+0x32>
 8006cba:	2309      	movs	r3, #9
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cc2:	81a3      	strh	r3, [r4, #12]
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	e034      	b.n	8006d34 <__swsetup_r+0x9c>
 8006cca:	0758      	lsls	r0, r3, #29
 8006ccc:	d512      	bpl.n	8006cf4 <__swsetup_r+0x5c>
 8006cce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cd0:	b141      	cbz	r1, 8006ce4 <__swsetup_r+0x4c>
 8006cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cd6:	4299      	cmp	r1, r3
 8006cd8:	d002      	beq.n	8006ce0 <__swsetup_r+0x48>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f7fe fefe 	bl	8005adc <_free_r>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6363      	str	r3, [r4, #52]	; 0x34
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	2300      	movs	r3, #0
 8006cee:	6063      	str	r3, [r4, #4]
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f043 0308 	orr.w	r3, r3, #8
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	b94b      	cbnz	r3, 8006d14 <__swsetup_r+0x7c>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0a:	d003      	beq.n	8006d14 <__swsetup_r+0x7c>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f884 	bl	8006e1c <__smakebuf_r>
 8006d14:	89a0      	ldrh	r0, [r4, #12]
 8006d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d1a:	f010 0301 	ands.w	r3, r0, #1
 8006d1e:	d00a      	beq.n	8006d36 <__swsetup_r+0x9e>
 8006d20:	2300      	movs	r3, #0
 8006d22:	60a3      	str	r3, [r4, #8]
 8006d24:	6963      	ldr	r3, [r4, #20]
 8006d26:	425b      	negs	r3, r3
 8006d28:	61a3      	str	r3, [r4, #24]
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	b943      	cbnz	r3, 8006d40 <__swsetup_r+0xa8>
 8006d2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d32:	d1c4      	bne.n	8006cbe <__swsetup_r+0x26>
 8006d34:	bd38      	pop	{r3, r4, r5, pc}
 8006d36:	0781      	lsls	r1, r0, #30
 8006d38:	bf58      	it	pl
 8006d3a:	6963      	ldrpl	r3, [r4, #20]
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	e7f4      	b.n	8006d2a <__swsetup_r+0x92>
 8006d40:	2000      	movs	r0, #0
 8006d42:	e7f7      	b.n	8006d34 <__swsetup_r+0x9c>
 8006d44:	2000008c 	.word	0x2000008c

08006d48 <_raise_r>:
 8006d48:	291f      	cmp	r1, #31
 8006d4a:	b538      	push	{r3, r4, r5, lr}
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	460d      	mov	r5, r1
 8006d50:	d904      	bls.n	8006d5c <_raise_r+0x14>
 8006d52:	2316      	movs	r3, #22
 8006d54:	6003      	str	r3, [r0, #0]
 8006d56:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5a:	bd38      	pop	{r3, r4, r5, pc}
 8006d5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006d5e:	b112      	cbz	r2, 8006d66 <_raise_r+0x1e>
 8006d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d64:	b94b      	cbnz	r3, 8006d7a <_raise_r+0x32>
 8006d66:	4620      	mov	r0, r4
 8006d68:	f000 f830 	bl	8006dcc <_getpid_r>
 8006d6c:	462a      	mov	r2, r5
 8006d6e:	4601      	mov	r1, r0
 8006d70:	4620      	mov	r0, r4
 8006d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d76:	f000 b817 	b.w	8006da8 <_kill_r>
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d00a      	beq.n	8006d94 <_raise_r+0x4c>
 8006d7e:	1c59      	adds	r1, r3, #1
 8006d80:	d103      	bne.n	8006d8a <_raise_r+0x42>
 8006d82:	2316      	movs	r3, #22
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	2001      	movs	r0, #1
 8006d88:	e7e7      	b.n	8006d5a <_raise_r+0x12>
 8006d8a:	2400      	movs	r4, #0
 8006d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d90:	4628      	mov	r0, r5
 8006d92:	4798      	blx	r3
 8006d94:	2000      	movs	r0, #0
 8006d96:	e7e0      	b.n	8006d5a <_raise_r+0x12>

08006d98 <raise>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <raise+0xc>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f7ff bfd3 	b.w	8006d48 <_raise_r>
 8006da2:	bf00      	nop
 8006da4:	2000008c 	.word	0x2000008c

08006da8 <_kill_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4d07      	ldr	r5, [pc, #28]	; (8006dc8 <_kill_r+0x20>)
 8006dac:	2300      	movs	r3, #0
 8006dae:	4604      	mov	r4, r0
 8006db0:	4608      	mov	r0, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	f7fa fc6d 	bl	8001694 <_kill>
 8006dba:	1c43      	adds	r3, r0, #1
 8006dbc:	d102      	bne.n	8006dc4 <_kill_r+0x1c>
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	b103      	cbz	r3, 8006dc4 <_kill_r+0x1c>
 8006dc2:	6023      	str	r3, [r4, #0]
 8006dc4:	bd38      	pop	{r3, r4, r5, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200005c4 	.word	0x200005c4

08006dcc <_getpid_r>:
 8006dcc:	f7fa bc60 	b.w	8001690 <_getpid>

08006dd0 <__swhatbuf_r>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	b096      	sub	sp, #88	; 0x58
 8006ddc:	4615      	mov	r5, r2
 8006dde:	461e      	mov	r6, r3
 8006de0:	da0d      	bge.n	8006dfe <__swhatbuf_r+0x2e>
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006de8:	f04f 0100 	mov.w	r1, #0
 8006dec:	bf0c      	ite	eq
 8006dee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006df2:	2340      	movne	r3, #64	; 0x40
 8006df4:	2000      	movs	r0, #0
 8006df6:	6031      	str	r1, [r6, #0]
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	b016      	add	sp, #88	; 0x58
 8006dfc:	bd70      	pop	{r4, r5, r6, pc}
 8006dfe:	466a      	mov	r2, sp
 8006e00:	f000 f848 	bl	8006e94 <_fstat_r>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	dbec      	blt.n	8006de2 <__swhatbuf_r+0x12>
 8006e08:	9901      	ldr	r1, [sp, #4]
 8006e0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e12:	4259      	negs	r1, r3
 8006e14:	4159      	adcs	r1, r3
 8006e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1a:	e7eb      	b.n	8006df4 <__swhatbuf_r+0x24>

08006e1c <__smakebuf_r>:
 8006e1c:	898b      	ldrh	r3, [r1, #12]
 8006e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e20:	079d      	lsls	r5, r3, #30
 8006e22:	4606      	mov	r6, r0
 8006e24:	460c      	mov	r4, r1
 8006e26:	d507      	bpl.n	8006e38 <__smakebuf_r+0x1c>
 8006e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e2c:	6023      	str	r3, [r4, #0]
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	2301      	movs	r3, #1
 8006e32:	6163      	str	r3, [r4, #20]
 8006e34:	b002      	add	sp, #8
 8006e36:	bd70      	pop	{r4, r5, r6, pc}
 8006e38:	ab01      	add	r3, sp, #4
 8006e3a:	466a      	mov	r2, sp
 8006e3c:	f7ff ffc8 	bl	8006dd0 <__swhatbuf_r>
 8006e40:	9900      	ldr	r1, [sp, #0]
 8006e42:	4605      	mov	r5, r0
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7fe febd 	bl	8005bc4 <_malloc_r>
 8006e4a:	b948      	cbnz	r0, 8006e60 <__smakebuf_r+0x44>
 8006e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e50:	059a      	lsls	r2, r3, #22
 8006e52:	d4ef      	bmi.n	8006e34 <__smakebuf_r+0x18>
 8006e54:	f023 0303 	bic.w	r3, r3, #3
 8006e58:	f043 0302 	orr.w	r3, r3, #2
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	e7e3      	b.n	8006e28 <__smakebuf_r+0xc>
 8006e60:	89a3      	ldrh	r3, [r4, #12]
 8006e62:	6020      	str	r0, [r4, #0]
 8006e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e68:	81a3      	strh	r3, [r4, #12]
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	6163      	str	r3, [r4, #20]
 8006e6e:	9b01      	ldr	r3, [sp, #4]
 8006e70:	6120      	str	r0, [r4, #16]
 8006e72:	b15b      	cbz	r3, 8006e8c <__smakebuf_r+0x70>
 8006e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f000 f81d 	bl	8006eb8 <_isatty_r>
 8006e7e:	b128      	cbz	r0, 8006e8c <__smakebuf_r+0x70>
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	431d      	orrs	r5, r3
 8006e90:	81a5      	strh	r5, [r4, #12]
 8006e92:	e7cf      	b.n	8006e34 <__smakebuf_r+0x18>

08006e94 <_fstat_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d07      	ldr	r5, [pc, #28]	; (8006eb4 <_fstat_r+0x20>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	602b      	str	r3, [r5, #0]
 8006ea2:	f7fa fc24 	bl	80016ee <_fstat>
 8006ea6:	1c43      	adds	r3, r0, #1
 8006ea8:	d102      	bne.n	8006eb0 <_fstat_r+0x1c>
 8006eaa:	682b      	ldr	r3, [r5, #0]
 8006eac:	b103      	cbz	r3, 8006eb0 <_fstat_r+0x1c>
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	bd38      	pop	{r3, r4, r5, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200005c4 	.word	0x200005c4

08006eb8 <_isatty_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4d06      	ldr	r5, [pc, #24]	; (8006ed4 <_isatty_r+0x1c>)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	f7fa fc18 	bl	80016f8 <_isatty>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_isatty_r+0x1a>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_isatty_r+0x1a>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	200005c4 	.word	0x200005c4

08006ed8 <_init>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr

08006ee4 <_fini>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr
